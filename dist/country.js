(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.countryjs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Åland Islands",
    "official": "Åland Islands",
    "native": {
      "swe": {
        "official": "Landskapet Åland",
        "common": "Åland"
      }
    }
  },
  "tld": [
    ".ax"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "358"
  ],
  "capital": "Mariehamn",
  "altSpellings": [
    "AX",
    "Aaland",
    "Aland",
    "Ahvenanmaa"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "swe": "Swedish"
  },
  "translations": {
    "deu": {
      "official": "Åland-Inseln",
      "common": "Åland"
    },
    "fra": {
      "official": "Ahvenanmaa",
      "common": "Ahvenanmaa"
    },
    "hrv": {
      "official": "Aland Islands",
      "common": "Ålandski otoci"
    },
    "ita": {
      "official": "Isole Åland",
      "common": "Isole Aland"
    },
    "jpn": {
      "official": "オーランド諸島",
      "common": "オーランド諸島"
    },
    "nld": {
      "official": "Åland eilanden",
      "common": "Ålandeilanden"
    },
    "por": {
      "official": "Ilhas Åland",
      "common": "Alândia"
    },
    "rus": {
      "official": "Аландские острова",
      "common": "Аландские острова"
    },
    "spa": {
      "official": "Islas Åland",
      "common": "Alandia"
    },
    "fin": {
      "official": "Ahvenanmaan maakunta",
      "common": "Ahvenanmaa"
    }
  },
  "latlng": [
    60.116667,
    19.9
  ],
  "demonym": "Ålandish",
  "landlocked": false,
  "borders": [],
  "area": 1580,
  "codes": {
    "cca2": "AX",
    "ccn3": "248",
    "cca3": "ALA",
    "cioc": ""
  }
}
},{}],2:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Afghanistan",
    "official": "Islamic Republic of Afghanistan",
    "native": {
      "prs": {
        "official": "جمهوری اسلامی افغانستان",
        "common": "افغانستان"
      },
      "pus": {
        "official": "د افغانستان اسلامي جمهوریت",
        "common": "افغانستان"
      },
      "tuk": {
        "official": "Owganystan Yslam Respublikasy",
        "common": "Owganystan"
      }
    }
  },
  "altSpellings": [
    "AF",
    "Afġānistān"
  ],
  "area": 652230,
  "borders": [
    "IRN",
    "PAK",
    "TKM",
    "UZB",
    "TJK",
    "CHN"
  ],
  "capital": "Kabul",
  "demonym": "Afghan",
  "languages": {
    "prs": "Dari",
    "pus": "Pashto",
    "tuk": "Turkmen"
  },
  "latlng": [
    33,
    65
  ],
  "nativeName": "افغانستان",
  "population": 26023100,
  "region": "Asia",
  "subregion": "Southern Asia",
  "timezones": [
    "UTC+04:30"
  ],
  "tld": [
    ".af"
  ],
  "translations": {
    "cym": {
      "official": "Islamic Republic of Afghanistan",
      "common": "Affganistan"
    },
    "deu": {
      "official": "Islamische Republik Afghanistan",
      "common": "Afghanistan"
    },
    "fra": {
      "official": "République islamique d'Afghanistan",
      "common": "Afghanistan"
    },
    "hrv": {
      "official": "Islamska Republika Afganistan",
      "common": "Afganistan"
    },
    "ita": {
      "official": "Repubblica islamica dell'Afghanistan",
      "common": "Afghanistan"
    },
    "jpn": {
      "official": "アフガニスタン·イスラム共和国",
      "common": "アフガニスタン"
    },
    "nld": {
      "official": "Islamitische Republiek Afghanistan",
      "common": "Afghanistan"
    },
    "por": {
      "official": "República Islâmica do Afeganistão",
      "common": "Afeganistão"
    },
    "rus": {
      "official": "Исламская Республика Афганистан",
      "common": "Афганистан"
    },
    "spa": {
      "official": "República Islámica de Afganistán",
      "common": "Afganistán"
    },
    "fin": {
      "official": "Afganistanin islamilainen tasavalta",
      "common": "Afganistan"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/afghanistan",
  "currency": [
    "AFN"
  ],
  "callingCode": [
    "93"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "AF",
    "ccn3": "004",
    "cca3": "AFG",
    "cioc": "AFG"
  }
}
},{}],3:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Albania",
    "official": "Republic of Albania",
    "native": {
      "sqi": {
        "official": "Republika e Shqipërisë",
        "common": "Shqipëria"
      }
    }
  },
  "altSpellings": [
    "AL",
    "Shqipëri",
    "Shqipëria",
    "Shqipnia"
  ],
  "area": 28748,
  "borders": [
    "MNE",
    "GRC",
    "MKD",
    "KOS"
  ],
  "capital": "Tirana",
  "demonym": "Albanian",
  "languages": {
    "sqi": "Albanian"
  },
  "latlng": [
    41,
    20
  ],
  "nativeName": "Shqipëria",
  "population": 2895947,
  "region": "Europe",
  "subregion": "Southern Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".al"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Albania",
      "common": "Albania"
    },
    "deu": {
      "official": "Republik Albanien",
      "common": "Albanien"
    },
    "fra": {
      "official": "République d'Albanie",
      "common": "Albanie"
    },
    "hrv": {
      "official": "Republika Albanija",
      "common": "Albanija"
    },
    "ita": {
      "official": "Repubblica d'Albania",
      "common": "Albania"
    },
    "jpn": {
      "official": "アルバニア共和国",
      "common": "アルバニア"
    },
    "nld": {
      "official": "Republiek Albanië",
      "common": "Albanië"
    },
    "por": {
      "official": "República da Albânia",
      "common": "Albânia"
    },
    "rus": {
      "official": "Республика Албания",
      "common": "Албания"
    },
    "spa": {
      "official": "República de Albania",
      "common": "Albania"
    },
    "fin": {
      "official": "Albanian tasavalta",
      "common": "Albania"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/albania",
  "currency": [
    "ALL"
  ],
  "callingCode": [
    "355"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "AL",
    "ccn3": "008",
    "cca3": "ALB",
    "cioc": "ALB"
  }
}
},{}],4:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Algeria",
    "official": "People's Democratic Republic of Algeria",
    "native": {
      "ara": {
        "official": "الجمهورية الديمقراطية الشعبية الجزائرية",
        "common": "الجزائر"
      }
    }
  },
  "altSpellings": [
    "DZ",
    "Dzayer",
    "Algérie"
  ],
  "area": 2381741,
  "borders": [
    "TUN",
    "LBY",
    "NER",
    "ESH",
    "MRT",
    "MLI",
    "MAR"
  ],
  "capital": "Algiers",
  "demonym": "Algerian",
  "languages": {
    "ara": "Arabic"
  },
  "latlng": [
    28,
    3
  ],
  "nativeName": "الجزائر",
  "population": 38700000,
  "region": "Africa",
  "subregion": "Northern Africa",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".dz",
    "الجزائر."
  ],
  "translations": {
    "cym": {
      "official": "People's Democratic Republic of Algeria",
      "common": "Algeria"
    },
    "deu": {
      "official": "Demokratische Volksrepublik Algerien",
      "common": "Algerien"
    },
    "fra": {
      "official": "République démocratique et populaire d'Algérie",
      "common": "Algérie"
    },
    "hrv": {
      "official": "Narodna Demokratska Republika Alžir",
      "common": "Alžir"
    },
    "ita": {
      "official": "Repubblica popolare democratica di Algeria",
      "common": "Algeria"
    },
    "jpn": {
      "official": "アルジェリア人民民主共和国",
      "common": "アルジェリア"
    },
    "nld": {
      "official": "Democratische Volksrepubliek Algerije",
      "common": "Algerije"
    },
    "por": {
      "official": "República Argelina Democrática e Popular",
      "common": "Argélia"
    },
    "rus": {
      "official": "Народно-Демократическая Республика Алжир",
      "common": "Алжир"
    },
    "spa": {
      "official": "República Argelina Democrática y Popular",
      "common": "Argelia"
    },
    "fin": {
      "official": "Algerian demokraattinen kansantasavalta",
      "common": "Algeria"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/algeria",
  "currency": [
    "DZD"
  ],
  "callingCode": [
    "213"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "DZ",
    "ccn3": "012",
    "cca3": "DZA",
    "cioc": "ALG"
  }
}
},{}],5:[function(require,module,exports){
module.exports={
  "name": {
    "common": "American Samoa",
    "official": "American Samoa",
    "native": {
      "eng": {
        "official": "American Samoa",
        "common": "American Samoa"
      },
      "smo": {
        "official": "Sāmoa Amelika",
        "common": "Sāmoa Amelika"
      }
    }
  },
  "altSpellings": [
    "AS",
    "Amerika Sāmoa",
    "Amelika Sāmoa",
    "Sāmoa Amelika"
  ],
  "area": 199,
  "borders": [],
  "capital": "Pago Pago",
  "demonym": "American Samoan",
  "languages": {
    "eng": "English",
    "smo": "Samoan"
  },
  "latlng": [
    -14.33333333,
    -170
  ],
  "nativeName": "American Samoa",
  "population": 55519,
  "region": "Oceania",
  "subregion": "Polynesia",
  "timezones": null,
  "tld": [
    ".as"
  ],
  "translations": {
    "deu": {
      "official": "Amerikanisch-Samoa",
      "common": "Amerikanisch-Samoa"
    },
    "fra": {
      "official": "Samoa américaines",
      "common": "Samoa américaines"
    },
    "hrv": {
      "official": "američka Samoa",
      "common": "Američka Samoa"
    },
    "ita": {
      "official": "Samoa americane",
      "common": "Samoa Americane"
    },
    "jpn": {
      "official": "米サモア",
      "common": "アメリカ領サモア"
    },
    "nld": {
      "official": "Amerikaans Samoa",
      "common": "Amerikaans Samoa"
    },
    "por": {
      "official": "Samoa americana",
      "common": "Samoa Americana"
    },
    "rus": {
      "official": "американское Самоа",
      "common": "Американское Самоа"
    },
    "spa": {
      "official": "Samoa Americana",
      "common": "Samoa Americana"
    },
    "fin": {
      "official": "Amerikan Samoa",
      "common": "Amerikan Samoa"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/american_samoa",
  "currency": [
    "USD"
  ],
  "callingCode": [
    "1684"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "AS",
    "ccn3": "016",
    "cca3": "ASM",
    "cioc": "ASA"
  }
}
},{}],6:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Andorra",
    "official": "Principality of Andorra",
    "native": {
      "cat": {
        "official": "Principat d'Andorra",
        "common": "Andorra"
      }
    }
  },
  "tld": [
    ".ad"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "376"
  ],
  "capital": "Andorra la Vella",
  "altSpellings": [
    "AD",
    "Principality of Andorra",
    "Principat d'Andorra"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "cat": "Catalan"
  },
  "translations": {
    "cym": {
      "official": "Principality of Andorra",
      "common": "Andorra"
    },
    "deu": {
      "official": "Fürstentum Andorra",
      "common": "Andorra"
    },
    "fra": {
      "official": "Principauté d'Andorre",
      "common": "Andorre"
    },
    "hrv": {
      "official": "Kneževina Andora",
      "common": "Andora"
    },
    "ita": {
      "official": "Principato di Andorra",
      "common": "Andorra"
    },
    "jpn": {
      "official": "アンドラ公国",
      "common": "アンドラ"
    },
    "nld": {
      "official": "Prinsdom Andorra",
      "common": "Andorra"
    },
    "por": {
      "official": "Principado de Andorra",
      "common": "Andorra"
    },
    "rus": {
      "official": "Княжество Андорра",
      "common": "Андорра"
    },
    "spa": {
      "official": "Principado de Andorra",
      "common": "Andorra"
    },
    "fin": {
      "official": "Andorran ruhtinaskunta",
      "common": "Andorra"
    }
  },
  "latlng": [
    42.5,
    1.5
  ],
  "demonym": "Andorran",
  "landlocked": true,
  "borders": [
    "FRA",
    "ESP"
  ],
  "area": 468,
  "codes": {
    "cca2": "AD",
    "ccn3": "020",
    "cca3": "AND",
    "cioc": "AND"
  }
}
},{}],7:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Angola",
    "official": "Republic of Angola",
    "native": {
      "por": {
        "official": "República de Angola",
        "common": "Angola"
      }
    }
  },
  "altSpellings": [
    "AO",
    "República de Angola",
    "ʁɛpublika de an'ɡɔla"
  ],
  "area": 1246700,
  "borders": [
    "COG",
    "COD",
    "ZMB",
    "NAM"
  ],
  "capital": "Luanda",
  "demonym": "Angolan",
  "languages": {
    "por": "Portuguese"
  },
  "latlng": [
    -12.5,
    18.5
  ],
  "nativeName": "Angola",
  "population": 24383301,
  "region": "Africa",
  "subregion": "Middle Africa",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".ao"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Angola",
      "common": "Angola"
    },
    "deu": {
      "official": "Republik Angola",
      "common": "Angola"
    },
    "fra": {
      "official": "République d'Angola",
      "common": "Angola"
    },
    "hrv": {
      "official": "Republika Angola",
      "common": "Angola"
    },
    "ita": {
      "official": "Repubblica dell'Angola",
      "common": "Angola"
    },
    "jpn": {
      "official": "アンゴラ共和国",
      "common": "アンゴラ"
    },
    "nld": {
      "official": "Republiek Angola",
      "common": "Angola"
    },
    "por": {
      "official": "República de Angola",
      "common": "Angola"
    },
    "rus": {
      "official": "Республика Ангола",
      "common": "Ангола"
    },
    "spa": {
      "official": "República de Angola",
      "common": "Angola"
    },
    "fin": {
      "official": "Angolan tasavalta",
      "common": "Angola"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/angola",
  "currency": [
    "AOA"
  ],
  "callingCode": [
    "244"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "AO",
    "ccn3": "024",
    "cca3": "AGO",
    "cioc": "ANG"
  }
}
},{}],8:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Anguilla",
    "official": "Anguilla",
    "native": {
      "eng": {
        "official": "Anguilla",
        "common": "Anguilla"
      }
    }
  },
  "altSpellings": [
    "AI"
  ],
  "area": 91,
  "borders": [],
  "capital": "The Valley",
  "demonym": "Anguillian",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    18.25,
    -63.16666666
  ],
  "nativeName": "Anguilla",
  "population": 13452,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": null,
  "tld": [
    ".ai"
  ],
  "translations": {
    "deu": {
      "official": "Anguilla",
      "common": "Anguilla"
    },
    "fra": {
      "official": "Anguilla",
      "common": "Anguilla"
    },
    "hrv": {
      "official": "Anguilla",
      "common": "Angvila"
    },
    "ita": {
      "official": "Anguilla",
      "common": "Anguilla"
    },
    "jpn": {
      "official": "アングィラ",
      "common": "アンギラ"
    },
    "nld": {
      "official": "Anguilla",
      "common": "Anguilla"
    },
    "por": {
      "official": "Anguilla",
      "common": "Anguilla"
    },
    "rus": {
      "official": "Ангилья",
      "common": "Ангилья"
    },
    "spa": {
      "official": "Anguila",
      "common": "Anguilla"
    },
    "fin": {
      "official": "Anguilla",
      "common": "Anguilla"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/anguilla",
  "currency": [
    "XCD"
  ],
  "callingCode": [
    "1264"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "AI",
    "ccn3": "660",
    "cca3": "AIA",
    "cioc": ""
  }
}
},{}],9:[function(require,module,exports){
module.exports={
  "tld": [
    ".aq"
  ],
  "wiki": "http://en.wikipedia.org/wiki/antarctica",
  "name": {
    "common": "Antarctica",
    "official": "Antarctica",
    "native": []
  },
  "currency": [],
  "callingCode": [],
  "capital": "",
  "altSpellings": [
    "AQ"
  ],
  "region": "",
  "subregion": "",
  "languages": {},
  "translations": {
    "cym": {
      "official": "Antarctica",
      "common": "Antarctica"
    },
    "deu": {
      "official": "Antarktika",
      "common": "Antarktis"
    },
    "fra": {
      "official": "Antarctique",
      "common": "Antarctique"
    },
    "hrv": {
      "official": "Antarktika",
      "common": "Antarktika"
    },
    "ita": {
      "official": "Antartide",
      "common": "Antartide"
    },
    "jpn": {
      "official": "南極大陸",
      "common": "南極"
    },
    "nld": {
      "official": "Antarctica",
      "common": "Antarctica"
    },
    "por": {
      "official": "Antártica",
      "common": "Antártida"
    },
    "rus": {
      "official": "Антарктида",
      "common": "Антарктида"
    },
    "spa": {
      "official": "Antártida",
      "common": "Antártida"
    },
    "fin": {
      "official": "Etelämanner",
      "common": "Etelämanner"
    }
  },
  "latlng": [
    -90,
    0
  ],
  "demonym": "Antarctican",
  "landlocked": false,
  "borders": [],
  "area": 14000000,
  "codes": {
    "cca2": "AQ",
    "ccn3": "010",
    "cca3": "ATA",
    "cioc": ""
  }
}
},{}],10:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Antigua and Barbuda",
    "official": "Antigua and Barbuda",
    "native": {
      "eng": {
        "official": "Antigua and Barbuda",
        "common": "Antigua and Barbuda"
      }
    }
  },
  "altSpellings": [
    "AG"
  ],
  "area": 442,
  "borders": [],
  "capital": "Saint John's",
  "demonym": "Antiguan, Barbudan",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    17.05,
    -61.8
  ],
  "nativeName": "Antigua and Barbuda",
  "population": 86295,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": [
    "UTC−04:00"
  ],
  "tld": [
    ".ag"
  ],
  "translations": {
    "cym": {
      "official": "Antigua and Barbuda",
      "common": "Antigwa a Barbiwda"
    },
    "deu": {
      "official": "Antigua und Barbuda",
      "common": "Antigua und Barbuda"
    },
    "fra": {
      "official": "Antigua -et-Barbuda",
      "common": "Antigua-et-Barbuda"
    },
    "hrv": {
      "official": "Antigva i Barbuda",
      "common": "Antigva i Barbuda"
    },
    "ita": {
      "official": "Antigua e Barbuda",
      "common": "Antigua e Barbuda"
    },
    "jpn": {
      "official": "アンチグアバーブーダ",
      "common": "アンティグア・バーブーダ"
    },
    "nld": {
      "official": "Antigua en Barbuda",
      "common": "Antigua en Barbuda"
    },
    "por": {
      "official": "Antigua e Barbuda",
      "common": "Antígua e Barbuda"
    },
    "rus": {
      "official": "Антигуа и Барбуда",
      "common": "Антигуа и Барбуда"
    },
    "spa": {
      "official": "Antigua y Barbuda",
      "common": "Antigua y Barbuda"
    },
    "fin": {
      "official": "Antigua ja Barbuda",
      "common": "Antigua ja Barbuda"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/antigua_and_barbuda",
  "currency": [
    "XCD"
  ],
  "callingCode": [
    "1268"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "AG",
    "ccn3": "028",
    "cca3": "ATG",
    "cioc": "ANT"
  }
}
},{}],11:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Argentina",
    "official": "Argentine Republic",
    "native": {
      "grn": {
        "official": "Argentine Republic",
        "common": "Argentina"
      },
      "spa": {
        "official": "República Argentina",
        "common": "Argentina"
      }
    }
  },
  "altSpellings": [
    "AR",
    "Argentine Republic",
    "República Argentina"
  ],
  "area": 2780400,
  "borders": [
    "BOL",
    "BRA",
    "CHL",
    "PRY",
    "URY"
  ],
  "capital": "Buenos Aires",
  "demonym": "Argentinean",
  "languages": {
    "grn": "Guaraní",
    "spa": "Spanish"
  },
  "latlng": [
    -34,
    -64
  ],
  "nativeName": "Argentina",
  "population": 42669500,
  "region": "Americas",
  "subregion": "South America",
  "timezones": [
    "UTC−03:00"
  ],
  "tld": [
    ".ar"
  ],
  "translations": {
    "cym": {
      "official": "Argentine Republic",
      "common": "Ariannin"
    },
    "deu": {
      "official": "Argentinische Republik",
      "common": "Argentinien"
    },
    "fra": {
      "official": "République argentine",
      "common": "Argentine"
    },
    "hrv": {
      "official": "Argentinski Republika",
      "common": "Argentina"
    },
    "ita": {
      "official": "Repubblica Argentina",
      "common": "Argentina"
    },
    "jpn": {
      "official": "アルゼンチン共和国",
      "common": "アルゼンチン"
    },
    "nld": {
      "official": "Argentijnse Republiek",
      "common": "Argentinië"
    },
    "por": {
      "official": "República Argentina",
      "common": "Argentina"
    },
    "rus": {
      "official": "Аргентинская Республика",
      "common": "Аргентина"
    },
    "spa": {
      "official": "República Argentina",
      "common": "Argentina"
    },
    "fin": {
      "official": "Argentiinan tasavalta",
      "common": "Argentiina"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/argentina",
  "currency": [
    "ARS"
  ],
  "callingCode": [
    "54"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "AR",
    "ccn3": "032",
    "cca3": "ARG",
    "cioc": "ARG"
  }
}
},{}],12:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Armenia",
    "official": "Republic of Armenia",
    "native": {
      "hye": {
        "official": "Հայաստանի Հանրապետություն",
        "common": "Հայաստան"
      },
      "rus": {
        "official": "Республика Армения",
        "common": "Армения"
      }
    }
  },
  "altSpellings": [
    "AM",
    "Hayastan",
    "Republic of Armenia",
    "Հայաստանի Հանրապետություն"
  ],
  "area": 29743,
  "borders": [
    "AZE",
    "GEO",
    "IRN",
    "TUR"
  ],
  "capital": "Yerevan",
  "demonym": "Armenian",
  "languages": {
    "hye": "Armenian",
    "rus": "Russian"
  },
  "latlng": [
    40,
    45
  ],
  "nativeName": "Հայաստան",
  "population": 3009800,
  "region": "Asia",
  "subregion": "Western Asia",
  "timezones": [
    "UTC+04:00"
  ],
  "tld": [
    ".am"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Armenia",
      "common": "Armenia"
    },
    "deu": {
      "official": "Republik Armenien",
      "common": "Armenien"
    },
    "fra": {
      "official": "République d'Arménie",
      "common": "Arménie"
    },
    "hrv": {
      "official": "Republika Armenija",
      "common": "Armenija"
    },
    "ita": {
      "official": "Repubblica di Armenia",
      "common": "Armenia"
    },
    "jpn": {
      "official": "アルメニア共和国",
      "common": "アルメニア"
    },
    "nld": {
      "official": "Republiek Armenië",
      "common": "Armenië"
    },
    "por": {
      "official": "República da Arménia",
      "common": "Arménia"
    },
    "rus": {
      "official": "Республика Армения",
      "common": "Армения"
    },
    "spa": {
      "official": "República de Armenia",
      "common": "Armenia"
    },
    "fin": {
      "official": "Armenian tasavalta",
      "common": "Armenia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/armenia",
  "currency": [
    "AMD"
  ],
  "callingCode": [
    "374"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "AM",
    "ccn3": "051",
    "cca3": "ARM",
    "cioc": "ARM"
  }
}
},{}],13:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Aruba",
    "official": "Aruba",
    "native": {
      "nld": {
        "official": "Aruba",
        "common": "Aruba"
      },
      "pap": {
        "official": "Aruba",
        "common": "Aruba"
      }
    }
  },
  "altSpellings": [
    "AW"
  ],
  "area": 180,
  "borders": [],
  "capital": "Oranjestad",
  "demonym": "Aruban",
  "languages": {
    "nld": "Dutch",
    "pap": "Papiamento"
  },
  "latlng": [
    12.5,
    -69.96666666
  ],
  "nativeName": "Aruba",
  "population": 101484,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": null,
  "tld": [
    ".aw"
  ],
  "translations": {
    "deu": {
      "official": "Aruba",
      "common": "Aruba"
    },
    "fra": {
      "official": "Aruba",
      "common": "Aruba"
    },
    "hrv": {
      "official": "Aruba",
      "common": "Aruba"
    },
    "ita": {
      "official": "Aruba",
      "common": "Aruba"
    },
    "jpn": {
      "official": "アルバ",
      "common": "アルバ"
    },
    "nld": {
      "official": "Aruba",
      "common": "Aruba"
    },
    "por": {
      "official": "Aruba",
      "common": "Aruba"
    },
    "rus": {
      "official": "Аруба",
      "common": "Аруба"
    },
    "spa": {
      "official": "Aruba",
      "common": "Aruba"
    },
    "fin": {
      "official": "Aruba",
      "common": "Aruba"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/aruba",
  "currency": [
    "AWG"
  ],
  "callingCode": [
    "297"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "AW",
    "ccn3": "533",
    "cca3": "ABW",
    "cioc": "ARU"
  }
}
},{}],14:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Australia",
    "official": "Commonwealth of Australia",
    "native": {
      "eng": {
        "official": "Commonwealth of Australia",
        "common": "Australia"
      }
    }
  },
  "altSpellings": [
    "AU"
  ],
  "area": 7692024,
  "borders": [],
  "capital": "Canberra",
  "demonym": "Australian",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    -27,
    133
  ],
  "nativeName": "Australia",
  "population": 23696900,
  "region": "Oceania",
  "subregion": "Australia and New Zealand",
  "timezones": [
    "UTC+05:00",
    "UTC+06:30",
    "UTC+07:00",
    "UTC+08:00",
    "UTC+09:30",
    "UTC+10:00",
    "UTC+10:30",
    "UTC+11:30"
  ],
  "tld": [
    ".au"
  ],
  "translations": {
    "cym": {
      "official": "Commonwealth of Australia",
      "common": "Awstralia"
    },
    "deu": {
      "official": "Commonwealth Australien",
      "common": "Australien"
    },
    "fra": {
      "official": "Australie",
      "common": "Australie"
    },
    "hrv": {
      "official": "Commonwealth of Australia",
      "common": "Australija"
    },
    "ita": {
      "official": "Commonwealth dell'Australia",
      "common": "Australia"
    },
    "jpn": {
      "official": "オーストラリア連邦",
      "common": "オーストラリア"
    },
    "nld": {
      "official": "Gemenebest van Australië",
      "common": "Australië"
    },
    "por": {
      "official": "Comunidade da Austrália",
      "common": "Austrália"
    },
    "rus": {
      "official": "Содружество Австралии",
      "common": "Австралия"
    },
    "spa": {
      "official": "Mancomunidad de Australia",
      "common": "Australia"
    },
    "fin": {
      "official": "Australian liittovaltio",
      "common": "Australia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/australia",
  "currency": [
    "AUD"
  ],
  "callingCode": [
    "61"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "AU",
    "ccn3": "036",
    "cca3": "AUS",
    "cioc": "AUS"
  }
}
},{}],15:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Austria",
    "official": "Republic of Austria",
    "native": {
      "bar": {
        "official": "Republik Österreich",
        "common": "Österreich"
      }
    }
  },
  "altSpellings": [
    "AT",
    "Osterreich",
    "Oesterreich"
  ],
  "area": 83871,
  "borders": [
    "CZE",
    "DEU",
    "HUN",
    "ITA",
    "LIE",
    "SVK",
    "SVN",
    "CHE"
  ],
  "capital": "Vienna",
  "demonym": "Austrian",
  "languages": {
    "bar": "Austro-Bavarian German"
  },
  "latlng": [
    47.33333333,
    13.33333333
  ],
  "nativeName": "Österreich",
  "population": 8527230,
  "region": "Europe",
  "subregion": "Western Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".at"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Austria",
      "common": "Awstria"
    },
    "deu": {
      "official": "Republik Österreich",
      "common": "Österreich"
    },
    "fra": {
      "official": "République d'Autriche",
      "common": "Autriche"
    },
    "hrv": {
      "official": "Republika Austrija",
      "common": "Austrija"
    },
    "ita": {
      "official": "Repubblica d'Austria",
      "common": "Austria"
    },
    "jpn": {
      "official": "オーストリア共和国",
      "common": "オーストリア"
    },
    "nld": {
      "official": "Republiek Oostenrijk",
      "common": "Oostenrijk"
    },
    "por": {
      "official": "República da Áustria",
      "common": "Áustria"
    },
    "rus": {
      "official": "Австрийская Республика",
      "common": "Австрия"
    },
    "spa": {
      "official": "República de Austria",
      "common": "Austria"
    },
    "fin": {
      "official": "Itävallan tasavalta",
      "common": "Itävalta"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/austria",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "43"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "AT",
    "ccn3": "040",
    "cca3": "AUT",
    "cioc": "AUT"
  }
}
},{}],16:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Azerbaijan",
    "official": "Republic of Azerbaijan",
    "native": {
      "aze": {
        "official": "Azərbaycan Respublikası",
        "common": "Azərbaycan"
      },
      "rus": {
        "official": "Азербайджанская Республика",
        "common": "Азербайджан"
      }
    }
  },
  "altSpellings": [
    "AZ",
    "Republic of Azerbaijan",
    "Azərbaycan Respublikası"
  ],
  "area": 86600,
  "borders": [
    "ARM",
    "GEO",
    "IRN",
    "RUS",
    "TUR"
  ],
  "capital": "Baku",
  "demonym": "Azerbaijani",
  "languages": {
    "aze": "Azerbaijani",
    "rus": "Russian"
  },
  "latlng": [
    40.5,
    47.5
  ],
  "nativeName": "Azərbaycan",
  "population": 9552500,
  "region": "Asia",
  "subregion": "Western Asia",
  "timezones": [
    "UTC+04:00"
  ],
  "tld": [
    ".az"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Azerbaijan",
      "common": "Aserbaijan"
    },
    "deu": {
      "official": "Republik Aserbaidschan",
      "common": "Aserbaidschan"
    },
    "fra": {
      "official": "République d'Azerbaïdjan",
      "common": "Azerbaïdjan"
    },
    "hrv": {
      "official": "Republika Azerbajdžan",
      "common": "Azerbajdžan"
    },
    "ita": {
      "official": "Repubblica dell'Azerbaigian",
      "common": "Azerbaijan"
    },
    "jpn": {
      "official": "アゼルバイジャン共和国",
      "common": "アゼルバイジャン"
    },
    "nld": {
      "official": "Republiek Azerbeidzjan",
      "common": "Azerbeidzjan"
    },
    "por": {
      "official": "República do Azerbaijão",
      "common": "Azerbeijão"
    },
    "rus": {
      "official": "Азербайджанская Республика",
      "common": "Азербайджан"
    },
    "spa": {
      "official": "República de Azerbaiyán",
      "common": "Azerbaiyán"
    },
    "fin": {
      "official": "Azerbaidzanin tasavalta",
      "common": "Azerbaidzan"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/azerbaijan",
  "currency": [
    "AZN"
  ],
  "callingCode": [
    "994"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "AZ",
    "ccn3": "031",
    "cca3": "AZE",
    "cioc": "AZE"
  }
}
},{}],17:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bahamas",
    "official": "Commonwealth of the Bahamas",
    "native": {
      "eng": {
        "official": "Commonwealth of the Bahamas",
        "common": "Bahamas"
      }
    }
  },
  "altSpellings": [
    "BS",
    "Commonwealth of the Bahamas"
  ],
  "area": 13943,
  "borders": [],
  "capital": "Nassau",
  "demonym": "Bahamian",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    24.25,
    -76
  ],
  "nativeName": "Bahamas",
  "population": 319031,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": [
    "UTC−05:00"
  ],
  "tld": [
    ".bs"
  ],
  "translations": {
    "cym": {
      "official": "Commonwealth of the Bahamas",
      "common": "Bahamas"
    },
    "deu": {
      "official": "Commonwealth der Bahamas",
      "common": "Bahamas"
    },
    "fra": {
      "official": "Commonwealth des Bahamas",
      "common": "Bahamas"
    },
    "hrv": {
      "official": "Zajednica Bahama",
      "common": "Bahami"
    },
    "ita": {
      "official": "Commonwealth delle Bahamas",
      "common": "Bahamas"
    },
    "jpn": {
      "official": "バハマ",
      "common": "バハマ"
    },
    "nld": {
      "official": "Gemenebest van de Bahama's",
      "common": "Bahama’s"
    },
    "por": {
      "official": "Comunidade das Bahamas",
      "common": "Bahamas"
    },
    "rus": {
      "official": "Содружество Багамских Островов",
      "common": "Багамские Острова"
    },
    "spa": {
      "official": "Commonwealth de las Bahamas",
      "common": "Bahamas"
    },
    "fin": {
      "official": "Bahaman liittovaltio",
      "common": "Bahamasaaret"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/bahamas",
  "currency": [
    "BSD"
  ],
  "callingCode": [
    "1242"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "BS",
    "ccn3": "044",
    "cca3": "BHS",
    "cioc": "BAH"
  }
}
},{}],18:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bahrain",
    "official": "Kingdom of Bahrain",
    "native": {
      "ara": {
        "official": "مملكة البحرين",
        "common": "‏البحرين"
      }
    }
  },
  "altSpellings": [
    "BH",
    "Kingdom of Bahrain",
    "Mamlakat al-Baḥrayn"
  ],
  "area": 765,
  "borders": [],
  "capital": "Manama",
  "demonym": "Bahraini",
  "languages": {
    "ara": "Arabic"
  },
  "latlng": [
    26,
    50.55
  ],
  "nativeName": "‏البحرين",
  "population": 1316500,
  "region": "Asia",
  "subregion": "Western Asia",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".bh"
  ],
  "translations": {
    "cym": {
      "official": "Kingdom of Bahrain",
      "common": "Bahrain"
    },
    "deu": {
      "official": "Königreich Bahrain",
      "common": "Bahrain"
    },
    "fra": {
      "official": "Royaume de Bahreïn",
      "common": "Bahreïn"
    },
    "hrv": {
      "official": "Kraljevina Bahrein",
      "common": "Bahrein"
    },
    "ita": {
      "official": "Regno del Bahrain",
      "common": "Bahrein"
    },
    "jpn": {
      "official": "バーレーン王国",
      "common": "バーレーン"
    },
    "nld": {
      "official": "Koninkrijk Bahrein",
      "common": "Bahrein"
    },
    "por": {
      "official": "Reino do Bahrein",
      "common": "Bahrein"
    },
    "rus": {
      "official": "Королевство Бахрейн",
      "common": "Бахрейн"
    },
    "spa": {
      "official": "Reino de Bahrein",
      "common": "Bahrein"
    },
    "fin": {
      "official": "Bahrainin kuningaskunta",
      "common": "Bahrain"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/bahrain",
  "currency": [
    "BHD"
  ],
  "callingCode": [
    "973"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "BH",
    "ccn3": "048",
    "cca3": "BHR",
    "cioc": "BRN"
  }
}
},{}],19:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bangladesh",
    "official": "People's Republic of Bangladesh",
    "native": {
      "ben": {
        "official": "বাংলাদেশ গণপ্রজাতন্ত্রী",
        "common": "বাংলাদেশ"
      }
    }
  },
  "altSpellings": [
    "BD",
    "People's Republic of Bangladesh",
    "Gônôprôjatôntri Bangladesh"
  ],
  "area": 147570,
  "borders": [
    "MMR",
    "IND"
  ],
  "capital": "Dhaka",
  "demonym": "Bangladeshi",
  "languages": {
    "ben": "Bengali"
  },
  "latlng": [
    24,
    90
  ],
  "nativeName": "Bangladesh",
  "population": 157486000,
  "region": "Asia",
  "subregion": "Southern Asia",
  "timezones": [
    "UTC+06:00"
  ],
  "tld": [
    ".bd"
  ],
  "translations": {
    "cym": {
      "official": "People's Republic of Bangladesh",
      "common": "Bangladesh"
    },
    "deu": {
      "official": "Volksrepublik Bangladesch",
      "common": "Bangladesch"
    },
    "fra": {
      "official": "La République populaire du Bangladesh",
      "common": "Bangladesh"
    },
    "hrv": {
      "official": "Narodna Republika Bangladeš",
      "common": "Bangladeš"
    },
    "ita": {
      "official": "Repubblica popolare del Bangladesh",
      "common": "Bangladesh"
    },
    "jpn": {
      "official": "バングラデシュ人民共和国",
      "common": "バングラデシュ"
    },
    "nld": {
      "official": "Volksrepubliek Bangladesh",
      "common": "Bangladesh"
    },
    "por": {
      "official": "República Popular do Bangladesh",
      "common": "Bangladesh"
    },
    "rus": {
      "official": "Народная Республика Бангладеш",
      "common": "Бангладеш"
    },
    "spa": {
      "official": "República Popular de Bangladesh",
      "common": "Bangladesh"
    },
    "fin": {
      "official": "Bangladeshin kansantasavalta",
      "common": "Bangladesh"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/bangladesh",
  "currency": [
    "BDT"
  ],
  "callingCode": [
    "880"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "BD",
    "ccn3": "050",
    "cca3": "BGD",
    "cioc": "BAN"
  }
}
},{}],20:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Barbados",
    "official": "Barbados",
    "native": {
      "eng": {
        "official": "Barbados",
        "common": "Barbados"
      }
    }
  },
  "altSpellings": [
    "BB"
  ],
  "area": 430,
  "borders": [],
  "capital": "Bridgetown",
  "demonym": "Barbadian",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    13.16666666,
    -59.53333333
  ],
  "nativeName": "Barbados",
  "population": 285000,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": [
    "UTC−04:00"
  ],
  "tld": [
    ".bb"
  ],
  "translations": {
    "cym": {
      "official": "Barbados",
      "common": "Barbados"
    },
    "deu": {
      "official": "Barbados",
      "common": "Barbados"
    },
    "fra": {
      "official": "Barbade",
      "common": "Barbade"
    },
    "hrv": {
      "official": "Barbados",
      "common": "Barbados"
    },
    "ita": {
      "official": "Barbados",
      "common": "Barbados"
    },
    "jpn": {
      "official": "バルバドス",
      "common": "バルバドス"
    },
    "nld": {
      "official": "Barbados",
      "common": "Barbados"
    },
    "por": {
      "official": "Barbados",
      "common": "Barbados"
    },
    "rus": {
      "official": "Барбадос",
      "common": "Барбадос"
    },
    "spa": {
      "official": "Barbados",
      "common": "Barbados"
    },
    "fin": {
      "official": "Barbados",
      "common": "Barbados"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/barbados",
  "currency": [
    "BBD"
  ],
  "callingCode": [
    "1246"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "BB",
    "ccn3": "052",
    "cca3": "BRB",
    "cioc": "BAR"
  }
}
},{}],21:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Belarus",
    "official": "Republic of Belarus",
    "native": {
      "bel": {
        "official": "Рэспубліка Беларусь",
        "common": "Белару́сь"
      },
      "rus": {
        "official": "Республика Беларусь",
        "common": "Белоруссия"
      }
    }
  },
  "altSpellings": [
    "BY",
    "Bielaruś",
    "Republic of Belarus",
    "Белоруссия",
    "Республика Беларусь",
    "Belorussiya",
    "Respublika Belarus’"
  ],
  "area": 207600,
  "borders": [
    "LVA",
    "LTU",
    "POL",
    "RUS",
    "UKR"
  ],
  "capital": "Minsk",
  "demonym": "Belarusian",
  "languages": {
    "bel": "Belarusian",
    "rus": "Russian"
  },
  "latlng": [
    53,
    28
  ],
  "nativeName": "Белару́сь",
  "population": 9475100,
  "region": "Europe",
  "subregion": "Eastern Europe",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".by"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Belarus",
      "common": "Belarws"
    },
    "deu": {
      "official": "Republik Belarus",
      "common": "Weißrussland"
    },
    "fra": {
      "official": "République de Biélorussie",
      "common": "Biélorussie"
    },
    "hrv": {
      "official": "Republika Bjelorusija",
      "common": "Bjelorusija"
    },
    "ita": {
      "official": "Repubblica di Belarus",
      "common": "Bielorussia"
    },
    "jpn": {
      "official": "ベラルーシ共和国",
      "common": "ベラルーシ"
    },
    "nld": {
      "official": "Republiek Belarus",
      "common": "Wit-Rusland"
    },
    "por": {
      "official": "República da Bielorrússia",
      "common": "Bielorússia"
    },
    "rus": {
      "official": "Республика Беларусь",
      "common": "Белоруссия"
    },
    "spa": {
      "official": "República de Belarús",
      "common": "Bielorrusia"
    },
    "fin": {
      "official": "Valko-Venäjän tasavalta",
      "common": "Valko-Venäjä"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/belarus",
  "currency": [
    "BYR"
  ],
  "callingCode": [
    "375"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "BY",
    "ccn3": "112",
    "cca3": "BLR",
    "cioc": "BLR"
  }
}
},{}],22:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Belgium",
    "official": "Kingdom of Belgium",
    "native": {
      "deu": {
        "official": "Königreich Belgien",
        "common": "Belgien"
      },
      "fra": {
        "official": "Royaume de Belgique",
        "common": "Belgique"
      },
      "nld": {
        "official": "Koninkrijk België",
        "common": "België"
      }
    }
  },
  "altSpellings": [
    "BE",
    "België",
    "Belgie",
    "Belgien",
    "Belgique",
    "Kingdom of Belgium",
    "Koninkrijk België",
    "Royaume de Belgique",
    "Königreich Belgien"
  ],
  "area": 30528,
  "borders": [
    "FRA",
    "DEU",
    "LUX",
    "NLD"
  ],
  "capital": "Brussels",
  "demonym": "Belgian",
  "languages": {
    "deu": "German",
    "fra": "French",
    "nld": "Dutch"
  },
  "latlng": [
    50.83333333,
    4
  ],
  "nativeName": "België",
  "population": 11225469,
  "region": "Europe",
  "subregion": "Western Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".be"
  ],
  "translations": {
    "cym": {
      "official": "Kingdom of Belgium",
      "common": "Gwlad Belg"
    },
    "deu": {
      "official": "Königreich Belgien",
      "common": "Belgien"
    },
    "fra": {
      "official": "Royaume de Belgique",
      "common": "Belgique"
    },
    "hrv": {
      "official": "Kraljevina Belgija",
      "common": "Belgija"
    },
    "ita": {
      "official": "Regno del Belgio",
      "common": "Belgio"
    },
    "jpn": {
      "official": "ベルギー王国",
      "common": "ベルギー"
    },
    "nld": {
      "official": "Koninkrijk België",
      "common": "België"
    },
    "por": {
      "official": "Reino da Bélgica",
      "common": "Bélgica"
    },
    "rus": {
      "official": "Королевство Бельгия",
      "common": "Бельгия"
    },
    "spa": {
      "official": "Reino de Bélgica",
      "common": "Bélgica"
    },
    "fin": {
      "official": "Belgian kuningaskunta",
      "common": "Belgia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/belgium",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "32"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "BE",
    "ccn3": "056",
    "cca3": "BEL",
    "cioc": "BEL"
  }
}
},{}],23:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Belize",
    "official": "Belize",
    "native": {
      "bjz": {
        "official": "Belize",
        "common": "Belize"
      },
      "eng": {
        "official": "Belize",
        "common": "Belize"
      },
      "spa": {
        "official": "Belice",
        "common": "Belice"
      }
    }
  },
  "altSpellings": [
    "BZ"
  ],
  "area": 22966,
  "borders": [
    "GTM",
    "MEX"
  ],
  "capital": "Belmopan",
  "demonym": "Belizean",
  "languages": {
    "bjz": "Belizean Creole",
    "eng": "English",
    "spa": "Spanish"
  },
  "latlng": [
    17.25,
    -88.75
  ],
  "nativeName": "Belize",
  "population": 349728,
  "region": "Americas",
  "subregion": "Central America",
  "timezones": [
    "UTC−06:00"
  ],
  "tld": [
    ".bz"
  ],
  "translations": {
    "cym": {
      "official": "Belize",
      "common": "Belize"
    },
    "deu": {
      "official": "Belize",
      "common": "Belize"
    },
    "fra": {
      "official": "Belize",
      "common": "Belize"
    },
    "hrv": {
      "official": "Belize",
      "common": "Belize"
    },
    "ita": {
      "official": "Belize",
      "common": "Belize"
    },
    "jpn": {
      "official": "ベリーズ",
      "common": "ベリーズ"
    },
    "nld": {
      "official": "Belize",
      "common": "Belize"
    },
    "por": {
      "official": "Belize",
      "common": "Belize"
    },
    "rus": {
      "official": "Белиз",
      "common": "Белиз"
    },
    "spa": {
      "official": "Belice",
      "common": "Belice"
    },
    "fin": {
      "official": "Belize",
      "common": "Belize"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/belize",
  "currency": [
    "BZD"
  ],
  "callingCode": [
    "501"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "BZ",
    "ccn3": "084",
    "cca3": "BLZ",
    "cioc": "BIZ"
  }
}
},{}],24:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Benin",
    "official": "Republic of Benin",
    "native": {
      "fra": {
        "official": "République du Bénin",
        "common": "Bénin"
      }
    }
  },
  "altSpellings": [
    "BJ",
    "Republic of Benin",
    "République du Bénin"
  ],
  "area": 112622,
  "borders": [
    "BFA",
    "NER",
    "NGA",
    "TGO"
  ],
  "capital": "Porto-Novo",
  "demonym": "Beninese",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    9.5,
    2.25
  ],
  "nativeName": "Bénin",
  "population": 9988068,
  "region": "Africa",
  "subregion": "Western Africa",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".bj"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Benin",
      "common": "Benin"
    },
    "deu": {
      "official": "Republik Benin",
      "common": "Benin"
    },
    "fra": {
      "official": "République du Bénin",
      "common": "Bénin"
    },
    "hrv": {
      "official": "Republika Benin",
      "common": "Benin"
    },
    "ita": {
      "official": "Repubblica del Benin",
      "common": "Benin"
    },
    "jpn": {
      "official": "ベナン共和国",
      "common": "ベナン"
    },
    "nld": {
      "official": "Republiek Benin",
      "common": "Benin"
    },
    "por": {
      "official": "República do Benin",
      "common": "Benin"
    },
    "rus": {
      "official": "Республика Бенин",
      "common": "Бенин"
    },
    "spa": {
      "official": "República de Benin",
      "common": "Benín"
    },
    "fin": {
      "official": "Beninin tasavalta",
      "common": "Benin"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/benin",
  "currency": [
    "XOF"
  ],
  "callingCode": [
    "229"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "BJ",
    "ccn3": "204",
    "cca3": "BEN",
    "cioc": "BEN"
  }
}
},{}],25:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bermuda",
    "official": "Bermuda",
    "native": {
      "eng": {
        "official": "Bermuda",
        "common": "Bermuda"
      }
    }
  },
  "altSpellings": [
    "BM",
    "The Islands of Bermuda",
    "The Bermudas",
    "Somers Isles"
  ],
  "area": 54,
  "borders": [],
  "capital": "Hamilton",
  "demonym": "Bermudian",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    32.33333333,
    -64.75
  ],
  "nativeName": "Bermuda",
  "population": 64237,
  "region": "Americas",
  "subregion": "Northern America",
  "timezones": null,
  "tld": [
    ".bm"
  ],
  "translations": {
    "cym": {
      "official": "Bermuda",
      "common": "Bermiwda"
    },
    "deu": {
      "official": "Bermuda",
      "common": "Bermuda"
    },
    "fra": {
      "official": "Bermudes",
      "common": "Bermudes"
    },
    "hrv": {
      "official": "Bermuda",
      "common": "Bermudi"
    },
    "ita": {
      "official": "Bermuda",
      "common": "Bermuda"
    },
    "jpn": {
      "official": "バミューダ",
      "common": "バミューダ"
    },
    "nld": {
      "official": "Bermuda",
      "common": "Bermuda"
    },
    "por": {
      "official": "Bermudas",
      "common": "Bermudas"
    },
    "rus": {
      "official": "Бермудские острова",
      "common": "Бермудские Острова"
    },
    "spa": {
      "official": "Bermuda",
      "common": "Bermudas"
    },
    "fin": {
      "official": "Bermuda",
      "common": "Bermuda"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/bermuda",
  "currency": [
    "BMD"
  ],
  "callingCode": [
    "1441"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "BM",
    "ccn3": "060",
    "cca3": "BMU",
    "cioc": "BER"
  }
}
},{}],26:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bhutan",
    "official": "Kingdom of Bhutan",
    "native": {
      "dzo": {
        "official": "འབྲུག་རྒྱལ་ཁབ་",
        "common": "འབྲུག་ཡུལ་"
      }
    }
  },
  "altSpellings": [
    "BT",
    "Kingdom of Bhutan"
  ],
  "area": 38394,
  "borders": [
    "CHN",
    "IND"
  ],
  "capital": "Thimphu",
  "demonym": "Bhutanese",
  "languages": {
    "dzo": "Dzongkha"
  },
  "latlng": [
    27.5,
    90.5
  ],
  "nativeName": "ʼbrug-yul",
  "population": 755030,
  "region": "Asia",
  "subregion": "Southern Asia",
  "timezones": [
    "UTC+06:00"
  ],
  "tld": [
    ".bt"
  ],
  "translations": {
    "cym": {
      "official": "Kingdom of Bhutan",
      "common": "Bhwtan"
    },
    "deu": {
      "official": "Königreich Bhutan",
      "common": "Bhutan"
    },
    "fra": {
      "official": "Royaume du Bhoutan",
      "common": "Bhoutan"
    },
    "hrv": {
      "official": "Kraljevina Butan",
      "common": "Butan"
    },
    "ita": {
      "official": "Regno del Bhutan",
      "common": "Bhutan"
    },
    "jpn": {
      "official": "ブータン王国",
      "common": "ブータン"
    },
    "nld": {
      "official": "Koninkrijk Bhutan",
      "common": "Bhutan"
    },
    "por": {
      "official": "Reino do Butão",
      "common": "Butão"
    },
    "rus": {
      "official": "Королевство Бутан",
      "common": "Бутан"
    },
    "spa": {
      "official": "Reino de Bután",
      "common": "Bután"
    },
    "fin": {
      "official": "Bhutanin kuningaskunta",
      "common": "Bhutan"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/bhutan",
  "currency": [
    "BTN",
    "INR"
  ],
  "callingCode": [
    "975"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "BT",
    "ccn3": "064",
    "cca3": "BTN",
    "cioc": "BHU"
  }
}
},{}],27:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bolivia",
    "official": "Plurinational State of Bolivia",
    "native": {
      "aym": {
        "official": "Wuliwya Suyu",
        "common": "Wuliwya"
      },
      "grn": {
        "official": "Tetã Volívia",
        "common": "Volívia"
      },
      "que": {
        "official": "Buliwya Mamallaqta",
        "common": "Buliwya"
      },
      "spa": {
        "official": "Estado Plurinacional de Bolivia",
        "common": "Bolivia"
      }
    }
  },
  "altSpellings": [
    "BO",
    "Buliwya",
    "Wuliwya",
    "Bolivia, Plurinational State of",
    "Plurinational State of Bolivia",
    "Estado Plurinacional de Bolivia",
    "Buliwya Mamallaqta",
    "Wuliwya Suyu",
    "Tetã Volívia"
  ],
  "area": 1098581,
  "borders": [
    "ARG",
    "BRA",
    "CHL",
    "PRY",
    "PER"
  ],
  "capital": "Sucre",
  "demonym": "Bolivian",
  "languages": {
    "aym": "Aymara",
    "grn": "Guaraní",
    "que": "Quechua",
    "spa": "Spanish"
  },
  "latlng": [
    -17,
    -65
  ],
  "nativeName": "Bolivia",
  "population": 10027254,
  "region": "Americas",
  "subregion": "South America",
  "timezones": [
    "UTC−04:00"
  ],
  "tld": [
    ".bo"
  ],
  "translations": {
    "cym": {
      "official": "Plurinational State of Bolivia",
      "common": "Bolifia"
    },
    "deu": {
      "official": "Multinationaler Staat von Bolivien",
      "common": "Bolivien"
    },
    "fra": {
      "official": "État plurinational de Bolivie",
      "common": "Bolivie"
    },
    "hrv": {
      "official": "Plurinational State of Bolivia",
      "common": "Bolivija"
    },
    "ita": {
      "official": "Stato Plurinazionale della Bolivia",
      "common": "Bolivia"
    },
    "jpn": {
      "official": "ボリビアの多民族国",
      "common": "ボリビア多民族国"
    },
    "nld": {
      "official": "Plurinationale Staat van Bolivia",
      "common": "Bolivia"
    },
    "por": {
      "official": "Estado Plurinacional da Bolívia",
      "common": "Bolívia"
    },
    "rus": {
      "official": "Многонациональное Государство Боливия",
      "common": "Боливия"
    },
    "spa": {
      "official": "Estado Plurinacional de Bolivia",
      "common": "Bolivia"
    },
    "fin": {
      "official": "Bolivian monikansainen valtio",
      "common": "Bolivia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/bolivia",
  "currency": [
    "BOB",
    "BOV"
  ],
  "callingCode": [
    "591"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "BO",
    "ccn3": "068",
    "cca3": "BOL",
    "cioc": "BOL"
  }
}
},{}],28:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bosnia and Herzegovina",
    "official": "Bosnia and Herzegovina",
    "native": {
      "bos": {
        "official": "Bosna i Hercegovina",
        "common": "Bosna i Hercegovina"
      },
      "hrv": {
        "official": "Bosna i Hercegovina",
        "common": "Bosna i Hercegovina"
      },
      "srp": {
        "official": "Боснa и Херцеговина",
        "common": "Боснa и Херцеговина"
      }
    }
  },
  "altSpellings": [
    "BA",
    "Bosnia-Herzegovina",
    "Босна и Херцеговина"
  ],
  "area": 51209,
  "borders": [
    "HRV",
    "MNE",
    "SRB"
  ],
  "capital": "Sarajevo",
  "demonym": "Bosnian, Herzegovinian",
  "languages": {
    "bos": "Bosnian",
    "hrv": "Croatian",
    "srp": "Serbian"
  },
  "latlng": [
    44,
    18
  ],
  "nativeName": "Bosna i Hercegovina",
  "population": 3791622,
  "region": "Europe",
  "subregion": "Southern Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".ba"
  ],
  "translations": {
    "cym": {
      "official": "Bosnia and Herzegovina",
      "common": "Bosnia a Hercegovina"
    },
    "deu": {
      "official": "Bosnien und Herzegowina",
      "common": "Bosnien und Herzegowina"
    },
    "fra": {
      "official": "Bosnie-et-Herzégovine",
      "common": "Bosnie-Herzégovine"
    },
    "hrv": {
      "official": "Bosna i Hercegovina",
      "common": "Bosna i Hercegovina"
    },
    "ita": {
      "official": "Bosnia-Erzegovina",
      "common": "Bosnia ed Erzegovina"
    },
    "jpn": {
      "official": "ボスニア·ヘルツェゴビナ",
      "common": "ボスニア・ヘルツェゴビナ"
    },
    "nld": {
      "official": "Bosnië-Herzegovina",
      "common": "Bosnië en Herzegovina"
    },
    "por": {
      "official": "Bósnia e Herzegovina",
      "common": "Bósnia e Herzegovina"
    },
    "rus": {
      "official": "Босния и Герцеговина",
      "common": "Босния и Герцеговина"
    },
    "spa": {
      "official": "Bosnia y Herzegovina",
      "common": "Bosnia y Herzegovina"
    },
    "fin": {
      "official": "Bosnia ja Hertsegovina",
      "common": "Bosnia ja Hertsegovina"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/bosnia_and_herzegovina",
  "currency": [
    "BAM"
  ],
  "callingCode": [
    "387"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "BA",
    "ccn3": "070",
    "cca3": "BIH",
    "cioc": "BIH"
  }
}
},{}],29:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Botswana",
    "official": "Republic of Botswana",
    "native": {
      "eng": {
        "official": "Republic of Botswana",
        "common": "Botswana"
      },
      "tsn": {
        "official": "Lefatshe la Botswana",
        "common": "Botswana"
      }
    }
  },
  "altSpellings": [
    "BW",
    "Republic of Botswana",
    "Lefatshe la Botswana"
  ],
  "area": 582000,
  "borders": [
    "NAM",
    "ZAF",
    "ZMB",
    "ZWE"
  ],
  "capital": "Gaborone",
  "demonym": "Motswana",
  "languages": {
    "eng": "English",
    "tsn": "Tswana"
  },
  "latlng": [
    -22,
    24
  ],
  "nativeName": "Botswana",
  "population": 2024904,
  "region": "Africa",
  "subregion": "Southern Africa",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".bw"
  ],
  "translations": {
    "deu": {
      "official": "Republik Botsuana",
      "common": "Botswana"
    },
    "fra": {
      "official": "République du Botswana",
      "common": "Botswana"
    },
    "hrv": {
      "official": "Republika Bocvana",
      "common": "Bocvana"
    },
    "ita": {
      "official": "Repubblica del Botswana",
      "common": "Botswana"
    },
    "jpn": {
      "official": "ボツワナ共和国",
      "common": "ボツワナ"
    },
    "nld": {
      "official": "Republiek Botswana",
      "common": "Botswana"
    },
    "por": {
      "official": "República do Botswana",
      "common": "Botswana"
    },
    "rus": {
      "official": "Республика Ботсвана",
      "common": "Ботсвана"
    },
    "spa": {
      "official": "República de Botswana",
      "common": "Botswana"
    },
    "fin": {
      "official": "Botswanan tasavalta",
      "common": "Botswana"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/botswana",
  "currency": [
    "BWP"
  ],
  "callingCode": [
    "267"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "BW",
    "ccn3": "072",
    "cca3": "BWA",
    "cioc": "BOT"
  }
}
},{}],30:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bouvet Island",
    "official": "Bouvet Island",
    "native": {
      "nor": {
        "official": "Bouvetøya",
        "common": "Bouvetøya"
      }
    }
  },
  "tld": [
    ".bv"
  ],
  "currency": [
    "NOK"
  ],
  "callingCode": [],
  "capital": "",
  "altSpellings": [
    "BV",
    "Bouvetøya",
    "Bouvet-øya"
  ],
  "region": "",
  "subregion": "",
  "languages": {
    "nor": "Norwegian"
  },
  "translations": {
    "deu": {
      "official": "Bouvet-Insel",
      "common": "Bouvetinsel"
    },
    "fra": {
      "official": "Île Bouvet",
      "common": "Île Bouvet"
    },
    "hrv": {
      "official": "Bouvet Island",
      "common": "Otok Bouvet"
    },
    "ita": {
      "official": "Isola Bouvet",
      "common": "Isola Bouvet"
    },
    "jpn": {
      "official": "ブーヴェ島",
      "common": "ブーベ島"
    },
    "nld": {
      "official": "Bouvet Island",
      "common": "Bouveteiland"
    },
    "por": {
      "official": "Ilha Bouvet",
      "common": "Ilha Bouvet"
    },
    "rus": {
      "official": "Остров Буве",
      "common": "Остров Буве"
    },
    "spa": {
      "official": "Isla Bouvet",
      "common": "Isla Bouvet"
    },
    "fin": {
      "official": "Bouvet'nsaari",
      "common": "Bouvet'nsaari"
    }
  },
  "latlng": [
    -54.43333333,
    3.4
  ],
  "demonym": "",
  "landlocked": false,
  "borders": [],
  "area": 49,
  "codes": {
    "cca2": "BV",
    "ccn3": "074",
    "cca3": "BVT",
    "cioc": ""
  }
}
},{}],31:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Brazil",
    "official": "Federative Republic of Brazil",
    "native": {
      "por": {
        "official": "República Federativa do Brasil",
        "common": "Brasil"
      }
    }
  },
  "altSpellings": [
    "BR",
    "Brasil",
    "Federative Republic of Brazil",
    "República Federativa do Brasil"
  ],
  "area": 8515767,
  "borders": [
    "ARG",
    "BOL",
    "COL",
    "GUF",
    "GUY",
    "PRY",
    "PER",
    "SUR",
    "URY",
    "VEN"
  ],
  "capital": "Brasília",
  "demonym": "Brazilian",
  "languages": {
    "por": "Portuguese"
  },
  "latlng": [
    -10,
    -55
  ],
  "nativeName": "Brasil",
  "population": 203586000,
  "region": "Americas",
  "subregion": "South America",
  "timezones": [
    "UTC−05:00",
    "UTC−04:00",
    "UTC−03:00",
    "UTC−02:00"
  ],
  "tld": [
    ".br"
  ],
  "translations": {
    "cym": {
      "official": "Federative Republic of Brazil",
      "common": "Brasil"
    },
    "deu": {
      "official": "Föderative Republik Brasilien",
      "common": "Brasilien"
    },
    "fra": {
      "official": "République fédérative du Brésil",
      "common": "Brésil"
    },
    "hrv": {
      "official": "Savezne Republike Brazil",
      "common": "Brazil"
    },
    "ita": {
      "official": "Repubblica federativa del Brasile",
      "common": "Brasile"
    },
    "jpn": {
      "official": "ブラジル連邦共和国",
      "common": "ブラジル"
    },
    "nld": {
      "official": "Federale Republiek Brazilië",
      "common": "Brazilië"
    },
    "por": {
      "official": "República Federativa do Brasil",
      "common": "Brasil"
    },
    "rus": {
      "official": "Федеративная Республика Бразилия",
      "common": "Бразилия"
    },
    "spa": {
      "official": "República Federativa del Brasil",
      "common": "Brasil"
    },
    "fin": {
      "official": "Brasilian liittotasavalta",
      "common": "Brasilia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/brazil",
  "currency": [
    "BRL"
  ],
  "callingCode": [
    "55"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "BR",
    "ccn3": "076",
    "cca3": "BRA",
    "cioc": "BRA"
  }
}
},{}],32:[function(require,module,exports){
module.exports={
  "name": {
    "common": "British Indian Ocean Territory",
    "official": "British Indian Ocean Territory",
    "native": {
      "eng": {
        "official": "British Indian Ocean Territory",
        "common": "British Indian Ocean Territory"
      }
    }
  },
  "tld": [
    ".io"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "246"
  ],
  "capital": "Diego Garcia",
  "altSpellings": [
    "IO"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "cym": {
      "official": "British Indian Ocean Territory",
      "common": "Tiriogaeth Brydeinig Cefnfor India"
    },
    "deu": {
      "official": "Britisch-Indischer Ozean",
      "common": "Britisches Territorium im Indischen Ozean"
    },
    "fra": {
      "official": "Territoire britannique de l' océan Indien",
      "common": "Territoire britannique de l'océan Indien"
    },
    "hrv": {
      "official": "British Indian Ocean Territory",
      "common": "Britanski Indijskooceanski teritorij"
    },
    "ita": {
      "official": "Territorio britannico dell'Oceano Indiano",
      "common": "Territorio britannico dell'oceano indiano"
    },
    "jpn": {
      "official": "イギリス領インド洋地域",
      "common": "イギリス領インド洋地域"
    },
    "nld": {
      "official": "Brits Indische Oceaan Territorium",
      "common": "Britse Gebieden in de Indische Oceaan"
    },
    "por": {
      "official": "British Indian Ocean Territory",
      "common": "Território Britânico do Oceano Índico"
    },
    "rus": {
      "official": "Британская территория Индийского океана",
      "common": "Британская территория в Индийском океане"
    },
    "spa": {
      "official": "Territorio Británico del Océano Índico",
      "common": "Territorio Británico del Océano Índico"
    },
    "fin": {
      "official": "Brittiläinen Intian valtameren alue",
      "common": "Brittiläinen Intian valtameren alue"
    }
  },
  "latlng": [
    -6,
    71.5
  ],
  "demonym": "Indian",
  "landlocked": false,
  "borders": [],
  "area": 60,
  "codes": {
    "cca2": "IO",
    "ccn3": "086",
    "cca3": "IOT",
    "cioc": ""
  }
}
},{}],33:[function(require,module,exports){
module.exports={
  "name": {
    "common": "British Virgin Islands",
    "official": "Virgin Islands",
    "native": {
      "eng": {
        "official": "Virgin Islands",
        "common": "British Virgin Islands"
      }
    }
  },
  "altSpellings": [
    "VG",
    "Virgin Islands, British"
  ],
  "area": 151,
  "borders": [],
  "capital": "Road Town",
  "demonym": "Virgin Islander",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    18.431383,
    -64.62305
  ],
  "nativeName": "British Indian Ocean Territory",
  "population": 3000,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": null,
  "tld": [
    ".vg"
  ],
  "translations": {
    "deu": {
      "official": "Jungferninseln",
      "common": "Britische Jungferninseln"
    },
    "fra": {
      "official": "îles Vierges",
      "common": "Îles Vierges britanniques"
    },
    "hrv": {
      "official": "Djevičanski Otoci",
      "common": "Britanski Djevičanski Otoci"
    },
    "ita": {
      "official": "Isole Vergini",
      "common": "Isole Vergini Britanniche"
    },
    "jpn": {
      "official": "バージン諸島",
      "common": "イギリス領ヴァージン諸島"
    },
    "nld": {
      "official": "Maagdeneilanden",
      "common": "Britse Maagdeneilanden"
    },
    "por": {
      "official": "Ilhas Virgens",
      "common": "Ilhas Virgens"
    },
    "rus": {
      "official": "Виргинские острова",
      "common": "Британские Виргинские острова"
    },
    "spa": {
      "official": "Islas Vírgenes",
      "common": "Islas Vírgenes del Reino Unido"
    },
    "fin": {
      "official": "Brittiläiset Neitsytsaaret",
      "common": "Neitsytsaaret"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/british_virgin_islands",
  "currency": [
    "USD"
  ],
  "callingCode": [
    "1284"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "VG",
    "ccn3": "092",
    "cca3": "VGB",
    "cioc": "IVB"
  }
}
},{}],34:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Brunei",
    "official": "Nation of Brunei, Abode of Peace",
    "native": {
      "msa": {
        "official": "Nation of Brunei, Abode Damai",
        "common": "Negara Brunei Darussalam"
      }
    }
  },
  "altSpellings": [
    "BN",
    "Brunei Darussalam",
    "Nation of Brunei",
    "the Abode of Peace"
  ],
  "area": 5765,
  "borders": [
    "MYS"
  ],
  "capital": "Bandar Seri Begawan",
  "demonym": "Bruneian",
  "languages": {
    "msa": "Malay"
  },
  "latlng": [
    4.5,
    114.66666666
  ],
  "nativeName": "Negara Brunei Darussalam",
  "population": 393372,
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "timezones": [
    "UTC+08:00"
  ],
  "tld": [
    ".bn"
  ],
  "translations": {
    "cym": {
      "official": "Nation of Brunei, Abode of Peace",
      "common": "Brunei"
    },
    "deu": {
      "official": "Nation von Brunei, Wohnung des Friedens",
      "common": "Brunei"
    },
    "fra": {
      "official": "État de Brunei Darussalam",
      "common": "Brunei"
    },
    "hrv": {
      "official": "Nacija od Bruneja, Kuću Mira",
      "common": "Brunej"
    },
    "ita": {
      "official": "Nazione di Brunei, Dimora della Pace",
      "common": "Brunei"
    },
    "jpn": {
      "official": "ブルネイ、平和の精舎の国家",
      "common": "ブルネイ・ダルサラーム"
    },
    "nld": {
      "official": "Natie van Brunei, de verblijfplaats van de Vrede",
      "common": "Brunei"
    },
    "por": {
      "official": "Nação do Brunei, Morada da Paz",
      "common": "Brunei"
    },
    "rus": {
      "official": "Нация Бруней, обитель мира",
      "common": "Бруней"
    },
    "spa": {
      "official": "Nación de Brunei, Morada de la Paz",
      "common": "Brunei"
    },
    "fin": {
      "official": "Brunei Darussalamin valtio",
      "common": "Brunei"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/brunei",
  "currency": [
    "BND"
  ],
  "callingCode": [
    "673"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "BN",
    "ccn3": "096",
    "cca3": "BRN",
    "cioc": "BRU"
  }
}
},{}],35:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Bulgaria",
    "official": "Republic of Bulgaria",
    "native": {
      "bul": {
        "official": "Република България",
        "common": "България"
      }
    }
  },
  "altSpellings": [
    "BG",
    "Republic of Bulgaria",
    "Република България"
  ],
  "area": 110879,
  "borders": [
    "GRC",
    "MKD",
    "ROU",
    "SRB",
    "TUR"
  ],
  "capital": "Sofia",
  "demonym": "Bulgarian",
  "languages": {
    "bul": "Bulgarian"
  },
  "latlng": [
    43,
    25
  ],
  "nativeName": "България",
  "population": 7245677,
  "region": "Europe",
  "subregion": "Eastern Europe",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".bg"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Bulgaria",
      "common": "Bwlgaria"
    },
    "deu": {
      "official": "Republik Bulgarien",
      "common": "Bulgarien"
    },
    "fra": {
      "official": "République de Bulgarie",
      "common": "Bulgarie"
    },
    "hrv": {
      "official": "Republika Bugarska",
      "common": "Bugarska"
    },
    "ita": {
      "official": "Repubblica di Bulgaria",
      "common": "Bulgaria"
    },
    "jpn": {
      "official": "ブルガリア共和国",
      "common": "ブルガリア"
    },
    "nld": {
      "official": "Republiek Bulgarije",
      "common": "Bulgarije"
    },
    "por": {
      "official": "República da Bulgária",
      "common": "Bulgária"
    },
    "rus": {
      "official": "Республика Болгария",
      "common": "Болгария"
    },
    "spa": {
      "official": "República de Bulgaria",
      "common": "Bulgaria"
    },
    "fin": {
      "official": "Bulgarian tasavalta",
      "common": "Bulgaria"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/bulgaria",
  "currency": [
    "BGN"
  ],
  "callingCode": [
    "359"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "BG",
    "ccn3": "100",
    "cca3": "BGR",
    "cioc": "BUL"
  }
}
},{}],36:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Burkina Faso",
    "official": "Burkina Faso",
    "native": {
      "fra": {
        "official": "République du Burkina",
        "common": "Burkina Faso"
      }
    }
  },
  "altSpellings": [
    "BF"
  ],
  "area": 272967,
  "borders": [
    "BEN",
    "CIV",
    "GHA",
    "MLI",
    "NER",
    "TGO"
  ],
  "capital": "Ouagadougou",
  "demonym": "Burkinabe",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    13,
    -2
  ],
  "nativeName": "Burkina Faso",
  "population": 17322796,
  "region": "Africa",
  "subregion": "Western Africa",
  "timezones": [
    "UTC"
  ],
  "tld": [
    ".bf"
  ],
  "translations": {
    "cym": {
      "official": "Burkina Faso",
      "common": "Burkina Faso"
    },
    "deu": {
      "official": "Burkina Faso",
      "common": "Burkina Faso"
    },
    "fra": {
      "official": "République du Burkina",
      "common": "Burkina Faso"
    },
    "hrv": {
      "official": "Burkina Faso",
      "common": "Burkina Faso"
    },
    "ita": {
      "official": "Burkina Faso",
      "common": "Burkina Faso"
    },
    "jpn": {
      "official": "ブルキナファソ",
      "common": "ブルキナファソ"
    },
    "nld": {
      "official": "Burkina Faso",
      "common": "Burkina Faso"
    },
    "por": {
      "official": "Burkina Faso",
      "common": "Burkina Faso"
    },
    "rus": {
      "official": "Буркина -Фасо",
      "common": "Буркина-Фасо"
    },
    "spa": {
      "official": "Burkina Faso",
      "common": "Burkina Faso"
    },
    "fin": {
      "official": "Burkina Faso",
      "common": "Burkina Faso"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/burkina_faso",
  "currency": [
    "XOF"
  ],
  "callingCode": [
    "226"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "BF",
    "ccn3": "854",
    "cca3": "BFA",
    "cioc": "BUR"
  }
}
},{}],37:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Burundi",
    "official": "Republic of Burundi",
    "native": {
      "fra": {
        "official": "République du Burundi",
        "common": "Burundi"
      },
      "run": {
        "official": "Republika y'Uburundi ",
        "common": "Uburundi"
      }
    }
  },
  "altSpellings": [
    "BI",
    "Republic of Burundi",
    "Republika y'Uburundi",
    "République du Burundi"
  ],
  "area": 27834,
  "borders": [
    "COD",
    "RWA",
    "TZA"
  ],
  "capital": "Bujumbura",
  "demonym": "Burundian",
  "languages": {
    "fra": "French",
    "run": "Kirundi"
  },
  "latlng": [
    -3.5,
    30
  ],
  "nativeName": "Burundi",
  "population": 9530434,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".bi"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Burundi",
      "common": "Bwrwndi"
    },
    "deu": {
      "official": "Republik Burundi",
      "common": "Burundi"
    },
    "fra": {
      "official": "République du Burundi",
      "common": "Burundi"
    },
    "hrv": {
      "official": "Burundi",
      "common": "Burundi"
    },
    "ita": {
      "official": "Repubblica del Burundi",
      "common": "Burundi"
    },
    "jpn": {
      "official": "ブルンジ共和国",
      "common": "ブルンジ"
    },
    "nld": {
      "official": "Republiek Burundi",
      "common": "Burundi"
    },
    "por": {
      "official": "República do Burundi",
      "common": "Burundi"
    },
    "rus": {
      "official": "Республика Бурунди",
      "common": "Бурунди"
    },
    "spa": {
      "official": "República de Burundi",
      "common": "Burundi"
    },
    "fin": {
      "official": "Burundin tasavalta",
      "common": "Burundi"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/burundi",
  "currency": [
    "BIF"
  ],
  "callingCode": [
    "257"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "BI",
    "ccn3": "108",
    "cca3": "BDI",
    "cioc": "BDI"
  }
}
},{}],38:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Cambodia",
    "official": "Kingdom of Cambodia",
    "native": {
      "khm": {
        "official": "ព្រះរាជាណាចក្រកម្ពុជា",
        "common": "Kâmpŭchéa"
      }
    }
  },
  "altSpellings": [
    "KH",
    "Kingdom of Cambodia"
  ],
  "area": 181035,
  "borders": [
    "LAO",
    "THA",
    "VNM"
  ],
  "capital": "Phnom Penh",
  "demonym": "Cambodian",
  "languages": {
    "khm": "Khmer"
  },
  "latlng": [
    13,
    105
  ],
  "nativeName": "Kâmpŭchéa",
  "population": 15184116,
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "timezones": [
    "UTC+07:00"
  ],
  "tld": [
    ".kh"
  ],
  "translations": {
    "cym": {
      "official": "Kingdom of Cambodia",
      "common": "Cambodia"
    },
    "deu": {
      "official": "Königreich Kambodscha",
      "common": "Kambodscha"
    },
    "fra": {
      "official": "Royaume du Cambodge",
      "common": "Cambodge"
    },
    "hrv": {
      "official": "Kraljevina Kambodža",
      "common": "Kambodža"
    },
    "ita": {
      "official": "Regno di Cambogia",
      "common": "Cambogia"
    },
    "jpn": {
      "official": "カンボジア王国",
      "common": "カンボジア"
    },
    "nld": {
      "official": "Koninkrijk Cambodja",
      "common": "Cambodja"
    },
    "por": {
      "official": "Reino do Camboja",
      "common": "Camboja"
    },
    "rus": {
      "official": "Королевство Камбоджа",
      "common": "Камбоджа"
    },
    "spa": {
      "official": "Reino de Camboya",
      "common": "Camboya"
    },
    "fin": {
      "official": "Kambodžan kuningaskunta",
      "common": "Kambodža"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/cambodia",
  "currency": [
    "KHR"
  ],
  "callingCode": [
    "855"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "KH",
    "ccn3": "116",
    "cca3": "KHM",
    "cioc": "CAM"
  }
}
},{}],39:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Cameroon",
    "official": "Republic of Cameroon",
    "native": {
      "eng": {
        "official": "Republic of Cameroon",
        "common": "Cameroon"
      },
      "fra": {
        "official": "République du Cameroun",
        "common": "Cameroun"
      }
    }
  },
  "altSpellings": [
    "CM",
    "Republic of Cameroon",
    "République du Cameroun"
  ],
  "area": 475442,
  "borders": [
    "CAF",
    "TCD",
    "COG",
    "GNQ",
    "GAB",
    "NGA"
  ],
  "capital": "Yaoundé",
  "demonym": "Cameroonian",
  "languages": {
    "eng": "English",
    "fra": "French"
  },
  "latlng": [
    6,
    12
  ],
  "nativeName": "Cameroon",
  "population": 20386799,
  "region": "Africa",
  "subregion": "Middle Africa",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".cm"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Cameroon",
      "common": "Camerŵn"
    },
    "deu": {
      "official": "Republik Kamerun",
      "common": "Kamerun"
    },
    "fra": {
      "official": "République du Cameroun",
      "common": "Cameroun"
    },
    "hrv": {
      "official": "Republika Kamerun",
      "common": "Kamerun"
    },
    "ita": {
      "official": "Repubblica del Camerun",
      "common": "Camerun"
    },
    "jpn": {
      "official": "カメルーン共和国",
      "common": "カメルーン"
    },
    "nld": {
      "official": "Republiek Kameroen",
      "common": "Kameroen"
    },
    "por": {
      "official": "República dos Camarões",
      "common": "Camarões"
    },
    "rus": {
      "official": "Республика Камерун",
      "common": "Камерун"
    },
    "spa": {
      "official": "República de Camerún",
      "common": "Camerún"
    },
    "fin": {
      "official": "Kamerunin tasavalta",
      "common": "Kamerun"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/cameroon",
  "currency": [
    "XAF"
  ],
  "callingCode": [
    "237"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "CM",
    "ccn3": "120",
    "cca3": "CMR",
    "cioc": "CMR"
  }
}
},{}],40:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Canada",
    "official": "Canada",
    "native": {
      "eng": {
        "official": "Canada",
        "common": "Canada"
      },
      "fra": {
        "official": "Canada",
        "common": "Canada"
      }
    }
  },
  "altSpellings": [
    "CA"
  ],
  "area": 9984670,
  "borders": [
    "USA"
  ],
  "capital": "Ottawa",
  "demonym": "Canadian",
  "languages": {
    "eng": "English",
    "fra": "French"
  },
  "latlng": [
    60,
    -95
  ],
  "nativeName": "Canada",
  "population": 35540419,
  "region": "Americas",
  "subregion": "Northern America",
  "timezones": [
    "UTC−08:00",
    "UTC−07:00",
    "UTC−06:00",
    "UTC−05:00",
    "UTC−04:00",
    "UTC−03:30"
  ],
  "tld": [
    ".ca"
  ],
  "translations": {
    "cym": {
      "official": "Canada",
      "common": "Canada"
    },
    "deu": {
      "official": "Kanada",
      "common": "Kanada"
    },
    "fra": {
      "official": "Canada",
      "common": "Canada"
    },
    "hrv": {
      "official": "Kanada",
      "common": "Kanada"
    },
    "ita": {
      "official": "Canada",
      "common": "Canada"
    },
    "jpn": {
      "official": "カナダ",
      "common": "カナダ"
    },
    "nld": {
      "official": "Canada",
      "common": "Canada"
    },
    "por": {
      "official": "Canadá",
      "common": "Canadá"
    },
    "rus": {
      "official": "Канада",
      "common": "Канада"
    },
    "spa": {
      "official": "Canadá",
      "common": "Canadá"
    },
    "fin": {
      "official": "Kanada",
      "common": "Kanada"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/canada",
  "currency": [
    "CAD"
  ],
  "callingCode": [
    "1"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "CA",
    "ccn3": "124",
    "cca3": "CAN",
    "cioc": "CAN"
  }
}
},{}],41:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Cape Verde",
    "official": "Republic of Cabo Verde",
    "native": {
      "por": {
        "official": "República de Cabo Verde",
        "common": "Cabo Verde"
      }
    }
  },
  "altSpellings": [
    "CV",
    "Republic of Cabo Verde",
    "República de Cabo Verde"
  ],
  "area": 4033,
  "borders": [],
  "capital": "Praia",
  "demonym": "Cape Verdian",
  "languages": {
    "por": "Portuguese"
  },
  "latlng": [
    16,
    -24
  ],
  "nativeName": "Cabo Verde",
  "population": 518467,
  "region": "Africa",
  "subregion": "Western Africa",
  "timezones": [
    "UTC−01:00"
  ],
  "tld": [
    ".cv"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Cabo Verde",
      "common": "Cape Verde"
    },
    "deu": {
      "official": "Republik Cabo Verde",
      "common": "Kap Verde"
    },
    "fra": {
      "official": "République du Cap-Vert",
      "common": "Îles du Cap-Vert"
    },
    "hrv": {
      "official": "Republika Cabo Verde",
      "common": "Zelenortska Republika"
    },
    "ita": {
      "official": "Repubblica di Capo Verde",
      "common": "Capo Verde"
    },
    "jpn": {
      "official": "カーボベルデ共和国",
      "common": "カーボベルデ"
    },
    "nld": {
      "official": "Republiek van Cabo Verde",
      "common": "Kaapverdië"
    },
    "por": {
      "official": "República de Cabo Verde",
      "common": "Cabo Verde"
    },
    "rus": {
      "official": "Республика Кабо -Верде",
      "common": "Кабо-Верде"
    },
    "spa": {
      "official": "República de Cabo Verde",
      "common": "Cabo Verde"
    },
    "fin": {
      "official": "Kap Verden tasavalta",
      "common": "Kap Verde"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/cape_verde",
  "currency": [
    "CVE"
  ],
  "callingCode": [
    "238"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "CV",
    "ccn3": "132",
    "cca3": "CPV",
    "cioc": "CPV"
  }
}
},{}],42:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Cayman Islands",
    "official": "Cayman Islands",
    "native": {
      "eng": {
        "official": "Cayman Islands",
        "common": "Cayman Islands"
      }
    }
  },
  "altSpellings": [
    "KY"
  ],
  "area": 264,
  "borders": [],
  "capital": "George Town",
  "demonym": "Caymanian",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    19.5,
    -80.5
  ],
  "nativeName": "Cayman Islands",
  "population": 55456,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": null,
  "tld": [
    ".ky"
  ],
  "translations": {
    "cym": {
      "official": "Cayman Islands",
      "common": "Ynysoedd_Cayman"
    },
    "deu": {
      "official": "Cayman-Inseln",
      "common": "Kaimaninseln"
    },
    "fra": {
      "official": "Îles Caïmans",
      "common": "Îles Caïmans"
    },
    "hrv": {
      "official": "Kajmanski otoci",
      "common": "Kajmanski otoci"
    },
    "ita": {
      "official": "Isole Cayman",
      "common": "Isole Cayman"
    },
    "jpn": {
      "official": "ケイマン諸島",
      "common": "ケイマン諸島"
    },
    "nld": {
      "official": "Caymaneilanden",
      "common": "Caymaneilanden"
    },
    "por": {
      "official": "Ilhas Cayman",
      "common": "Ilhas Caimão"
    },
    "rus": {
      "official": "Каймановы острова",
      "common": "Каймановы острова"
    },
    "spa": {
      "official": "Islas Caimán",
      "common": "Islas Caimán"
    },
    "fin": {
      "official": "Caymansaaret",
      "common": "Caymansaaret"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/cayman_islands",
  "currency": [
    "KYD"
  ],
  "callingCode": [
    "1345"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "KY",
    "ccn3": "136",
    "cca3": "CYM",
    "cioc": "CAY"
  }
}
},{}],43:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Central African Republic",
    "official": "Central African Republic",
    "native": {
      "fra": {
        "official": "République centrafricaine",
        "common": "République centrafricaine"
      },
      "sag": {
        "official": "Ködörösêse tî Bêafrîka",
        "common": "Bêafrîka"
      }
    }
  },
  "altSpellings": [
    "CF",
    "Central African Republic",
    "République centrafricaine"
  ],
  "area": 622984,
  "borders": [
    "CMR",
    "TCD",
    "COD",
    "COG",
    "SSD",
    "SDN"
  ],
  "capital": "Bangui",
  "demonym": "Central African",
  "languages": {
    "fra": "French",
    "sag": "Sango"
  },
  "latlng": [
    7,
    21
  ],
  "nativeName": "Ködörösêse tî Bêafrîka",
  "population": 4709000,
  "region": "Africa",
  "subregion": "Middle Africa",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".cf"
  ],
  "translations": {
    "cym": {
      "official": "Central African Republic",
      "common": "Gweriniaeth Canolbarth Affrica"
    },
    "deu": {
      "official": "Zentralafrikanische Republik",
      "common": "Zentralafrikanische Republik"
    },
    "fra": {
      "official": "République centrafricaine",
      "common": "République centrafricaine"
    },
    "hrv": {
      "official": "Centralna Afrička Republika",
      "common": "Srednjoafrička Republika"
    },
    "ita": {
      "official": "Repubblica Centrafricana",
      "common": "Repubblica Centrafricana"
    },
    "jpn": {
      "official": "中央アフリカ共和国",
      "common": "中央アフリカ共和国"
    },
    "nld": {
      "official": "Centraal-Afrikaanse Republiek",
      "common": "Centraal-Afrikaanse Republiek"
    },
    "por": {
      "official": "República Centro-Africano",
      "common": "República Centro-Africana"
    },
    "rus": {
      "official": "Центрально-Африканская Республика",
      "common": "Центральноафриканская Республика"
    },
    "spa": {
      "official": "República Centroafricana",
      "common": "República Centroafricana"
    },
    "fin": {
      "official": "Keski-Afrikan tasavalta",
      "common": "Keski-Afrikan tasavalta"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/central_african_republic",
  "currency": [
    "XAF"
  ],
  "callingCode": [
    "236"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "CF",
    "ccn3": "140",
    "cca3": "CAF",
    "cioc": "CAF"
  }
}
},{}],44:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Chad",
    "official": "Republic of Chad",
    "native": {
      "ara": {
        "official": "جمهورية تشاد",
        "common": "تشاد‎"
      },
      "fra": {
        "official": "République du Tchad",
        "common": "Tchad"
      }
    }
  },
  "altSpellings": [
    "TD",
    "Tchad",
    "Republic of Chad",
    "République du Tchad"
  ],
  "area": 1284000,
  "borders": [
    "CMR",
    "CAF",
    "LBY",
    "NER",
    "NGA",
    "SSD"
  ],
  "capital": "N'Djamena",
  "demonym": "Chadian",
  "languages": {
    "ara": "Arabic",
    "fra": "French"
  },
  "latlng": [
    15,
    19
  ],
  "nativeName": "Tchad",
  "population": 13211000,
  "region": "Africa",
  "subregion": "Middle Africa",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".td"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Chad",
      "common": "Tsiad"
    },
    "deu": {
      "official": "Republik Tschad",
      "common": "Tschad"
    },
    "fra": {
      "official": "République du Tchad",
      "common": "Tchad"
    },
    "hrv": {
      "official": "Čadu",
      "common": "Čad"
    },
    "ita": {
      "official": "Repubblica del Ciad",
      "common": "Ciad"
    },
    "jpn": {
      "official": "チャド共和国",
      "common": "チャド"
    },
    "nld": {
      "official": "Republiek Tsjaad",
      "common": "Tsjaad"
    },
    "por": {
      "official": "República do Chade",
      "common": "Chade"
    },
    "rus": {
      "official": "Республика Чад",
      "common": "Чад"
    },
    "spa": {
      "official": "República de Chad",
      "common": "Chad"
    },
    "fin": {
      "official": "Tšadin tasavalta",
      "common": "Tšad"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/chad",
  "currency": [
    "XAF"
  ],
  "callingCode": [
    "235"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "TD",
    "ccn3": "148",
    "cca3": "TCD",
    "cioc": "CHA"
  }
}
},{}],45:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Chile",
    "official": "Republic of Chile",
    "native": {
      "spa": {
        "official": "República de Chile",
        "common": "Chile"
      }
    }
  },
  "altSpellings": [
    "CL",
    "Republic of Chile",
    "República de Chile"
  ],
  "area": 756102,
  "borders": [
    "ARG",
    "BOL",
    "PER"
  ],
  "capital": "Santiago",
  "demonym": "Chilean",
  "languages": {
    "spa": "Spanish"
  },
  "latlng": [
    -30,
    -71
  ],
  "nativeName": "Chile",
  "population": 17819054,
  "region": "Americas",
  "subregion": "South America",
  "timezones": [
    "UTC−06:00",
    "UTC−04:00"
  ],
  "tld": [
    ".cl"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Chile",
      "common": "Chile"
    },
    "deu": {
      "official": "Republik Chile",
      "common": "Chile"
    },
    "fra": {
      "official": "République du Chili",
      "common": "Chili"
    },
    "hrv": {
      "official": "Republika Čile",
      "common": "Čile"
    },
    "ita": {
      "official": "Repubblica del Cile",
      "common": "Cile"
    },
    "jpn": {
      "official": "チリ共和国",
      "common": "チリ"
    },
    "nld": {
      "official": "Republiek Chili",
      "common": "Chili"
    },
    "por": {
      "official": "República do Chile",
      "common": "Chile"
    },
    "rus": {
      "official": "Республика Чили",
      "common": "Чили"
    },
    "spa": {
      "official": "República de Chile",
      "common": "Chile"
    },
    "fin": {
      "official": "Chilen tasavalta",
      "common": "Chile"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/chile",
  "currency": [
    "CLF",
    "CLP"
  ],
  "callingCode": [
    "56"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "CL",
    "ccn3": "152",
    "cca3": "CHL",
    "cioc": "CHI"
  }
}
},{}],46:[function(require,module,exports){
module.exports={
  "name": {
    "common": "China",
    "official": "People's Republic of China",
    "native": {
      "cmn": {
        "official": "中华人民共和国",
        "common": "中国"
      }
    }
  },
  "altSpellings": [
    "CN",
    "Zhōngguó",
    "Zhongguo",
    "Zhonghua",
    "People's Republic of China",
    "中华人民共和国",
    "Zhōnghuá Rénmín Gònghéguó"
  ],
  "area": 9706961,
  "borders": [
    "AFG",
    "BTN",
    "MMR",
    "HKG",
    "IND",
    "KAZ",
    "PRK",
    "KGZ",
    "LAO",
    "MAC",
    "MNG",
    "PAK",
    "RUS",
    "TJK",
    "VNM"
  ],
  "capital": "Beijing",
  "demonym": "Chinese",
  "languages": {
    "cmn": "Mandarin"
  },
  "latlng": [
    35,
    105
  ],
  "nativeName": "中国",
  "population": 1367110000,
  "region": "Asia",
  "subregion": "Eastern Asia",
  "timezones": [
    "UTC+08:00"
  ],
  "tld": [
    ".cn",
    ".中国",
    ".中國",
    ".公司",
    ".网络"
  ],
  "translations": {
    "cym": {
      "official": "People's Republic of China",
      "common": "Tsieina"
    },
    "deu": {
      "official": "Volksrepublik China",
      "common": "China"
    },
    "fra": {
      "official": "République populaire de Chine",
      "common": "Chine"
    },
    "hrv": {
      "official": "Narodna Republika Kina",
      "common": "Kina"
    },
    "ita": {
      "official": "Repubblica popolare cinese",
      "common": "Cina"
    },
    "jpn": {
      "official": "中華人民共和国",
      "common": "中国"
    },
    "nld": {
      "official": "Volksrepubliek China",
      "common": "China"
    },
    "por": {
      "official": "República Popular da China",
      "common": "China"
    },
    "rus": {
      "official": "Народная Республика Китай",
      "common": "Китай"
    },
    "spa": {
      "official": "República Popular de China",
      "common": "China"
    },
    "fin": {
      "official": "Kiinan kansantasavalta",
      "common": "Kiina"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/china",
  "currency": [
    "CNY"
  ],
  "callingCode": [
    "86"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "CN",
    "ccn3": "156",
    "cca3": "CHN",
    "cioc": "CHN"
  }
}
},{}],47:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Christmas Island",
    "official": "Territory of Christmas Island",
    "native": {
      "eng": {
        "official": "Territory of Christmas Island",
        "common": "Christmas Island"
      }
    }
  },
  "altSpellings": [
    "CX",
    "Territory of Christmas Island"
  ],
  "area": 135,
  "borders": [],
  "capital": "Flying Fish Cove",
  "demonym": "Christmas Island",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    -10.5,
    105.66666666
  ],
  "nativeName": "Christmas Island",
  "population": 2072,
  "region": "Oceania",
  "subregion": "Australia and New Zealand",
  "timezones": null,
  "tld": [
    ".cx"
  ],
  "translations": {
    "cym": {
      "official": "Territory of Christmas Island",
      "common": "Ynys y Nadolig"
    },
    "deu": {
      "official": "Gebiet der Weihnachtsinsel",
      "common": "Weihnachtsinsel"
    },
    "fra": {
      "official": "Territoire de l'île Christmas",
      "common": "Île Christmas"
    },
    "hrv": {
      "official": "Teritorij Božićni otok",
      "common": "Božićni otok"
    },
    "ita": {
      "official": "Territorio di Christmas Island",
      "common": "Isola di Natale"
    },
    "jpn": {
      "official": "クリスマス島の領土",
      "common": "クリスマス島"
    },
    "nld": {
      "official": "Grondgebied van Christmas Island",
      "common": "Christmaseiland"
    },
    "por": {
      "official": "Território da Ilha Christmas",
      "common": "Ilha do Natal"
    },
    "rus": {
      "official": "Территория острова Рождества",
      "common": "Остров Рождества"
    },
    "spa": {
      "official": "Territorio de la Isla de Navidad",
      "common": "Isla de Navidad"
    },
    "fin": {
      "official": "Joulusaaren alue",
      "common": "Joulusaari"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/christmas_island",
  "currency": [
    "AUD"
  ],
  "callingCode": [
    "61"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "CX",
    "ccn3": "162",
    "cca3": "CXR",
    "cioc": ""
  }
}
},{}],48:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Cocos (Keeling) Islands",
    "official": "Territory of the Cocos (Keeling) Islands",
    "native": {
      "eng": {
        "official": "Territory of the Cocos (Keeling) Islands",
        "common": "Cocos (Keeling) Islands"
      }
    }
  },
  "altSpellings": [
    "CC",
    "Territory of the Cocos (Keeling) Islands",
    "Keeling Islands"
  ],
  "area": 14,
  "borders": [],
  "capital": "West Island",
  "demonym": "Cocos Islander",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    -12.5,
    96.83333333
  ],
  "nativeName": "Cocos (Keeling) Islands",
  "population": 550,
  "region": "Oceania",
  "subregion": "Australia and New Zealand",
  "timezones": null,
  "tld": [
    ".cc"
  ],
  "translations": {
    "cym": {
      "official": "Territory of the Cocos (Keeling) Islands",
      "common": "Ynysoedd Cocos"
    },
    "deu": {
      "official": "Gebiet der Cocos (Keeling) Islands",
      "common": "Kokosinseln"
    },
    "fra": {
      "official": "Territoire des îles Cocos (Keeling)",
      "common": "Îles Cocos"
    },
    "hrv": {
      "official": "Teritoriju Kokosovi (Keeling) Islands",
      "common": "Kokosovi Otoci"
    },
    "ita": {
      "official": "Territorio della (Keeling) Isole Cocos",
      "common": "Isole Cocos e Keeling"
    },
    "jpn": {
      "official": "ココス諸島の領土",
      "common": "ココス（キーリング）諸島"
    },
    "nld": {
      "official": "Grondgebied van de Eilanden Cocos (Keeling )",
      "common": "Cocoseilanden"
    },
    "por": {
      "official": "Território dos Cocos (Keeling)",
      "common": "Ilhas Cocos (Keeling)"
    },
    "rus": {
      "official": "Территория Кокосовые (Килинг) острова",
      "common": "Кокосовые острова"
    },
    "spa": {
      "official": "Territorio de los (Keeling) Islas Cocos",
      "common": "Islas Cocos o Islas Keeling"
    },
    "fin": {
      "official": "Kookossaaret",
      "common": "Kookossaaret"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/cocos_keeling_islands",
  "currency": [
    "AUD"
  ],
  "callingCode": [
    "61"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "CC",
    "ccn3": "166",
    "cca3": "CCK",
    "cioc": ""
  }
}
},{}],49:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Colombia",
    "official": "Republic of Colombia",
    "native": {
      "spa": {
        "official": "República de Colombia",
        "common": "Colombia"
      }
    }
  },
  "altSpellings": [
    "CO",
    "Republic of Colombia",
    "República de Colombia"
  ],
  "area": 1141748,
  "borders": [
    "BRA",
    "ECU",
    "PAN",
    "PER",
    "VEN"
  ],
  "capital": "Bogotá",
  "demonym": "Colombian",
  "languages": {
    "spa": "Spanish"
  },
  "latlng": [
    4,
    -72
  ],
  "nativeName": "Colombia",
  "population": 47907800,
  "region": "Americas",
  "subregion": "South America",
  "timezones": [
    "UTC−05:00"
  ],
  "tld": [
    ".co"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Colombia",
      "common": "Colombia"
    },
    "deu": {
      "official": "Republik Kolumbien",
      "common": "Kolumbien"
    },
    "fra": {
      "official": "République de Colombie",
      "common": "Colombie"
    },
    "hrv": {
      "official": "Republika Kolumbija",
      "common": "Kolumbija"
    },
    "ita": {
      "official": "Repubblica di Colombia",
      "common": "Colombia"
    },
    "jpn": {
      "official": "コロンビア共和国",
      "common": "コロンビア"
    },
    "nld": {
      "official": "Republiek Colombia",
      "common": "Colombia"
    },
    "por": {
      "official": "República da Colômbia",
      "common": "Colômbia"
    },
    "rus": {
      "official": "Республика Колумбия",
      "common": "Колумбия"
    },
    "spa": {
      "official": "República de Colombia",
      "common": "Colombia"
    },
    "fin": {
      "official": "Kolumbian tasavalta",
      "common": "Kolumbia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/colombia",
  "currency": [
    "COP"
  ],
  "callingCode": [
    "57"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "CO",
    "ccn3": "170",
    "cca3": "COL",
    "cioc": "COL"
  }
}
},{}],50:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Comoros",
    "official": "Union of the Comoros",
    "native": {
      "ara": {
        "official": "الاتحاد القمري",
        "common": "القمر‎"
      },
      "fra": {
        "official": "Union des Comores",
        "common": "Comores"
      },
      "zdj": {
        "official": "Udzima wa Komori",
        "common": "Komori"
      }
    }
  },
  "altSpellings": [
    "KM",
    "Union of the Comoros",
    "Union des Comores",
    "Udzima wa Komori",
    "al-Ittiḥād al-Qumurī"
  ],
  "area": 1862,
  "borders": [],
  "capital": "Moroni",
  "demonym": "Comoran",
  "languages": {
    "ara": "Arabic",
    "fra": "French",
    "zdj": "Comorian"
  },
  "latlng": [
    -12.16666666,
    44.25
  ],
  "nativeName": "Komori",
  "population": 763952,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".km"
  ],
  "translations": {
    "cym": {
      "official": "Union of the Comoros",
      "common": "Comoros"
    },
    "deu": {
      "official": "Union der Komoren",
      "common": "Union der Komoren"
    },
    "fra": {
      "official": "Union des Comores",
      "common": "Comores"
    },
    "hrv": {
      "official": "Savez Komori",
      "common": "Komori"
    },
    "ita": {
      "official": "Unione delle Comore",
      "common": "Comore"
    },
    "jpn": {
      "official": "コモロ連合",
      "common": "コモロ"
    },
    "nld": {
      "official": "Unie van de Comoren",
      "common": "Comoren"
    },
    "por": {
      "official": "União das Comores",
      "common": "Comores"
    },
    "rus": {
      "official": "Союз Коморских Островов",
      "common": "Коморы"
    },
    "spa": {
      "official": "Unión de las Comoras",
      "common": "Comoras"
    },
    "fin": {
      "official": "Komorien liitto",
      "common": "Komorit"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/comoros",
  "currency": [
    "KMF"
  ],
  "callingCode": [
    "269"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "KM",
    "ccn3": "174",
    "cca3": "COM",
    "cioc": "COM"
  }
}
},{}],51:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Cook Islands",
    "official": "Cook Islands",
    "native": {
      "eng": {
        "official": "Cook Islands",
        "common": "Cook Islands"
      },
      "rar": {
        "official": "Kūki 'Āirani",
        "common": "Kūki 'Āirani"
      }
    }
  },
  "altSpellings": [
    "CK",
    "Kūki 'Āirani"
  ],
  "area": 236,
  "borders": [],
  "capital": "Avarua",
  "demonym": "Cook Islander",
  "languages": {
    "eng": "English",
    "rar": "Cook Islands Māori"
  },
  "latlng": [
    -21.23333333,
    -159.76666666
  ],
  "nativeName": "Cook Islands",
  "population": 14974,
  "region": "Oceania",
  "subregion": "Polynesia",
  "timezones": null,
  "tld": [
    ".ck"
  ],
  "translations": {
    "cym": {
      "official": "Cook Islands",
      "common": "Ynysoedd Cook"
    },
    "deu": {
      "official": "Cook-Inseln",
      "common": "Cookinseln"
    },
    "fra": {
      "official": "Îles Cook",
      "common": "Îles Cook"
    },
    "hrv": {
      "official": "Cook Islands",
      "common": "Cookovo Otočje"
    },
    "ita": {
      "official": "Isole Cook",
      "common": "Isole Cook"
    },
    "jpn": {
      "official": "クック諸島",
      "common": "クック諸島"
    },
    "nld": {
      "official": "Cook eilanden",
      "common": "Cookeilanden"
    },
    "por": {
      "official": "Ilhas Cook",
      "common": "Ilhas Cook"
    },
    "rus": {
      "official": "острова Кука",
      "common": "Острова Кука"
    },
    "spa": {
      "official": "Islas Cook",
      "common": "Islas Cook"
    },
    "fin": {
      "official": "Cookinsaaret",
      "common": "Cookinsaaret"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/cook_islands",
  "currency": [
    "NZD"
  ],
  "callingCode": [
    "682"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "CK",
    "ccn3": "184",
    "cca3": "COK",
    "cioc": "COK"
  }
}
},{}],52:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Costa Rica",
    "official": "Republic of Costa Rica",
    "native": {
      "spa": {
        "official": "República de Costa Rica",
        "common": "Costa Rica"
      }
    }
  },
  "altSpellings": [
    "CR",
    "Republic of Costa Rica",
    "República de Costa Rica"
  ],
  "area": 51100,
  "borders": [
    "NIC",
    "PAN"
  ],
  "capital": "San José",
  "demonym": "Costa Rican",
  "languages": {
    "spa": "Spanish"
  },
  "latlng": [
    10,
    -84
  ],
  "nativeName": "Costa Rica",
  "population": 4713168,
  "region": "Americas",
  "subregion": "Central America",
  "timezones": [
    "UTC−06:00"
  ],
  "tld": [
    ".cr"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Costa Rica",
      "common": "Costa Rica"
    },
    "deu": {
      "official": "Republik Costa Rica",
      "common": "Costa Rica"
    },
    "fra": {
      "official": "République du Costa Rica",
      "common": "Costa Rica"
    },
    "hrv": {
      "official": "Republika Kostarika",
      "common": "Kostarika"
    },
    "ita": {
      "official": "Repubblica di Costa Rica",
      "common": "Costa Rica"
    },
    "jpn": {
      "official": "コスタリカ共和国",
      "common": "コスタリカ"
    },
    "nld": {
      "official": "Republiek Costa Rica",
      "common": "Costa Rica"
    },
    "por": {
      "official": "República da Costa Rica",
      "common": "Costa Rica"
    },
    "rus": {
      "official": "Республика Коста-Рика",
      "common": "Коста-Рика"
    },
    "spa": {
      "official": "República de Costa Rica",
      "common": "Costa Rica"
    },
    "fin": {
      "official": "Costa Rican tasavalta",
      "common": "Costa Rica"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/costa_rica",
  "currency": [
    "CRC"
  ],
  "callingCode": [
    "506"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "CR",
    "ccn3": "188",
    "cca3": "CRI",
    "cioc": "CRC"
  }
}
},{}],53:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Croatia",
    "official": "Republic of Croatia",
    "native": {
      "hrv": {
        "official": "Republika Hrvatska",
        "common": "Hrvatska"
      }
    }
  },
  "altSpellings": [
    "HR",
    "Hrvatska",
    "Republic of Croatia",
    "Republika Hrvatska"
  ],
  "area": 56594,
  "borders": [
    "BIH",
    "HUN",
    "MNE",
    "SRB",
    "SVN"
  ],
  "capital": "Zagreb",
  "demonym": "Croatian",
  "languages": {
    "hrv": "Croatian"
  },
  "latlng": [
    45.16666666,
    15.5
  ],
  "nativeName": "Hrvatska",
  "population": 4267558,
  "region": "Europe",
  "subregion": "Southern Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".hr"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Croatia",
      "common": "Croatia"
    },
    "deu": {
      "official": "Republik Kroatien",
      "common": "Kroatien"
    },
    "fra": {
      "official": "République de Croatie",
      "common": "Croatie"
    },
    "hrv": {
      "official": "Republika Hrvatska",
      "common": "Hrvatska"
    },
    "ita": {
      "official": "Repubblica di Croazia",
      "common": "Croazia"
    },
    "jpn": {
      "official": "クロアチア共和国",
      "common": "クロアチア"
    },
    "nld": {
      "official": "Republiek Kroatië",
      "common": "Kroatië"
    },
    "por": {
      "official": "República da Croácia",
      "common": "Croácia"
    },
    "rus": {
      "official": "Республика Хорватия",
      "common": "Хорватия"
    },
    "spa": {
      "official": "República de Croacia",
      "common": "Croacia"
    },
    "fin": {
      "official": "Kroatian tasavalta",
      "common": "Kroatia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/croatia",
  "currency": [
    "HRK"
  ],
  "callingCode": [
    "385"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "HR",
    "ccn3": "191",
    "cca3": "HRV",
    "cioc": "CRO"
  }
}
},{}],54:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Cuba",
    "official": "Republic of Cuba",
    "native": {
      "spa": {
        "official": "República de Cuba",
        "common": "Cuba"
      }
    }
  },
  "altSpellings": [
    "CU",
    "Republic of Cuba",
    "República de Cuba"
  ],
  "area": 109884,
  "borders": [],
  "capital": "Havana",
  "demonym": "Cuban",
  "languages": {
    "spa": "Spanish"
  },
  "latlng": [
    21.5,
    -80
  ],
  "nativeName": "Cuba",
  "population": 11210064,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": [
    "UTC−05:00"
  ],
  "tld": [
    ".cu"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Cuba",
      "common": "Ciwba"
    },
    "deu": {
      "official": "Republik Kuba",
      "common": "Kuba"
    },
    "fra": {
      "official": "République de Cuba",
      "common": "Cuba"
    },
    "hrv": {
      "official": "Republika Kuba",
      "common": "Kuba"
    },
    "ita": {
      "official": "Repubblica di Cuba",
      "common": "Cuba"
    },
    "jpn": {
      "official": "キューバ共和国",
      "common": "キューバ"
    },
    "nld": {
      "official": "Republiek Cuba",
      "common": "Cuba"
    },
    "por": {
      "official": "República de Cuba",
      "common": "Cuba"
    },
    "rus": {
      "official": "Республика Куба",
      "common": "Куба"
    },
    "spa": {
      "official": "República de Cuba",
      "common": "Cuba"
    },
    "fin": {
      "official": "Kuuban tasavalta",
      "common": "Kuuba"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/cuba",
  "currency": [
    "CUC",
    "CUP"
  ],
  "callingCode": [
    "53"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "CU",
    "ccn3": "192",
    "cca3": "CUB",
    "cioc": "CUB"
  }
}
},{}],55:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Curaçao",
    "official": "Country of Curaçao",
    "native": {
      "eng": {
        "official": "Country of Curaçao",
        "common": "Curaçao"
      },
      "nld": {
        "official": "Land Curaçao",
        "common": "Curaçao"
      },
      "pap": {
        "official": "Pais Kòrsou",
        "common": "Pais Kòrsou"
      }
    }
  },
  "tld": [
    ".cw"
  ],
  "currency": [
    "ANG"
  ],
  "callingCode": [
    "5999"
  ],
  "capital": "Willemstad",
  "altSpellings": [
    "CW",
    "Curacao",
    "Kòrsou",
    "Country of Curaçao",
    "Land Curaçao",
    "Pais Kòrsou"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English",
    "nld": "Dutch",
    "pap": "Papiamento"
  },
  "translations": {
    "fra": {
      "official": "Curaçao",
      "common": "Curaçao"
    },
    "nld": {
      "official": "Land Curaçao",
      "common": "Curaçao"
    },
    "por": {
      "official": "País de Curaçao",
      "common": "ilha da Curação"
    },
    "rus": {
      "official": "Страна Кюрасао",
      "common": "Кюрасао"
    },
    "spa": {
      "official": "País de Curazao",
      "common": "Curazao"
    },
    "fin": {
      "official": "Curaçao",
      "common": "Curaçao"
    }
  },
  "latlng": [
    12.116667,
    -68.933333
  ],
  "demonym": "Dutch",
  "landlocked": false,
  "borders": [],
  "area": 444,
  "codes": {
    "cca2": "CW",
    "ccn3": "531",
    "cca3": "CUW",
    "cioc": ""
  }
}
},{}],56:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Cyprus",
    "official": "Republic of Cyprus",
    "native": {
      "ell": {
        "official": "Δημοκρατία της Κύπρος",
        "common": "Κύπρος"
      },
      "tur": {
        "official": "Kıbrıs Cumhuriyeti",
        "common": "Kıbrıs"
      }
    }
  },
  "altSpellings": [
    "CY",
    "Kýpros",
    "Kıbrıs",
    "Republic of Cyprus",
    "Κυπριακή Δημοκρατία",
    "Kıbrıs Cumhuriyeti"
  ],
  "area": 9251,
  "borders": [
    "GBR"
  ],
  "capital": "Nicosia",
  "demonym": "Cypriot",
  "languages": {
    "ell": "Greek",
    "tur": "Turkish"
  },
  "latlng": [
    35,
    33
  ],
  "nativeName": "Κύπρος",
  "population": 858000,
  "region": "Europe",
  "subregion": "Eastern Europe",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".cy"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Cyprus",
      "common": "Cyprus"
    },
    "deu": {
      "official": "Republik Zypern",
      "common": "Zypern"
    },
    "fra": {
      "official": "République de Chypre",
      "common": "Chypre"
    },
    "hrv": {
      "official": "Republika Cipar",
      "common": "Cipar"
    },
    "ita": {
      "official": "Repubblica di Cipro",
      "common": "Cipro"
    },
    "jpn": {
      "official": "キプロス共和国",
      "common": "キプロス"
    },
    "nld": {
      "official": "Republiek Cyprus",
      "common": "Cyprus"
    },
    "por": {
      "official": "República de Chipre",
      "common": "Chipre"
    },
    "rus": {
      "official": "Республика Кипр",
      "common": "Кипр"
    },
    "spa": {
      "official": "República de Chipre",
      "common": "Chipre"
    },
    "fin": {
      "official": "Kyproksen tasavalta",
      "common": "Kypros"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/cyprus",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "357"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "CY",
    "ccn3": "196",
    "cca3": "CYP",
    "cioc": "CYP"
  }
}
},{}],57:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Czech Republic",
    "official": "Czech Republic",
    "native": {
      "ces": {
        "official": "česká republika",
        "common": "Česká republika"
      },
      "slk": {
        "official": "Česká republika",
        "common": "Česká republika"
      }
    }
  },
  "tld": [
    ".cz"
  ],
  "currency": [
    "CZK"
  ],
  "callingCode": [
    "420"
  ],
  "capital": "Prague",
  "altSpellings": [
    "CZ",
    "Česká republika",
    "Česko"
  ],
  "region": "Europe",
  "subregion": "Eastern Europe",
  "languages": {
    "ces": "Czech",
    "slk": "Slovak"
  },
  "translations": {
    "cym": {
      "official": "Czech Republic",
      "common": "Y Weriniaeth Tsiec"
    },
    "deu": {
      "official": "Tschechische Republik",
      "common": "Tschechische Republik"
    },
    "fra": {
      "official": "République tchèque",
      "common": "République tchèque"
    },
    "hrv": {
      "official": "Češka",
      "common": "Češka"
    },
    "ita": {
      "official": "Repubblica Ceca",
      "common": "Repubblica Ceca"
    },
    "jpn": {
      "official": "チェコ共和国",
      "common": "チェコ"
    },
    "nld": {
      "official": "Tsjechische Republiek",
      "common": "Tsjechië"
    },
    "por": {
      "official": "República Checa",
      "common": "República Checa"
    },
    "rus": {
      "official": "Чешская Республика",
      "common": "Чехия"
    },
    "spa": {
      "official": "República Checa",
      "common": "República Checa"
    },
    "fin": {
      "official": "Tšekin tasavalta",
      "common": "Tšekki"
    }
  },
  "latlng": [
    49.75,
    15.5
  ],
  "demonym": "Czech",
  "landlocked": true,
  "borders": [
    "AUT",
    "DEU",
    "POL",
    "SVK"
  ],
  "area": 78865,
  "codes": {
    "cca2": "CZ",
    "ccn3": "203",
    "cca3": "CZE",
    "cioc": "CZE"
  }
}
},{}],58:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Denmark",
    "official": "Kingdom of Denmark",
    "native": {
      "dan": {
        "official": "Kongeriget Danmark",
        "common": "Danmark"
      }
    }
  },
  "altSpellings": [
    "DK",
    "Danmark",
    "Kingdom of Denmark",
    "Kongeriget Danmark"
  ],
  "area": 43094,
  "borders": [
    "DEU"
  ],
  "capital": "Copenhagen",
  "demonym": "Danish",
  "languages": {
    "dan": "Danish"
  },
  "latlng": [
    56,
    10
  ],
  "nativeName": "Danmark",
  "population": 5655750,
  "region": "Europe",
  "subregion": "Northern Europe",
  "timezones": [
    "UTC−04:00",
    "UTC−03:00",
    "UTC−01:00",
    "UTC",
    "UTC+01:00"
  ],
  "tld": [
    ".dk"
  ],
  "translations": {
    "cym": {
      "official": "Kingdom of Denmark",
      "common": "Denmarc"
    },
    "deu": {
      "official": "Königreich Dänemark",
      "common": "Dänemark"
    },
    "fra": {
      "official": "Royaume du Danemark",
      "common": "Danemark"
    },
    "hrv": {
      "official": "Kraljevina Danska",
      "common": "Danska"
    },
    "ita": {
      "official": "Regno di Danimarca",
      "common": "Danimarca"
    },
    "jpn": {
      "official": "デンマーク王国",
      "common": "デンマーク"
    },
    "nld": {
      "official": "Koninkrijk Denemarken",
      "common": "Denemarken"
    },
    "por": {
      "official": "Reino da Dinamarca",
      "common": "Dinamarca"
    },
    "rus": {
      "official": "Королевство Дания",
      "common": "Дания"
    },
    "spa": {
      "official": "Reino de Dinamarca",
      "common": "Dinamarca"
    },
    "fin": {
      "official": "Tanskan kuningaskunta",
      "common": "Tanska"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/denmark",
  "currency": [
    "DKK"
  ],
  "callingCode": [
    "45"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "DK",
    "ccn3": "208",
    "cca3": "DNK",
    "cioc": "DEN"
  }
}
},{}],59:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Djibouti",
    "official": "Republic of Djibouti",
    "native": {
      "ara": {
        "official": "جمهورية جيبوتي",
        "common": "جيبوتي‎"
      },
      "fra": {
        "official": "République de Djibouti",
        "common": "Djibouti"
      }
    }
  },
  "altSpellings": [
    "DJ",
    "Jabuuti",
    "Gabuuti",
    "Republic of Djibouti",
    "République de Djibouti",
    "Gabuutih Ummuuno",
    "Jamhuuriyadda Jabuuti"
  ],
  "area": 23200,
  "borders": [
    "ERI",
    "ETH",
    "SOM"
  ],
  "capital": "Djibouti",
  "demonym": "Djibouti",
  "languages": {
    "ara": "Arabic",
    "fra": "French"
  },
  "latlng": [
    11.5,
    43
  ],
  "nativeName": "Djibouti",
  "population": 886000,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".dj"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Djibouti",
      "common": "Djibouti"
    },
    "deu": {
      "official": "Republik Dschibuti",
      "common": "Dschibuti"
    },
    "fra": {
      "official": "République de Djibouti",
      "common": "Djibouti"
    },
    "hrv": {
      "official": "Republika Džibuti",
      "common": "Džibuti"
    },
    "ita": {
      "official": "Repubblica di Gibuti",
      "common": "Gibuti"
    },
    "jpn": {
      "official": "ジブチ共和国",
      "common": "ジブチ"
    },
    "nld": {
      "official": "Republiek Djibouti",
      "common": "Djibouti"
    },
    "por": {
      "official": "República do Djibouti",
      "common": "Djibouti"
    },
    "rus": {
      "official": "Республика Джибути",
      "common": "Джибути"
    },
    "spa": {
      "official": "República de Djibouti",
      "common": "Djibouti"
    },
    "fin": {
      "official": "Dijiboutin tasavalta",
      "common": "Dijibouti"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/djibouti",
  "currency": [
    "DJF"
  ],
  "callingCode": [
    "253"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "DJ",
    "ccn3": "262",
    "cca3": "DJI",
    "cioc": "DJI"
  }
}
},{}],60:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Dominica",
    "official": "Commonwealth of Dominica",
    "native": {
      "eng": {
        "official": "Commonwealth of Dominica",
        "common": "Dominica"
      }
    }
  },
  "altSpellings": [
    "DM",
    "Dominique",
    "Wai‘tu kubuli",
    "Commonwealth of Dominica"
  ],
  "area": 751,
  "borders": [],
  "capital": "Roseau",
  "demonym": "Dominican",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    15.41666666,
    -61.33333333
  ],
  "nativeName": "Dominica",
  "population": 71293,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": [
    "UTC−04:00"
  ],
  "tld": [
    ".dm"
  ],
  "translations": {
    "cym": {
      "official": "Commonwealth of Dominica",
      "common": "Dominica"
    },
    "deu": {
      "official": "Commonwealth von Dominica",
      "common": "Dominica"
    },
    "fra": {
      "official": "Commonwealth de la Dominique",
      "common": "Dominique"
    },
    "hrv": {
      "official": "Zajednica Dominika",
      "common": "Dominika"
    },
    "ita": {
      "official": "Commonwealth di Dominica",
      "common": "Dominica"
    },
    "jpn": {
      "official": "ドミニカ国",
      "common": "ドミニカ国"
    },
    "nld": {
      "official": "Gemenebest Dominica",
      "common": "Dominica"
    },
    "por": {
      "official": "Comunidade da Dominica",
      "common": "Dominica"
    },
    "rus": {
      "official": "Содружество Доминики",
      "common": "Доминика"
    },
    "spa": {
      "official": "Mancomunidad de Dominica",
      "common": "Dominica"
    },
    "fin": {
      "official": "Dominican liittovaltio",
      "common": "Dominica"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/dominica",
  "currency": [
    "XCD"
  ],
  "callingCode": [
    "1767"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "DM",
    "ccn3": "212",
    "cca3": "DMA",
    "cioc": "DMA"
  }
}
},{}],61:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Dominican Republic",
    "official": "Dominican Republic",
    "native": {
      "spa": {
        "official": "República Dominicana",
        "common": "República Dominicana"
      }
    }
  },
  "altSpellings": [
    "DO"
  ],
  "area": 48671,
  "borders": [
    "HTI"
  ],
  "capital": "Santo Domingo",
  "demonym": "Dominican",
  "languages": {
    "spa": "Spanish"
  },
  "latlng": [
    19,
    -70.66666666
  ],
  "nativeName": "República Dominicana",
  "population": 10378267,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": [
    "UTC−04:00"
  ],
  "tld": [
    ".do"
  ],
  "translations": {
    "cym": {
      "official": "Dominican Republic",
      "common": "Gweriniaeth_Dominica"
    },
    "deu": {
      "official": "Dominikanische Republik",
      "common": "Dominikanische Republik"
    },
    "fra": {
      "official": "République Dominicaine",
      "common": "République dominicaine"
    },
    "hrv": {
      "official": "Dominikanska Republika",
      "common": "Dominikanska Republika"
    },
    "ita": {
      "official": "Repubblica Dominicana",
      "common": "Repubblica Dominicana"
    },
    "jpn": {
      "official": "ドミニカ共和国",
      "common": "ドミニカ共和国"
    },
    "nld": {
      "official": "Dominicaanse Republiek",
      "common": "Dominicaanse Republiek"
    },
    "por": {
      "official": "República Dominicana",
      "common": "República Dominicana"
    },
    "rus": {
      "official": "Доминиканская Республика",
      "common": "Доминиканская Республика"
    },
    "spa": {
      "official": "República Dominicana",
      "common": "República Dominicana"
    },
    "fin": {
      "official": "Dominikaaninen tasavalta",
      "common": "Dominikaaninen tasavalta"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/dominican_republic",
  "currency": [
    "DOP"
  ],
  "callingCode": [
    "1809",
    "1829",
    "1849"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "DO",
    "ccn3": "214",
    "cca3": "DOM",
    "cioc": "DOM"
  }
}
},{}],62:[function(require,module,exports){
module.exports={
  "name": {
    "common": "DR Congo",
    "official": "Democratic Republic of the Congo",
    "native": {
      "fra": {
        "official": "République démocratique du Congo",
        "common": "RD Congo"
      },
      "kon": {
        "official": "Repubilika ya Kongo Demokratiki",
        "common": "Repubilika ya Kongo Demokratiki"
      },
      "lin": {
        "official": "Republiki ya Kongó Demokratiki",
        "common": "Republiki ya Kongó Demokratiki"
      },
      "lua": {
        "official": "Ditunga dia Kongu wa Mungalaata",
        "common": "Ditunga dia Kongu wa Mungalaata"
      },
      "swa": {
        "official": "Jamhuri ya Kidemokrasia ya Kongo",
        "common": "Jamhuri ya Kidemokrasia ya Kongo"
      }
    }
  },
  "tld": [
    ".cd"
  ],
  "currency": [
    "CDF"
  ],
  "callingCode": [
    "243"
  ],
  "capital": "Kinshasa",
  "altSpellings": [
    "CD",
    "DR Congo",
    "Congo-Kinshasa",
    "Congo, the Democratic Republic of the",
    "DRC"
  ],
  "region": "Africa",
  "subregion": "Middle Africa",
  "languages": {
    "fra": "French",
    "kon": "Kikongo",
    "lin": "Lingala",
    "lua": "Tshiluba",
    "swa": "Swahili"
  },
  "translations": {
    "cym": {
      "official": "Democratic Republic of the Congo",
      "common": "Gweriniaeth Ddemocrataidd Congo"
    },
    "deu": {
      "official": "Demokratische Republik Kongo",
      "common": "Kongo (Dem. Rep.)"
    },
    "fra": {
      "official": "République démocratique du Congo",
      "common": "Congo (Rép. dém.)"
    },
    "hrv": {
      "official": "Demokratska Republika Kongo",
      "common": "Kongo, Demokratska Republika"
    },
    "ita": {
      "official": "Repubblica Democratica del Congo",
      "common": "Congo (Rep. Dem.)"
    },
    "jpn": {
      "official": "コンゴ民主共和国",
      "common": "コンゴ民主共和国"
    },
    "nld": {
      "official": "Democratische Republiek Congo",
      "common": "Congo (DRC)"
    },
    "por": {
      "official": "República Democrática do Congo",
      "common": "República Democrática do Congo"
    },
    "rus": {
      "official": "Демократическая Республика Конго",
      "common": "Демократическая Республика Конго"
    },
    "spa": {
      "official": "República Democrática del Congo",
      "common": "Congo (Rep. Dem.)"
    },
    "fin": {
      "official": "Kongon demokraattinen tasavalta",
      "common": "Kongon demokraattinen tasavalta"
    }
  },
  "latlng": [
    0,
    25
  ],
  "demonym": "Congolese",
  "landlocked": false,
  "borders": [
    "AGO",
    "BDI",
    "CAF",
    "COG",
    "RWA",
    "SSD",
    "TZA",
    "UGA",
    "ZMB"
  ],
  "area": 2344858,
  "codes": {
    "cca2": "CD",
    "ccn3": "180",
    "cca3": "COD",
    "cioc": "COD"
  }
}
},{}],63:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Ecuador",
    "official": "Republic of Ecuador",
    "native": {
      "spa": {
        "official": "República del Ecuador",
        "common": "Ecuador"
      }
    }
  },
  "altSpellings": [
    "EC",
    "Republic of Ecuador",
    "República del Ecuador"
  ],
  "area": 276841,
  "borders": [
    "COL",
    "PER"
  ],
  "capital": "Quito",
  "demonym": "Ecuadorean",
  "languages": {
    "spa": "Spanish"
  },
  "latlng": [
    -2,
    -77.5
  ],
  "nativeName": "Ecuador",
  "population": 15888900,
  "region": "Americas",
  "subregion": "South America",
  "timezones": [
    "UTC−06:00",
    "UTC−05:00"
  ],
  "tld": [
    ".ec"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Ecuador",
      "common": "Ecwador"
    },
    "deu": {
      "official": "Republik Ecuador",
      "common": "Ecuador"
    },
    "fra": {
      "official": "République de l'Équateur",
      "common": "Équateur"
    },
    "hrv": {
      "official": "Republika Ekvador",
      "common": "Ekvador"
    },
    "ita": {
      "official": "Repubblica dell'Ecuador",
      "common": "Ecuador"
    },
    "jpn": {
      "official": "エクアドル共和国",
      "common": "エクアドル"
    },
    "nld": {
      "official": "Republiek Ecuador",
      "common": "Ecuador"
    },
    "por": {
      "official": "República do Equador",
      "common": "Equador"
    },
    "rus": {
      "official": "Республика Эквадор",
      "common": "Эквадор"
    },
    "spa": {
      "official": "República del Ecuador",
      "common": "Ecuador"
    },
    "fin": {
      "official": "Ecuadorin tasavalta",
      "common": "Ecuador"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/ecuador",
  "currency": [
    "USD"
  ],
  "callingCode": [
    "593"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "EC",
    "ccn3": "218",
    "cca3": "ECU",
    "cioc": "ECU"
  }
}
},{}],64:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Egypt",
    "official": "Arab Republic of Egypt",
    "native": {
      "ara": {
        "official": "جمهورية مصر العربية",
        "common": "مصر"
      }
    }
  },
  "altSpellings": [
    "EG",
    "Arab Republic of Egypt"
  ],
  "area": 1002450,
  "borders": [
    "ISR",
    "LBY",
    "SDN"
  ],
  "capital": "Cairo",
  "demonym": "Egyptian",
  "languages": {
    "ara": "Arabic"
  },
  "latlng": [
    27,
    30
  ],
  "nativeName": "مصر‎",
  "population": 87668100,
  "region": "Africa",
  "subregion": "Northern Africa",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".eg",
    ".مصر"
  ],
  "translations": {
    "cym": {
      "official": "Arab Republic of Egypt",
      "common": "Yr Aifft"
    },
    "deu": {
      "official": "Arabische Republik Ägypten",
      "common": "Ägypten"
    },
    "fra": {
      "official": "République arabe d'Égypte",
      "common": "Égypte"
    },
    "hrv": {
      "official": "Arapska Republika Egipat",
      "common": "Egipat"
    },
    "ita": {
      "official": "Repubblica araba d'Egitto",
      "common": "Egitto"
    },
    "jpn": {
      "official": "エジプト·アラブ共和国",
      "common": "エジプト"
    },
    "nld": {
      "official": "Arabische Republiek Egypte",
      "common": "Egypte"
    },
    "por": {
      "official": "República Árabe do Egipto",
      "common": "Egito"
    },
    "rus": {
      "official": "Арабская Республика Египет",
      "common": "Египет"
    },
    "spa": {
      "official": "República Árabe de Egipto",
      "common": "Egipto"
    },
    "fin": {
      "official": "Egyptin arabitasavalta",
      "common": "Egypti"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/egypt",
  "currency": [
    "EGP"
  ],
  "callingCode": [
    "20"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "EG",
    "ccn3": "818",
    "cca3": "EGY",
    "cioc": "EGY"
  }
}
},{}],65:[function(require,module,exports){
module.exports={
  "name": {
    "common": "El Salvador",
    "official": "Republic of El Salvador",
    "native": {
      "spa": {
        "official": "República de El Salvador",
        "common": "El Salvador"
      }
    }
  },
  "altSpellings": [
    "SV",
    "Republic of El Salvador",
    "República de El Salvador"
  ],
  "area": 21041,
  "borders": [
    "GTM",
    "HND"
  ],
  "capital": "San Salvador",
  "demonym": "Salvadoran",
  "languages": {
    "spa": "Spanish"
  },
  "latlng": [
    13.83333333,
    -88.91666666
  ],
  "nativeName": "El Salvador",
  "population": 6401240,
  "region": "Americas",
  "subregion": "Central America",
  "timezones": [
    "UTC−06:00"
  ],
  "tld": [
    ".sv"
  ],
  "translations": {
    "cym": {
      "official": "Republic of El Salvador",
      "common": "El Salvador"
    },
    "deu": {
      "official": "Republik El Salvador",
      "common": "El Salvador"
    },
    "fra": {
      "official": "République du Salvador",
      "common": "Salvador"
    },
    "hrv": {
      "official": "Republika El Salvador",
      "common": "Salvador"
    },
    "ita": {
      "official": "Repubblica di El Salvador",
      "common": "El Salvador"
    },
    "jpn": {
      "official": "エルサルバドル共和国",
      "common": "エルサルバドル"
    },
    "nld": {
      "official": "Republiek El Salvador",
      "common": "El Salvador"
    },
    "por": {
      "official": "República de El Salvador",
      "common": "El Salvador"
    },
    "rus": {
      "official": "Республика Эль-Сальвадор",
      "common": "Сальвадор"
    },
    "spa": {
      "official": "República de El Salvador",
      "common": "El Salvador"
    },
    "fin": {
      "official": "El Salvadorin tasavalta",
      "common": "El Salvador"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/el_salvador",
  "currency": [
    "SVC",
    "USD"
  ],
  "callingCode": [
    "503"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "SV",
    "ccn3": "222",
    "cca3": "SLV",
    "cioc": "ESA"
  }
}
},{}],66:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Equatorial Guinea",
    "official": "Republic of Equatorial Guinea",
    "native": {
      "fra": {
        "official": "République de la Guinée Équatoriale",
        "common": "Guinée équatoriale"
      },
      "por": {
        "official": "República da Guiné Equatorial",
        "common": "Guiné Equatorial"
      },
      "spa": {
        "official": "República de Guinea Ecuatorial",
        "common": "Guinea Ecuatorial"
      }
    }
  },
  "altSpellings": [
    "GQ",
    "Republic of Equatorial Guinea",
    "República de Guinea Ecuatorial",
    "République de Guinée équatoriale",
    "República da Guiné Equatorial"
  ],
  "area": 28051,
  "borders": [
    "CMR",
    "GAB"
  ],
  "capital": "Malabo",
  "demonym": "Equatorial Guinean",
  "languages": {
    "fra": "French",
    "por": "Portuguese",
    "spa": "Spanish"
  },
  "latlng": [
    2,
    10
  ],
  "nativeName": "Guinea Ecuatorial",
  "population": 1430000,
  "region": "Africa",
  "subregion": "Middle Africa",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".gq"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Equatorial Guinea",
      "common": "Gini Gyhydeddol"
    },
    "deu": {
      "official": "Republik Äquatorialguinea",
      "common": "Äquatorialguinea"
    },
    "fra": {
      "official": "République de Guinée équatoriale",
      "common": "Guinée équatoriale"
    },
    "hrv": {
      "official": "Republika Ekvatorska Gvineja",
      "common": "Ekvatorijalna Gvineja"
    },
    "ita": {
      "official": "Repubblica della Guinea Equatoriale",
      "common": "Guinea Equatoriale"
    },
    "jpn": {
      "official": "赤道ギニア共和国",
      "common": "赤道ギニア"
    },
    "nld": {
      "official": "Republiek Equatoriaal-Guinea",
      "common": "Equatoriaal-Guinea"
    },
    "por": {
      "official": "República da Guiné Equatorial",
      "common": "Guiné Equatorial"
    },
    "rus": {
      "official": "Республика Экваториальная Гвинея",
      "common": "Экваториальная Гвинея"
    },
    "spa": {
      "official": "República de Guinea Ecuatorial",
      "common": "Guinea Ecuatorial"
    },
    "fin": {
      "official": "Päiväntasaajan Guinean tasavalta",
      "common": "Päiväntasaajan Guinea"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/equatorial_guinea",
  "currency": [
    "XAF"
  ],
  "callingCode": [
    "240"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "GQ",
    "ccn3": "226",
    "cca3": "GNQ",
    "cioc": "GEQ"
  }
}
},{}],67:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Eritrea",
    "official": "State of Eritrea",
    "native": {
      "ara": {
        "official": "دولة إرتريا",
        "common": "إرتريا‎"
      },
      "eng": {
        "official": "State of Eritrea",
        "common": "Eritrea"
      },
      "tir": {
        "official": "ሃገረ ኤርትራ",
        "common": "ኤርትራ"
      }
    }
  },
  "altSpellings": [
    "ER",
    "State of Eritrea",
    "ሃገረ ኤርትራ",
    "Dawlat Iritriyá",
    "ʾErtrā",
    "Iritriyā"
  ],
  "area": 117600,
  "borders": [
    "DJI",
    "ETH",
    "SDN"
  ],
  "capital": "Asmara",
  "demonym": "Eritrean",
  "languages": {
    "ara": "Arabic",
    "eng": "English",
    "tir": "Tigrinya"
  },
  "latlng": [
    15,
    39
  ],
  "nativeName": "ኤርትራ",
  "population": 6536000,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".er"
  ],
  "translations": {
    "cym": {
      "official": "State of Eritrea",
      "common": "Eritrea"
    },
    "deu": {
      "official": "Staat Eritrea",
      "common": "Eritrea"
    },
    "fra": {
      "official": "État d'Érythrée",
      "common": "Érythrée"
    },
    "hrv": {
      "official": "Država Eritreji",
      "common": "Eritreja"
    },
    "ita": {
      "official": "Stato di Eritrea",
      "common": "Eritrea"
    },
    "jpn": {
      "official": "エリトリア国",
      "common": "エリトリア"
    },
    "nld": {
      "official": "Staat Eritrea",
      "common": "Eritrea"
    },
    "por": {
      "official": "Estado da Eritreia",
      "common": "Eritreia"
    },
    "rus": {
      "official": "Государство Эритрея",
      "common": "Эритрея"
    },
    "spa": {
      "official": "Estado de Eritrea",
      "common": "Eritrea"
    },
    "fin": {
      "official": "Eritrean valtio",
      "common": "Eritrea"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/eritrea",
  "currency": [
    "ERN"
  ],
  "callingCode": [
    "291"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "ER",
    "ccn3": "232",
    "cca3": "ERI",
    "cioc": "ERI"
  }
}
},{}],68:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Estonia",
    "official": "Republic of Estonia",
    "native": {
      "est": {
        "official": "Eesti Vabariik",
        "common": "Eesti"
      }
    }
  },
  "altSpellings": [
    "EE",
    "Eesti",
    "Republic of Estonia",
    "Eesti Vabariik"
  ],
  "area": 45227,
  "borders": [
    "LVA",
    "RUS"
  ],
  "capital": "Tallinn",
  "demonym": "Estonian",
  "languages": {
    "est": "Estonian"
  },
  "latlng": [
    59,
    26
  ],
  "nativeName": "Eesti",
  "population": 1315819,
  "region": "Europe",
  "subregion": "Northern Europe",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".ee"
  ],
  "translations": {
    "cym": {
      "official": "Republic of Estonia",
      "common": "Estonia"
    },
    "deu": {
      "official": "Republik Estland",
      "common": "Estland"
    },
    "fra": {
      "official": "République d'Estonie",
      "common": "Estonie"
    },
    "hrv": {
      "official": "Republika Estonija",
      "common": "Estonija"
    },
    "ita": {
      "official": "Repubblica di Estonia",
      "common": "Estonia"
    },
    "jpn": {
      "official": "エストニア共和国",
      "common": "エストニア"
    },
    "nld": {
      "official": "Republiek Estland",
      "common": "Estland"
    },
    "por": {
      "official": "República da Estónia",
      "common": "Estónia"
    },
    "rus": {
      "official": "Эстонская Республика",
      "common": "Эстония"
    },
    "spa": {
      "official": "República de Estonia",
      "common": "Estonia"
    },
    "fin": {
      "official": "Viron tasavalta",
      "common": "Viro"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/estonia",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "372"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "EE",
    "ccn3": "233",
    "cca3": "EST",
    "cioc": "EST"
  }
}
},{}],69:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Ethiopia",
    "official": "Federal Democratic Republic of Ethiopia",
    "native": {
      "amh": {
        "official": "የኢትዮጵያ ፌዴራላዊ ዲሞክራሲያዊ ሪፐብሊክ",
        "common": "ኢትዮጵያ"
      }
    }
  },
  "altSpellings": [
    "ET",
    "ʾĪtyōṗṗyā",
    "Federal Democratic Republic of Ethiopia",
    "የኢትዮጵያ ፌዴራላዊ ዲሞክራሲያዊ ሪፐብሊክ"
  ],
  "area": 1104300,
  "borders": [
    "DJI",
    "ERI",
    "KEN",
    "SOM",
    "SSD",
    "SDN"
  ],
  "capital": "Addis Ababa",
  "demonym": "Ethiopian",
  "languages": {
    "amh": "Amharic"
  },
  "latlng": [
    8,
    38
  ],
  "nativeName": "ኢትዮጵያ",
  "population": 87952991,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".et"
  ],
  "translations": {
    "cym": {
      "official": "Federal Democratic Republic of Ethiopia",
      "common": "Ethiopia"
    },
    "deu": {
      "official": "Demokratische Bundesrepublik Äthiopien",
      "common": "Äthiopien"
    },
    "fra": {
      "official": "République fédérale démocratique d'Éthiopie",
      "common": "Éthiopie"
    },
    "hrv": {
      "official": "Savezna Demokratska Republika Etiopija",
      "common": "Etiopija"
    },
    "ita": {
      "official": "Repubblica federale democratica di Etiopia",
      "common": "Etiopia"
    },
    "jpn": {
      "official": "エチオピア連邦民主共和国",
      "common": "エチオピア"
    },
    "nld": {
      "official": "Federale Democratische Republiek Ethiopië",
      "common": "Ethiopië"
    },
    "por": {
      "official": "República Federal Democrática da Etiópia",
      "common": "Etiópia"
    },
    "rus": {
      "official": "Федеративная Демократическая Республика Эфиопия",
      "common": "Эфиопия"
    },
    "spa": {
      "official": "República Democrática Federal de Etiopía",
      "common": "Etiopía"
    },
    "fin": {
      "official": "Etiopian demokraattinen liittotasavalta",
      "common": "Etiopia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/ethiopia",
  "currency": [
    "ETB"
  ],
  "callingCode": [
    "251"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "ET",
    "ccn3": "231",
    "cca3": "ETH",
    "cioc": "ETH"
  }
}
},{}],70:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Falkland Islands",
    "official": "Falkland Islands",
    "native": {
      "eng": {
        "official": "Falkland Islands",
        "common": "Falkland Islands"
      }
    }
  },
  "tld": [
    ".fk"
  ],
  "currency": [
    "FKP"
  ],
  "callingCode": [
    "500"
  ],
  "capital": "Stanley",
  "altSpellings": [
    "FK",
    "Islas Malvinas",
    "Falkland Islands (Malvinas)"
  ],
  "region": "Americas",
  "subregion": "South America",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Falkland-Inseln",
      "common": "Falklandinseln"
    },
    "fra": {
      "official": "Îles Malouines",
      "common": "Îles Malouines"
    },
    "hrv": {
      "official": "Falklandski otoci",
      "common": "Falklandski Otoci"
    },
    "ita": {
      "official": "Isole Falkland",
      "common": "Isole Falkland o Isole Malvine"
    },
    "jpn": {
      "official": "フォークランド",
      "common": "フォークランド（マルビナス）諸島"
    },
    "nld": {
      "official": "Falkland eilanden",
      "common": "Falklandeilanden"
    },
    "por": {
      "official": "Ilhas Malvinas",
      "common": "Ilhas Malvinas"
    },
    "rus": {
      "official": "Фолклендские острова",
      "common": "Фолклендские острова"
    },
    "spa": {
      "official": "islas Malvinas",
      "common": "Islas Malvinas"
    },
    "fin": {
      "official": "Falkandinsaaret",
      "common": "Falkandinsaaret"
    }
  },
  "latlng": [
    -51.75,
    -59
  ],
  "demonym": "Falkland Islander",
  "landlocked": false,
  "borders": [],
  "area": 12173,
  "codes": {
    "cca2": "FK",
    "ccn3": "238",
    "cca3": "FLK",
    "cioc": ""
  }
}
},{}],71:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Faroe Islands",
    "official": "Faroe Islands",
    "native": {
      "dan": {
        "official": "Færøerne",
        "common": "Færøerne"
      },
      "fao": {
        "official": "Føroyar",
        "common": "Føroyar"
      }
    }
  },
  "altSpellings": [
    "FO",
    "Føroyar",
    "Færøerne"
  ],
  "area": 1393,
  "borders": [],
  "capital": "Tórshavn",
  "demonym": "Faroese",
  "languages": {
    "dan": "Danish",
    "fao": "Faroese"
  },
  "latlng": [
    62,
    -7
  ],
  "nativeName": "Føroyar",
  "population": 48605,
  "region": "Europe",
  "subregion": "Northern Europe",
  "timezones": null,
  "tld": [
    ".fo"
  ],
  "translations": {
    "deu": {
      "official": "Färöer",
      "common": "Färöer-Inseln"
    },
    "fra": {
      "official": "Îles Féroé",
      "common": "Îles Féroé"
    },
    "hrv": {
      "official": "Farski Otoci",
      "common": "Farski Otoci"
    },
    "ita": {
      "official": "Isole Faroe",
      "common": "Isole Far Oer"
    },
    "jpn": {
      "official": "フェロー諸島",
      "common": "フェロー諸島"
    },
    "nld": {
      "official": "Faeröer",
      "common": "Faeröer"
    },
    "por": {
      "official": "Ilhas Faroe",
      "common": "Ilhas Faroé"
    },
    "rus": {
      "official": "Фарерские острова",
      "common": "Фарерские острова"
    },
    "spa": {
      "official": "Islas Feroe",
      "common": "Islas Faroe"
    },
    "fin": {
      "official": "Färsaaret",
      "common": "Färsaaret"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/faroe_islands",
  "currency": [
    "DKK"
  ],
  "callingCode": [
    "298"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "FO",
    "ccn3": "234",
    "cca3": "FRO",
    "cioc": ""
  }
}
},{}],72:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Fiji",
    "official": "Republic of Fiji",
    "native": {
      "eng": {
        "official": "Republic of Fiji",
        "common": "Fiji"
      },
      "fij": {
        "official": "Matanitu Tugalala o Viti",
        "common": "Viti"
      },
      "hif": {
        "official": "रिपब्लिक ऑफ फीजी",
        "common": "फिजी"
      }
    }
  },
  "altSpellings": [
    "FJ",
    "Viti",
    "Republic of Fiji",
    "Matanitu ko Viti",
    "Fijī Gaṇarājya"
  ],
  "area": 18272,
  "borders": [],
  "capital": "Suva",
  "demonym": "Fijian",
  "languages": {
    "eng": "English",
    "fij": "Fijian",
    "hif": "Fiji Hindi"
  },
  "latlng": [
    -18,
    175
  ],
  "nativeName": "Fiji",
  "population": 859178,
  "region": "Oceania",
  "subregion": "Melanesia",
  "timezones": [
    "UTC+12:00"
  ],
  "tld": [
    ".fj"
  ],
  "translations": {
    "deu": {
      "official": "Republik Fidschi",
      "common": "Fidschi"
    },
    "fra": {
      "official": "République des Fidji",
      "common": "Fidji"
    },
    "hrv": {
      "official": "Republika Fidži",
      "common": "Fiđi"
    },
    "ita": {
      "official": "Repubblica di Figi",
      "common": "Figi"
    },
    "jpn": {
      "official": "フィジー共和国",
      "common": "フィジー"
    },
    "nld": {
      "official": "Republiek Fiji",
      "common": "Fiji"
    },
    "por": {
      "official": "República de Fiji",
      "common": "Fiji"
    },
    "rus": {
      "official": "Республика Фиджи",
      "common": "Фиджи"
    },
    "spa": {
      "official": "República de Fiji",
      "common": "Fiyi"
    },
    "fin": {
      "official": "Fidžin tasavalta",
      "common": "Fidži"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/fiji",
  "currency": [
    "FJD"
  ],
  "callingCode": [
    "679"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "FJ",
    "ccn3": "242",
    "cca3": "FJI",
    "cioc": "FIJ"
  }
}
},{}],73:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Finland",
    "official": "Republic of Finland",
    "native": {
      "fin": {
        "official": "Suomen tasavalta",
        "common": "Suomi"
      },
      "swe": {
        "official": "Republiken Finland",
        "common": "Finland"
      }
    }
  },
  "altSpellings": [
    "FI",
    "Suomi",
    "Republic of Finland",
    "Suomen tasavalta",
    "Republiken Finland"
  ],
  "area": 338424,
  "borders": [
    "NOR",
    "SWE",
    "RUS"
  ],
  "capital": "Helsinki",
  "demonym": "Finnish",
  "languages": {
    "fin": "Finnish",
    "swe": "Swedish"
  },
  "latlng": [
    64,
    26
  ],
  "nativeName": "Suomi",
  "population": 5470437,
  "region": "Europe",
  "subregion": "Northern Europe",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".fi"
  ],
  "translations": {
    "deu": {
      "official": "Republik Finnland",
      "common": "Finnland"
    },
    "fra": {
      "official": "République de Finlande",
      "common": "Finlande"
    },
    "hrv": {
      "official": "Republika Finska",
      "common": "Finska"
    },
    "ita": {
      "official": "Repubblica di Finlandia",
      "common": "Finlandia"
    },
    "jpn": {
      "official": "フィンランド共和国",
      "common": "フィンランド"
    },
    "nld": {
      "official": "Republiek Finland",
      "common": "Finland"
    },
    "por": {
      "official": "República da Finlândia",
      "common": "Finlândia"
    },
    "rus": {
      "official": "Финляндская Республика",
      "common": "Финляндия"
    },
    "spa": {
      "official": "República de Finlandia",
      "common": "Finlandia"
    },
    "fin": {
      "official": "Suomen tasavalta",
      "common": "Suomi"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/finland",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "358"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "FI",
    "ccn3": "246",
    "cca3": "FIN",
    "cioc": "FIN"
  }
}
},{}],74:[function(require,module,exports){
module.exports={
  "name": {
    "common": "France",
    "official": "French Republic",
    "native": {
      "fra": {
        "official": "République française",
        "common": "France"
      }
    }
  },
  "altSpellings": [
    "FR",
    "French Republic",
    "République française"
  ],
  "area": 551695,
  "borders": [
    "AND",
    "BEL",
    "DEU",
    "ITA",
    "LUX",
    "MCO",
    "ESP",
    "CHE"
  ],
  "capital": "Paris",
  "demonym": "French",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    46,
    2
  ],
  "nativeName": "France",
  "population": 66078000,
  "region": "Europe",
  "subregion": "Western Europe",
  "timezones": [
    "UTC−10:00",
    "UTC−09:30",
    "UTC−09:00",
    "UTC−08:00",
    "UTC−04:00",
    "UTC−03:00",
    "UTC+01:00",
    "UTC+03:00",
    "UTC+04:00",
    "UTC+05:00",
    "UTC+11:00",
    "UTC+12:00"
  ],
  "tld": [
    ".fr"
  ],
  "translations": {
    "deu": {
      "official": "Französische Republik",
      "common": "Frankreich"
    },
    "fra": {
      "official": "République française",
      "common": "France"
    },
    "hrv": {
      "official": "Francuska Republika",
      "common": "Francuska"
    },
    "ita": {
      "official": "Repubblica francese",
      "common": "Francia"
    },
    "jpn": {
      "official": "フランス共和国",
      "common": "フランス"
    },
    "nld": {
      "official": "Franse Republiek",
      "common": "Frankrijk"
    },
    "por": {
      "official": "República Francesa",
      "common": "França"
    },
    "rus": {
      "official": "Французская Республика",
      "common": "Франция"
    },
    "spa": {
      "official": "República francés",
      "common": "Francia"
    },
    "fin": {
      "official": "Ranskan tasavalta",
      "common": "Ranska"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/france",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "33"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "FR",
    "ccn3": "250",
    "cca3": "FRA",
    "cioc": "FRA"
  }
}
},{}],75:[function(require,module,exports){
module.exports={
  "name": {
    "common": "French Guiana",
    "official": "Guiana",
    "native": {
      "fra": {
        "official": "Guyanes",
        "common": "Guyane française"
      }
    }
  },
  "altSpellings": [
    "GF",
    "Guiana",
    "Guyane"
  ],
  "area": 83534,
  "borders": [
    "BRA",
    "SUR"
  ],
  "capital": "Cayenne",
  "demonym": "",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    4,
    -53
  ],
  "nativeName": "Guyane française",
  "population": 237549,
  "region": "Americas",
  "subregion": "South America",
  "timezones": null,
  "tld": [
    ".gf"
  ],
  "translations": {
    "deu": {
      "official": "Guayana",
      "common": "Französisch Guyana"
    },
    "fra": {
      "official": "Guyane",
      "common": "Guyane"
    },
    "hrv": {
      "official": "Gijana",
      "common": "Francuska Gvajana"
    },
    "ita": {
      "official": "Guiana",
      "common": "Guyana francese"
    },
    "jpn": {
      "official": "ギアナ",
      "common": "フランス領ギアナ"
    },
    "nld": {
      "official": "Guyana",
      "common": "Frans-Guyana"
    },
    "por": {
      "official": "Guiana",
      "common": "Guiana Francesa"
    },
    "rus": {
      "official": "Гвиана",
      "common": "Французская Гвиана"
    },
    "spa": {
      "official": "Guayana",
      "common": "Guayana Francesa"
    },
    "fin": {
      "official": "Ranskan Guayana",
      "common": "Ranskan Guayana"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/french_guiana",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "594"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "GF",
    "ccn3": "254",
    "cca3": "GUF",
    "cioc": ""
  }
}
},{}],76:[function(require,module,exports){
module.exports={
  "name": {
    "common": "French Polynesia",
    "official": "French Polynesia",
    "native": {
      "fra": {
        "official": "Polynésie française",
        "common": "Polynésie française"
      }
    }
  },
  "altSpellings": [
    "PF",
    "Polynésie française",
    "French Polynesia",
    "Pōrīnetia Farāni"
  ],
  "area": 4167,
  "borders": [],
  "capital": "Papeetē",
  "demonym": "French Polynesian",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    -15,
    -140
  ],
  "nativeName": "Polynésie française",
  "population": 268270,
  "region": "Oceania",
  "subregion": "Polynesia",
  "timezones": null,
  "tld": [
    ".pf"
  ],
  "translations": {
    "deu": {
      "official": "Französisch-Polynesien",
      "common": "Französisch-Polynesien"
    },
    "fra": {
      "official": "Polynésie française",
      "common": "Polynésie française"
    },
    "hrv": {
      "official": "Francuska Polinezija",
      "common": "Francuska Polinezija"
    },
    "ita": {
      "official": "Polinesia Francese",
      "common": "Polinesia Francese"
    },
    "jpn": {
      "official": "フランス領ポリネシア",
      "common": "フランス領ポリネシア"
    },
    "nld": {
      "official": "Frans-Polynesië",
      "common": "Frans-Polynesië"
    },
    "por": {
      "official": "Polinésia Francesa",
      "common": "Polinésia Francesa"
    },
    "rus": {
      "official": "Французская Полинезия",
      "common": "Французская Полинезия"
    },
    "spa": {
      "official": "Polinesia francés",
      "common": "Polinesia Francesa"
    },
    "fin": {
      "official": "Ranskan Polynesia",
      "common": "Ranskan Polynesia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/french_polynesia",
  "currency": [
    "XPF"
  ],
  "callingCode": [
    "689"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "PF",
    "ccn3": "258",
    "cca3": "PYF",
    "cioc": ""
  }
}
},{}],77:[function(require,module,exports){
module.exports={
  "name": {
    "common": "French Southern and Antarctic Lands",
    "official": "Territory of the French Southern and Antarctic Lands",
    "native": {
      "fra": {
        "official": "Territoire des Terres australes et antarctiques françaises",
        "common": "Terres australes et antarctiques françaises"
      }
    }
  },
  "altSpellings": [
    "TF",
    "French Southern Territories"
  ],
  "area": 7747,
  "borders": [],
  "capital": "Port-aux-Français",
  "demonym": "French",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    -49.25,
    69.167
  ],
  "nativeName": "Territoire des Terres australes et antarctiques françaises",
  "population": 140,
  "region": "",
  "subregion": "",
  "timezones": null,
  "tld": [
    ".tf"
  ],
  "translations": {
    "deu": {
      "official": "Gebiet der Französisch Süd-und Antarktisgebiete",
      "common": "Französische Süd-und Antarktisgebiete"
    },
    "fra": {
      "official": "Territoire des Terres australes et antarctiques françaises",
      "common": "Terres australes et antarctiques françaises"
    },
    "hrv": {
      "official": "Teritoriju Francuski južni i antarktički teritoriji",
      "common": "Francuski južni i antarktički teritoriji"
    },
    "ita": {
      "official": "Territorio della australi e antartiche francesi Terre",
      "common": "Territori Francesi del Sud"
    },
    "jpn": {
      "official": "フランス領南方·南極地域の領土",
      "common": "フランス領南方・南極地域"
    },
    "nld": {
      "official": "Grondgebied van de Franse Zuidelijke en Antarctische gebieden",
      "common": "Franse Gebieden in de zuidelijke Indische Oceaan"
    },
    "por": {
      "official": "Território do Sul e Antártica Francesa",
      "common": "Terras Austrais e Antárticas Francesas"
    },
    "rus": {
      "official": "Территория Французские Южные и Антарктические земли",
      "common": "Французские Южные и Антарктические территории"
    },
    "spa": {
      "official": "Territorio del Francés Tierras australes y antárticas",
      "common": "Tierras Australes y Antárticas Francesas"
    },
    "fin": {
      "official": "Ranskan eteläiset ja antarktiset alueet",
      "common": "Ranskan eteläiset ja antarktiset alueet"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/french_southern_and_antarctic_lands",
  "currency": [
    "EUR"
  ],
  "callingCode": [],
  "landlocked": false,
  "codes": {
    "cca2": "TF",
    "ccn3": "260",
    "cca3": "ATF",
    "cioc": ""
  }
}
},{}],78:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Gabon",
    "official": "Gabonese Republic",
    "native": {
      "fra": {
        "official": "République gabonaise",
        "common": "Gabon"
      }
    }
  },
  "altSpellings": [
    "GA",
    "Gabonese Republic",
    "République Gabonaise"
  ],
  "area": 267668,
  "borders": [
    "CMR",
    "COG",
    "GNQ"
  ],
  "capital": "Libreville",
  "demonym": "Gabonese",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    -1,
    11.75
  ],
  "nativeName": "Gabon",
  "population": 1711000,
  "region": "Africa",
  "subregion": "Middle Africa",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".ga"
  ],
  "translations": {
    "deu": {
      "official": "Gabunische Republik",
      "common": "Gabun"
    },
    "fra": {
      "official": "République gabonaise",
      "common": "Gabon"
    },
    "hrv": {
      "official": "Gabon Republika",
      "common": "Gabon"
    },
    "ita": {
      "official": "Repubblica gabonese",
      "common": "Gabon"
    },
    "jpn": {
      "official": "ガボン共和国",
      "common": "ガボン"
    },
    "nld": {
      "official": "Republiek Gabon",
      "common": "Gabon"
    },
    "por": {
      "official": "República do Gabão",
      "common": "Gabão"
    },
    "rus": {
      "official": "Габона Республика",
      "common": "Габон"
    },
    "spa": {
      "official": "República de Gabón",
      "common": "Gabón"
    },
    "fin": {
      "official": "Gabonin tasavalta",
      "common": "Gabon"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/gabon",
  "currency": [
    "XAF"
  ],
  "callingCode": [
    "241"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "GA",
    "ccn3": "266",
    "cca3": "GAB",
    "cioc": "GAB"
  }
}
},{}],79:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Gambia",
    "official": "Republic of the Gambia",
    "native": {
      "eng": {
        "official": "Republic of the Gambia",
        "common": "Gambia"
      }
    }
  },
  "tld": [
    ".gm"
  ],
  "currency": [
    "GMD"
  ],
  "callingCode": [
    "220"
  ],
  "capital": "Banjul",
  "altSpellings": [
    "GM",
    "Republic of the Gambia"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Republik Gambia",
      "common": "Gambia"
    },
    "fra": {
      "official": "République de Gambie",
      "common": "Gambie"
    },
    "hrv": {
      "official": "Republika Gambija",
      "common": "Gambija"
    },
    "ita": {
      "official": "Repubblica del Gambia",
      "common": "Gambia"
    },
    "jpn": {
      "official": "ガンビア共和国",
      "common": "ガンビア"
    },
    "nld": {
      "official": "Republiek Gambia",
      "common": "Gambia"
    },
    "por": {
      "official": "República da Gâmbia",
      "common": "Gâmbia"
    },
    "rus": {
      "official": "Республика Гамбия",
      "common": "Гамбия"
    },
    "spa": {
      "official": "República de Gambia",
      "common": "Gambia"
    },
    "fin": {
      "official": "Gambian tasavalta",
      "common": "Gambia"
    }
  },
  "latlng": [
    13.46666666,
    -16.56666666
  ],
  "demonym": "Gambian",
  "landlocked": false,
  "borders": [
    "SEN"
  ],
  "area": 10689,
  "codes": {
    "cca2": "GM",
    "ccn3": "270",
    "cca3": "GMB",
    "cioc": "GAM"
  }
}
},{}],80:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Georgia",
    "official": "Georgia",
    "native": {
      "kat": {
        "official": "საქართველო",
        "common": "საქართველო"
      }
    }
  },
  "altSpellings": [
    "GE",
    "Sakartvelo"
  ],
  "area": 69700,
  "borders": [
    "ARM",
    "AZE",
    "RUS",
    "TUR"
  ],
  "capital": "Tbilisi",
  "demonym": "Georgian",
  "languages": {
    "kat": "Georgian"
  },
  "latlng": [
    42,
    43.5
  ],
  "nativeName": "საქართველო",
  "population": 4490500,
  "region": "Asia",
  "subregion": "Western Asia",
  "timezones": null,
  "tld": [
    ".ge"
  ],
  "translations": {
    "deu": {
      "official": "Georgia",
      "common": "Georgien"
    },
    "fra": {
      "official": "République de Géorgie",
      "common": "Géorgie"
    },
    "hrv": {
      "official": "Gruzija",
      "common": "Gruzija"
    },
    "ita": {
      "official": "Georgia",
      "common": "Georgia"
    },
    "jpn": {
      "official": "グルジア",
      "common": "グルジア"
    },
    "nld": {
      "official": "Georgia",
      "common": "Georgië"
    },
    "por": {
      "official": "Georgia",
      "common": "Geórgia"
    },
    "rus": {
      "official": "Грузия",
      "common": "Грузия"
    },
    "spa": {
      "official": "Georgia",
      "common": "Georgia"
    },
    "fin": {
      "official": "Georgia",
      "common": "Georgia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/georgia",
  "currency": [
    "GEL"
  ],
  "callingCode": [
    "995"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "GE",
    "ccn3": "268",
    "cca3": "GEO",
    "cioc": "GEO"
  }
}
},{}],81:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Germany",
    "official": "Federal Republic of Germany",
    "native": {
      "deu": {
        "official": "Bundesrepublik Deutschland",
        "common": "Deutschland"
      }
    }
  },
  "altSpellings": [
    "DE",
    "Federal Republic of Germany",
    "Bundesrepublik Deutschland"
  ],
  "area": 357114,
  "borders": [
    "AUT",
    "BEL",
    "CZE",
    "DNK",
    "FRA",
    "LUX",
    "NLD",
    "POL",
    "CHE"
  ],
  "capital": "Berlin",
  "demonym": "German",
  "languages": {
    "deu": "German"
  },
  "latlng": [
    51,
    9
  ],
  "nativeName": "Deutschland",
  "population": 80783000,
  "region": "Europe",
  "subregion": "Western Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".de"
  ],
  "translations": {
    "deu": {
      "official": "Bundesrepublik Deutschland",
      "common": "Deutschland"
    },
    "fra": {
      "official": "République fédérale d'Allemagne",
      "common": "Allemagne"
    },
    "hrv": {
      "official": "Njemačka Federativna Republika",
      "common": "Njemačka"
    },
    "ita": {
      "official": "Repubblica federale di Germania",
      "common": "Germania"
    },
    "jpn": {
      "official": "ドイツ連邦共和国",
      "common": "ドイツ"
    },
    "nld": {
      "official": "Bondsrepubliek Duitsland",
      "common": "Duitsland"
    },
    "por": {
      "official": "República Federal da Alemanha",
      "common": "Alemanha"
    },
    "rus": {
      "official": "Федеративная Республика Германия",
      "common": "Германия"
    },
    "spa": {
      "official": "República Federal de Alemania",
      "common": "Alemania"
    },
    "fin": {
      "official": "Saksan liittotasavalta",
      "common": "Saksa"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/germany",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "49"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "DE",
    "ccn3": "276",
    "cca3": "DEU",
    "cioc": "GER"
  }
}
},{}],82:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Ghana",
    "official": "Republic of Ghana",
    "native": {
      "eng": {
        "official": "Republic of Ghana",
        "common": "Ghana"
      }
    }
  },
  "altSpellings": [
    "GH"
  ],
  "area": 238533,
  "borders": [
    "BFA",
    "CIV",
    "TGO"
  ],
  "capital": "Accra",
  "demonym": "Ghanaian",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    8,
    -2
  ],
  "nativeName": "Ghana",
  "population": 27043093,
  "region": "Africa",
  "subregion": "Western Africa",
  "timezones": [
    "UTC"
  ],
  "tld": [
    ".gh"
  ],
  "translations": {
    "deu": {
      "official": "Republik Ghana",
      "common": "Ghana"
    },
    "fra": {
      "official": "République du Ghana",
      "common": "Ghana"
    },
    "hrv": {
      "official": "Republika Gana",
      "common": "Gana"
    },
    "ita": {
      "official": "Repubblica del Ghana",
      "common": "Ghana"
    },
    "jpn": {
      "official": "ガーナ共和国",
      "common": "ガーナ"
    },
    "nld": {
      "official": "Republiek Ghana",
      "common": "Ghana"
    },
    "por": {
      "official": "República do Gana",
      "common": "Gana"
    },
    "rus": {
      "official": "Республика Гана",
      "common": "Гана"
    },
    "spa": {
      "official": "República de Ghana",
      "common": "Ghana"
    },
    "fin": {
      "official": "Ghanan tasavalta",
      "common": "Ghana"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/ghana",
  "currency": [
    "GHS"
  ],
  "callingCode": [
    "233"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "GH",
    "ccn3": "288",
    "cca3": "GHA",
    "cioc": "GHA"
  }
}
},{}],83:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Gibraltar",
    "official": "Gibraltar",
    "native": {
      "eng": {
        "official": "Gibraltar",
        "common": "Gibraltar"
      }
    }
  },
  "altSpellings": [
    "GI"
  ],
  "area": 6,
  "borders": [
    "ESP"
  ],
  "capital": "Gibraltar",
  "demonym": "Gibraltar",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    36.13333333,
    -5.35
  ],
  "nativeName": "Gibraltar",
  "population": 30001,
  "region": "Europe",
  "subregion": "Southern Europe",
  "timezones": null,
  "tld": [
    ".gi"
  ],
  "translations": {
    "deu": {
      "official": "Gibraltar",
      "common": "Gibraltar"
    },
    "fra": {
      "official": "Gibraltar",
      "common": "Gibraltar"
    },
    "hrv": {
      "official": "Gibraltar",
      "common": "Gibraltar"
    },
    "ita": {
      "official": "Gibilterra",
      "common": "Gibilterra"
    },
    "jpn": {
      "official": "ジブラルタル",
      "common": "ジブラルタル"
    },
    "nld": {
      "official": "Gibraltar",
      "common": "Gibraltar"
    },
    "por": {
      "official": "Gibraltar",
      "common": "Gibraltar"
    },
    "rus": {
      "official": "Гибралтар",
      "common": "Гибралтар"
    },
    "spa": {
      "official": "Gibraltar",
      "common": "Gibraltar"
    },
    "fin": {
      "official": "Gibraltar",
      "common": "Gibraltar"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/gibraltar",
  "currency": [
    "GIP"
  ],
  "callingCode": [
    "350"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "GI",
    "ccn3": "292",
    "cca3": "GIB",
    "cioc": ""
  }
}
},{}],84:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Greece",
    "official": "Hellenic Republic",
    "native": {
      "ell": {
        "official": "Ελληνική Δημοκρατία",
        "common": "Ελλάδα"
      }
    }
  },
  "altSpellings": [
    "GR",
    "Elláda",
    "Hellenic Republic",
    "Ελληνική Δημοκρατία"
  ],
  "area": 131990,
  "borders": [
    "ALB",
    "BGR",
    "TUR",
    "MKD"
  ],
  "capital": "Athens",
  "demonym": "Greek",
  "languages": {
    "ell": "Greek"
  },
  "latlng": [
    39,
    22
  ],
  "nativeName": "Ελλάδα",
  "population": 10992589,
  "region": "Europe",
  "subregion": "Southern Europe",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".gr"
  ],
  "translations": {
    "deu": {
      "official": "Hellenische Republik",
      "common": "Griechenland"
    },
    "fra": {
      "official": "République hellénique",
      "common": "Grèce"
    },
    "hrv": {
      "official": "Helenska Republika",
      "common": "Grčka"
    },
    "ita": {
      "official": "Repubblica ellenica",
      "common": "Grecia"
    },
    "jpn": {
      "official": "ギリシャ共和国",
      "common": "ギリシャ"
    },
    "nld": {
      "official": "Helleense Republiek",
      "common": "Griekenland"
    },
    "por": {
      "official": "República Helénica",
      "common": "Grécia"
    },
    "rus": {
      "official": "Греческая Республика",
      "common": "Греция"
    },
    "spa": {
      "official": "República Helénica",
      "common": "Grecia"
    },
    "fin": {
      "official": "Helleenien tasavalta",
      "common": "Kreikka"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/greece",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "30"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "GR",
    "ccn3": "300",
    "cca3": "GRC",
    "cioc": "GRE"
  }
}
},{}],85:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Greenland",
    "official": "Greenland",
    "native": {
      "kal": {
        "official": "Kalaallit Nunaat",
        "common": "Kalaallit Nunaat"
      }
    }
  },
  "altSpellings": [
    "GL",
    "Grønland"
  ],
  "area": 2166086,
  "borders": [],
  "capital": "Nuuk",
  "demonym": "Greenlandic",
  "languages": {
    "kal": "Greenlandic"
  },
  "latlng": [
    72,
    -40
  ],
  "nativeName": "Kalaallit Nunaat",
  "population": 56295,
  "region": "Americas",
  "subregion": "Northern America",
  "timezones": null,
  "tld": [
    ".gl"
  ],
  "translations": {
    "deu": {
      "official": "Grönland",
      "common": "Grönland"
    },
    "fra": {
      "official": "Groenland",
      "common": "Groenland"
    },
    "hrv": {
      "official": "Grenland",
      "common": "Grenland"
    },
    "ita": {
      "official": "Groenlandia",
      "common": "Groenlandia"
    },
    "jpn": {
      "official": "グリーンランド",
      "common": "グリーンランド"
    },
    "nld": {
      "official": "Groenland",
      "common": "Groenland"
    },
    "por": {
      "official": "Groenlândia",
      "common": "Gronelândia"
    },
    "rus": {
      "official": "Гренландия",
      "common": "Гренландия"
    },
    "spa": {
      "official": "Groenlandia",
      "common": "Groenlandia"
    },
    "fin": {
      "official": "Groönlanti",
      "common": "Groönlanti"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/greenland",
  "currency": [
    "DKK"
  ],
  "callingCode": [
    "299"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "GL",
    "ccn3": "304",
    "cca3": "GRL",
    "cioc": ""
  }
}
},{}],86:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Grenada",
    "official": "Grenada",
    "native": {
      "eng": {
        "official": "Grenada",
        "common": "Grenada"
      }
    }
  },
  "altSpellings": [
    "GD"
  ],
  "area": 344,
  "borders": [],
  "capital": "St. George's",
  "demonym": "Grenadian",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    12.11666666,
    -61.66666666
  ],
  "nativeName": "Grenada",
  "population": 103328,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": [
    "UTC−04:00"
  ],
  "tld": [
    ".gd"
  ],
  "translations": {
    "deu": {
      "official": "Grenada",
      "common": "Grenada"
    },
    "fra": {
      "official": "Grenade",
      "common": "Grenade"
    },
    "hrv": {
      "official": "Grenada",
      "common": "Grenada"
    },
    "ita": {
      "official": "Grenada",
      "common": "Grenada"
    },
    "jpn": {
      "official": "グレナダ",
      "common": "グレナダ"
    },
    "nld": {
      "official": "Grenada",
      "common": "Grenada"
    },
    "por": {
      "official": "Grenada",
      "common": "Granada"
    },
    "rus": {
      "official": "Гренада",
      "common": "Гренада"
    },
    "spa": {
      "official": "Granada",
      "common": "Grenada"
    },
    "fin": {
      "official": "Grenada",
      "common": "Grenada"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/grenada",
  "currency": [
    "XCD"
  ],
  "callingCode": [
    "1473"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "GD",
    "ccn3": "308",
    "cca3": "GRD",
    "cioc": "GRN"
  }
}
},{}],87:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Guadeloupe",
    "official": "Guadeloupe",
    "native": {
      "fra": {
        "official": "Guadeloupe",
        "common": "Guadeloupe"
      }
    }
  },
  "altSpellings": [
    "GP",
    "Gwadloup"
  ],
  "area": 1628,
  "borders": [],
  "capital": "Basse-Terre",
  "demonym": "Guadeloupian",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    16.25,
    -61.583333
  ],
  "nativeName": "Guadeloupe",
  "population": 405739,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": null,
  "tld": [
    ".gp"
  ],
  "translations": {
    "deu": {
      "official": "Guadeloupe",
      "common": "Guadeloupe"
    },
    "fra": {
      "official": "Guadeloupe",
      "common": "Guadeloupe"
    },
    "hrv": {
      "official": "Gvadalupa",
      "common": "Gvadalupa"
    },
    "ita": {
      "official": "Guadeloupe",
      "common": "Guadeloupa"
    },
    "jpn": {
      "official": "グアドループ島",
      "common": "グアドループ"
    },
    "nld": {
      "official": "Guadeloupe",
      "common": "Guadeloupe"
    },
    "por": {
      "official": "Guadalupe",
      "common": "Guadalupe"
    },
    "rus": {
      "official": "Гваделупа",
      "common": "Гваделупа"
    },
    "spa": {
      "official": "Guadalupe",
      "common": "Guadalupe"
    },
    "fin": {
      "official": "Guadeloupen departmentti",
      "common": "Guadeloupe"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/guadeloupe",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "590"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "GP",
    "ccn3": "312",
    "cca3": "GLP",
    "cioc": ""
  }
}
},{}],88:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Guam",
    "official": "Guam",
    "native": {
      "cha": {
        "official": "Guåhån",
        "common": "Guåhån"
      },
      "eng": {
        "official": "Guam",
        "common": "Guam"
      },
      "spa": {
        "official": "Guam",
        "common": "Guam"
      }
    }
  },
  "altSpellings": [
    "GU",
    "Guåhån"
  ],
  "area": 549,
  "borders": [],
  "capital": "Hagåtña",
  "demonym": "Guamanian",
  "languages": {
    "cha": "Chamorro",
    "eng": "English",
    "spa": "Spanish"
  },
  "latlng": [
    13.46666666,
    144.78333333
  ],
  "nativeName": "Guam",
  "population": 159358,
  "region": "Oceania",
  "subregion": "Micronesia",
  "timezones": null,
  "tld": [
    ".gu"
  ],
  "translations": {
    "deu": {
      "official": "Guam",
      "common": "Guam"
    },
    "fra": {
      "official": "Guam",
      "common": "Guam"
    },
    "hrv": {
      "official": "Guam",
      "common": "Guam"
    },
    "ita": {
      "official": "Guam",
      "common": "Guam"
    },
    "jpn": {
      "official": "グアム",
      "common": "グアム"
    },
    "nld": {
      "official": "Guam",
      "common": "Guam"
    },
    "por": {
      "official": "Guam",
      "common": "Guam"
    },
    "rus": {
      "official": "Гуам",
      "common": "Гуам"
    },
    "spa": {
      "official": "Guam",
      "common": "Guam"
    },
    "fin": {
      "official": "Guam",
      "common": "Guam"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/guam",
  "currency": [
    "USD"
  ],
  "callingCode": [
    "1671"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "GU",
    "ccn3": "316",
    "cca3": "GUM",
    "cioc": "GUM"
  }
}
},{}],89:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Guatemala",
    "official": "Republic of Guatemala",
    "native": {
      "spa": {
        "official": "República de Guatemala",
        "common": "Guatemala"
      }
    }
  },
  "altSpellings": [
    "GT"
  ],
  "area": 108889,
  "borders": [
    "BLZ",
    "SLV",
    "HND",
    "MEX"
  ],
  "capital": "Guatemala City",
  "demonym": "Guatemalan",
  "languages": {
    "spa": "Spanish"
  },
  "latlng": [
    15.5,
    -90.25
  ],
  "nativeName": "Guatemala",
  "population": 15806675,
  "region": "Americas",
  "subregion": "Central America",
  "timezones": [
    "UTC−06:00"
  ],
  "tld": [
    ".gt"
  ],
  "translations": {
    "deu": {
      "official": "Republik Guatemala",
      "common": "Guatemala"
    },
    "fra": {
      "official": "République du Guatemala",
      "common": "Guatemala"
    },
    "hrv": {
      "official": "Republika Gvatemala",
      "common": "Gvatemala"
    },
    "ita": {
      "official": "Repubblica del Guatemala",
      "common": "Guatemala"
    },
    "jpn": {
      "official": "グアテマラ共和国",
      "common": "グアテマラ"
    },
    "nld": {
      "official": "Republiek Guatemala",
      "common": "Guatemala"
    },
    "por": {
      "official": "República da Guatemala",
      "common": "Guatemala"
    },
    "rus": {
      "official": "Республика Гватемала",
      "common": "Гватемала"
    },
    "spa": {
      "official": "República de Guatemala",
      "common": "Guatemala"
    },
    "fin": {
      "official": "Guatemalan tasavalta",
      "common": "Guatemala"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/guatemala",
  "currency": [
    "GTQ"
  ],
  "callingCode": [
    "502"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "GT",
    "ccn3": "320",
    "cca3": "GTM",
    "cioc": "GUA"
  }
}
},{}],90:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Guernsey",
    "official": "Bailiwick of Guernsey",
    "native": {
      "eng": {
        "official": "Bailiwick of Guernsey",
        "common": "Guernsey"
      },
      "fra": {
        "official": "Bailliage de Guernesey",
        "common": "Guernesey"
      },
      "nfr": {
        "official": "Dgèrnésiais",
        "common": "Dgèrnésiais"
      }
    }
  },
  "altSpellings": [
    "GG",
    "Bailiwick of Guernsey",
    "Bailliage de Guernesey"
  ],
  "area": 78,
  "borders": [],
  "capital": "St. Peter Port",
  "demonym": "Channel Islander",
  "languages": {
    "eng": "English",
    "fra": "French",
    "nfr": "Guernésiais"
  },
  "latlng": [
    49.46666666,
    -2.58333333
  ],
  "nativeName": "Guernsey",
  "population": 63085,
  "region": "Europe",
  "subregion": "Northern Europe",
  "timezones": null,
  "tld": [
    ".gg"
  ],
  "translations": {
    "deu": {
      "official": "Guernsey",
      "common": "Guernsey"
    },
    "fra": {
      "official": "Bailliage de Guernesey",
      "common": "Guernesey"
    },
    "hrv": {
      "official": "Struka Guernsey",
      "common": "Guernsey"
    },
    "ita": {
      "official": "Baliato di Guernsey",
      "common": "Guernsey"
    },
    "jpn": {
      "official": "ガーンジーの得意分野",
      "common": "ガーンジー"
    },
    "nld": {
      "official": "Baljuwschap Guernsey",
      "common": "Guernsey"
    },
    "por": {
      "official": "Bailiado de Guernsey",
      "common": "Guernsey"
    },
    "rus": {
      "official": "Коронное владение Гернси",
      "common": "Гернси"
    },
    "spa": {
      "official": "Bailía de Guernsey",
      "common": "Guernsey"
    },
    "fin": {
      "official": "Guernsey",
      "common": "Guernsey"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/guernsey",
  "currency": [
    "GBP"
  ],
  "callingCode": [
    "44"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "GG",
    "ccn3": "831",
    "cca3": "GGY",
    "cioc": ""
  }
}
},{}],91:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Guinea",
    "official": "Republic of Guinea",
    "native": {
      "fra": {
        "official": "République de Guinée",
        "common": "Guinée"
      }
    }
  },
  "altSpellings": [
    "GN",
    "Republic of Guinea",
    "République de Guinée"
  ],
  "area": 245857,
  "borders": [
    "CIV",
    "GNB",
    "LBR",
    "MLI",
    "SEN",
    "SLE"
  ],
  "capital": "Conakry",
  "demonym": "Guinean",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    11,
    -10
  ],
  "nativeName": "Guinée",
  "population": 10628972,
  "region": "Africa",
  "subregion": "Western Africa",
  "timezones": [
    "UTC"
  ],
  "tld": [
    ".gn"
  ],
  "translations": {
    "deu": {
      "official": "Republik Guinea",
      "common": "Guinea"
    },
    "fra": {
      "official": "République de Guinée",
      "common": "Guinée"
    },
    "hrv": {
      "official": "Republika Gvineja",
      "common": "Gvineja"
    },
    "ita": {
      "official": "Repubblica di Guinea",
      "common": "Guinea"
    },
    "jpn": {
      "official": "ギニア共和国",
      "common": "ギニア"
    },
    "nld": {
      "official": "Republiek Guinee",
      "common": "Guinee"
    },
    "por": {
      "official": "República da Guiné",
      "common": "Guiné"
    },
    "rus": {
      "official": "Республика Гвинея",
      "common": "Гвинея"
    },
    "spa": {
      "official": "República de Guinea",
      "common": "Guinea"
    },
    "fin": {
      "official": "Guinean tasavalta",
      "common": "Guinea"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/guinea",
  "currency": [
    "GNF"
  ],
  "callingCode": [
    "224"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "GN",
    "ccn3": "324",
    "cca3": "GIN",
    "cioc": "GUI"
  }
}
},{}],92:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Guinea-Bissau",
    "official": "Republic of Guinea-Bissau",
    "native": {
      "por": {
        "official": "República da Guiné-Bissau",
        "common": "Guiné-Bissau"
      }
    }
  },
  "altSpellings": [
    "GW",
    "Republic of Guinea-Bissau",
    "República da Guiné-Bissau"
  ],
  "area": 36125,
  "borders": [
    "GIN",
    "SEN"
  ],
  "capital": "Bissau",
  "demonym": "Guinea-Bissauan",
  "languages": {
    "por": "Portuguese"
  },
  "latlng": [
    12,
    -15
  ],
  "nativeName": "Guiné-Bissau",
  "population": 1746000,
  "region": "Africa",
  "subregion": "Western Africa",
  "timezones": [
    "UTC"
  ],
  "tld": [
    ".gw"
  ],
  "translations": {
    "deu": {
      "official": "Republik Guinea-Bissau",
      "common": "Guinea-Bissau"
    },
    "fra": {
      "official": "République de Guinée-Bissau",
      "common": "Guinée-Bissau"
    },
    "hrv": {
      "official": "Republika Gvineja Bisau",
      "common": "Gvineja Bisau"
    },
    "ita": {
      "official": "Repubblica di Guinea-Bissau",
      "common": "Guinea-Bissau"
    },
    "jpn": {
      "official": "ギニアビサウ共和国",
      "common": "ギニアビサウ"
    },
    "nld": {
      "official": "Republiek Guinee-Bissau",
      "common": "Guinee-Bissau"
    },
    "por": {
      "official": "República da Guiné-Bissau",
      "common": "Guiné-Bissau"
    },
    "rus": {
      "official": "Республика Гвинея -Бисау",
      "common": "Гвинея-Бисау"
    },
    "spa": {
      "official": "República de Guinea-Bissau",
      "common": "Guinea-Bisáu"
    },
    "fin": {
      "official": "Guinea-Bissaun tasavalta",
      "common": "Guinea-Bissau"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/guinea_bissau",
  "currency": [
    "XOF"
  ],
  "callingCode": [
    "245"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "GW",
    "ccn3": "624",
    "cca3": "GNB",
    "cioc": "GBS"
  }
}
},{}],93:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Guyana",
    "official": "Co-operative Republic of Guyana",
    "native": {
      "eng": {
        "official": "Co-operative Republic of Guyana",
        "common": "Guyana"
      }
    }
  },
  "altSpellings": [
    "GY",
    "Co-operative Republic of Guyana"
  ],
  "area": 214969,
  "borders": [
    "BRA",
    "SUR",
    "VEN"
  ],
  "capital": "Georgetown",
  "demonym": "Guyanese",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    5,
    -59
  ],
  "nativeName": "Guyana",
  "population": 784894,
  "region": "Americas",
  "subregion": "South America",
  "timezones": [
    "UTC−04:00"
  ],
  "tld": [
    ".gy"
  ],
  "translations": {
    "deu": {
      "official": "Kooperative Republik Guyana",
      "common": "Guyana"
    },
    "fra": {
      "official": "République coopérative de Guyana",
      "common": "Guyana"
    },
    "hrv": {
      "official": "Zadruga Republika Gvajana",
      "common": "Gvajana"
    },
    "ita": {
      "official": "Co -operative Republic of Guyana",
      "common": "Guyana"
    },
    "jpn": {
      "official": "ガイアナの協同共和国",
      "common": "ガイアナ"
    },
    "nld": {
      "official": "Coöperatieve Republiek Guyana",
      "common": "Guyana"
    },
    "por": {
      "official": "Co -operative República da Guiana",
      "common": "Guiana"
    },
    "rus": {
      "official": "Кооперативная Республика Гайана",
      "common": "Гайана"
    },
    "spa": {
      "official": "República Cooperativa de Guyana",
      "common": "Guyana"
    },
    "fin": {
      "official": "Guayanan osuustoiminnallinen tasavalta",
      "common": "Guayana"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/guyana",
  "currency": [
    "GYD"
  ],
  "callingCode": [
    "592"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "GY",
    "ccn3": "328",
    "cca3": "GUY",
    "cioc": "GUY"
  }
}
},{}],94:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Haiti",
    "official": "Republic of Haiti",
    "native": {
      "fra": {
        "official": "République d'Haïti",
        "common": "Haïti"
      },
      "hat": {
        "official": "Repiblik Ayiti",
        "common": "Ayiti"
      }
    }
  },
  "altSpellings": [
    "HT",
    "Republic of Haiti",
    "République d'Haïti",
    "Repiblik Ayiti"
  ],
  "area": 27750,
  "borders": [
    "DOM"
  ],
  "capital": "Port-au-Prince",
  "demonym": "Haitian",
  "languages": {
    "fra": "French",
    "hat": "Haitian Creole"
  },
  "latlng": [
    19,
    -72.41666666
  ],
  "nativeName": "Haïti",
  "population": 10745665,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": [
    "UTC−05:00"
  ],
  "tld": [
    ".ht"
  ],
  "translations": {
    "deu": {
      "official": "Republik Haiti",
      "common": "Haiti"
    },
    "fra": {
      "official": "République d'Haïti",
      "common": "Haïti"
    },
    "hrv": {
      "official": "Republika Haiti",
      "common": "Haiti"
    },
    "ita": {
      "official": "Repubblica di Haiti",
      "common": "Haiti"
    },
    "jpn": {
      "official": "ハイチ共和国",
      "common": "ハイチ"
    },
    "nld": {
      "official": "Republiek Haïti",
      "common": "Haïti"
    },
    "por": {
      "official": "República do Haiti",
      "common": "Haiti"
    },
    "rus": {
      "official": "Республика Гаити",
      "common": "Гаити"
    },
    "spa": {
      "official": "República de Haití",
      "common": "Haiti"
    },
    "fin": {
      "official": "Haitin tasavalta",
      "common": "Haiti"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/haiti",
  "currency": [
    "HTG",
    "USD"
  ],
  "callingCode": [
    "509"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "HT",
    "ccn3": "332",
    "cca3": "HTI",
    "cioc": "HAI"
  }
}
},{}],95:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Heard Island and McDonald Islands",
    "official": "Heard Island and McDonald Islands",
    "native": {
      "eng": {
        "official": "Heard Island and McDonald Islands",
        "common": "Heard Island and McDonald Islands"
      }
    }
  },
  "tld": [
    ".hm",
    ".aq"
  ],
  "currency": [
    "AUD"
  ],
  "callingCode": [],
  "capital": "",
  "altSpellings": [
    "HM",
    "Heard Island and McDonald Mcdonald Islands"
  ],
  "region": "",
  "subregion": "",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Heard und McDonaldinseln",
      "common": "Heard und die McDonaldinseln"
    },
    "fra": {
      "official": "Des îles Heard et McDonald",
      "common": "Îles Heard-et-MacDonald"
    },
    "hrv": {
      "official": "Otok Heard i otočje McDonald",
      "common": "Otok Heard i otočje McDonald"
    },
    "ita": {
      "official": "Isole Heard e McDonald",
      "common": "Isole Heard e McDonald"
    },
    "jpn": {
      "official": "ハード島とマクドナルド諸島",
      "common": "ハード島とマクドナルド諸島"
    },
    "nld": {
      "official": "Heard en McDonaldeilanden",
      "common": "Heard-en McDonaldeilanden"
    },
    "por": {
      "official": "Ilha Heard e Ilhas McDonald",
      "common": "Ilha Heard e Ilhas McDonald"
    },
    "rus": {
      "official": "Остров Херд и острова Макдональд",
      "common": "Остров Херд и острова Макдональд"
    },
    "spa": {
      "official": "Islas Heard y McDonald",
      "common": "Islas Heard y McDonald"
    },
    "fin": {
      "official": "Heard ja McDonaldinsaaret",
      "common": "Heard ja McDonaldinsaaret"
    }
  },
  "latlng": [
    -53.1,
    72.51666666
  ],
  "demonym": "Heard and McDonald Islander",
  "landlocked": false,
  "borders": [],
  "area": 412,
  "codes": {
    "cca2": "HM",
    "ccn3": "334",
    "cca3": "HMD",
    "cioc": ""
  }
}
},{}],96:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Honduras",
    "official": "Republic of Honduras",
    "native": {
      "spa": {
        "official": "República de Honduras",
        "common": "Honduras"
      }
    }
  },
  "altSpellings": [
    "HN",
    "Republic of Honduras",
    "República de Honduras"
  ],
  "area": 112492,
  "borders": [
    "GTM",
    "SLV",
    "NIC"
  ],
  "capital": "Tegucigalpa",
  "demonym": "Honduran",
  "languages": {
    "spa": "Spanish"
  },
  "latlng": [
    15,
    -86.5
  ],
  "nativeName": "Honduras",
  "population": 8725111,
  "region": "Americas",
  "subregion": "Central America",
  "timezones": [
    "UTC−06:00"
  ],
  "tld": [
    ".hn"
  ],
  "translations": {
    "deu": {
      "official": "Republik Honduras",
      "common": "Honduras"
    },
    "fra": {
      "official": "République du Honduras",
      "common": "Honduras"
    },
    "hrv": {
      "official": "Republika Honduras",
      "common": "Honduras"
    },
    "ita": {
      "official": "Repubblica di Honduras",
      "common": "Honduras"
    },
    "jpn": {
      "official": "ホンジュラス共和国",
      "common": "ホンジュラス"
    },
    "nld": {
      "official": "Republiek Honduras",
      "common": "Honduras"
    },
    "por": {
      "official": "República de Honduras",
      "common": "Honduras"
    },
    "rus": {
      "official": "Республика Гондурас",
      "common": "Гондурас"
    },
    "spa": {
      "official": "República de Honduras",
      "common": "Honduras"
    },
    "fin": {
      "official": "Hondurasin tasavalta",
      "common": "Honduras"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/honduras",
  "currency": [
    "HNL"
  ],
  "callingCode": [
    "504"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "HN",
    "ccn3": "340",
    "cca3": "HND",
    "cioc": "HON"
  }
}
},{}],97:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Hong Kong",
    "official": "Hong Kong Special Administrative Region of the People's Republic of China",
    "native": {
      "eng": {
        "official": "Hong Kong Special Administrative Region of the People's Republic of China",
        "common": "Hong Kong"
      },
      "zho": {
        "official": "香港中国特别行政区的人民共和国",
        "common": "香港"
      }
    }
  },
  "altSpellings": [
    "HK"
  ],
  "area": 1104,
  "borders": [
    "CHN"
  ],
  "capital": "City of Victoria",
  "demonym": "Hong Konger",
  "languages": {
    "eng": "English",
    "zho": "Chinese"
  },
  "latlng": [
    22.267,
    114.188
  ],
  "nativeName": "香港",
  "population": 7234800,
  "region": "Asia",
  "subregion": "Eastern Asia",
  "timezones": [
    "UTC+08:00"
  ],
  "tld": [
    ".hk",
    ".香港"
  ],
  "translations": {
    "deu": {
      "official": "Sonderverwaltungszone der Volksrepublik China",
      "common": "Hongkong"
    },
    "fra": {
      "official": "Région administrative spéciale de Hong Kong de la République populaire de Chine",
      "common": "Hong Kong"
    },
    "hrv": {
      "official": "Hong Kong Posebnog upravnog područjaNarodne Republike Kine",
      "common": "Hong Kong"
    },
    "ita": {
      "official": "Hong Kong Regione amministrativa speciale della Repubblica Popolare Cinese",
      "common": "Hong Kong"
    },
    "jpn": {
      "official": "中華人民共和国香港特別行政区",
      "common": "香港"
    },
    "nld": {
      "official": "Hong Kong Speciale Administratieve Regio van de Volksrepubliek China",
      "common": "Hongkong"
    },
    "por": {
      "official": "Hong Kong Região Administrativa Especial da República Popular da China",
      "common": "Hong Kong"
    },
    "rus": {
      "official": "Hong Kong Специальный административный район Китайской Народной Республики Китая",
      "common": "Гонконг"
    },
    "spa": {
      "official": "Hong Kong Región Administrativa Especial de la República Popular China",
      "common": "Hong Kong"
    },
    "fin": {
      "official": "Hong Kongin erityishallintoalue",
      "common": "Hongkong"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/hong_kong",
  "currency": [
    "HKD"
  ],
  "callingCode": [
    "852"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "HK",
    "ccn3": "344",
    "cca3": "HKG",
    "cioc": "HKG"
  }
}
},{}],98:[function(require,module,exports){
module.exports={
  "tld": [
    ".hu"
  ],
  "wiki": "http://en.wikipedia.org/wiki/hungary",
  "name": {
    "common": "Hungary",
    "official": "Hungary",
    "native": {
      "hun": {
        "official": "Magyarország",
        "common": "Magyarország"
      }
    }
  },
  "currency": [
    "HUF"
  ],
  "callingCode": [
    "36"
  ],
  "capital": "Budapest",
  "altSpellings": [
    "HU"
  ],
  "region": "Europe",
  "subregion": "Eastern Europe",
  "languages": {
    "hun": "Hungarian"
  },
  "translations": {
    "deu": {
      "official": "Ungarn",
      "common": "Ungarn"
    },
    "fra": {
      "official": "Hongrie",
      "common": "Hongrie"
    },
    "hrv": {
      "official": "Madžarska",
      "common": "Mađarska"
    },
    "ita": {
      "official": "Ungheria",
      "common": "Ungheria"
    },
    "jpn": {
      "official": "ハンガリー",
      "common": "ハンガリー"
    },
    "nld": {
      "official": "Hongarije",
      "common": "Hongarije"
    },
    "por": {
      "official": "Hungria",
      "common": "Hungria"
    },
    "rus": {
      "official": "Венгрия",
      "common": "Венгрия"
    },
    "spa": {
      "official": "Hungría",
      "common": "Hungría"
    },
    "fin": {
      "official": "Unkari",
      "common": "Unkari"
    }
  },
  "latlng": [
    47,
    20
  ],
  "demonym": "Hungarian",
  "landlocked": true,
  "borders": [
    "AUT",
    "HRV",
    "ROU",
    "SRB",
    "SVK",
    "SVN",
    "UKR"
  ],
  "area": 93028,
  "codes": {
    "cca2": "HU",
    "ccn3": "348",
    "cca3": "HUN",
    "cioc": "HUN"
  }
}
},{}],99:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Iceland",
    "official": "Iceland",
    "native": {
      "isl": {
        "official": "Ísland",
        "common": "Ísland"
      }
    }
  },
  "altSpellings": [
    "IS",
    "Island",
    "Republic of Iceland",
    "Lýðveldið Ísland"
  ],
  "area": 103000,
  "borders": [],
  "capital": "Reykjavik",
  "demonym": "Icelander",
  "languages": {
    "isl": "Icelandic"
  },
  "latlng": [
    65,
    -18
  ],
  "nativeName": "Ísland",
  "population": 328170,
  "region": "Europe",
  "subregion": "Northern Europe",
  "timezones": [
    "UTC"
  ],
  "tld": [
    ".is"
  ],
  "translations": {
    "deu": {
      "official": "Island",
      "common": "Island"
    },
    "fra": {
      "official": "République d'Islande",
      "common": "Islande"
    },
    "hrv": {
      "official": "Island",
      "common": "Island"
    },
    "ita": {
      "official": "Islanda",
      "common": "Islanda"
    },
    "jpn": {
      "official": "アイスランド",
      "common": "アイスランド"
    },
    "nld": {
      "official": "IJsland",
      "common": "IJsland"
    },
    "por": {
      "official": "Islândia",
      "common": "Islândia"
    },
    "rus": {
      "official": "Исландия",
      "common": "Исландия"
    },
    "spa": {
      "official": "Islandia",
      "common": "Islandia"
    },
    "fin": {
      "official": "Islanti",
      "common": "Islanti"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/iceland",
  "currency": [
    "ISK"
  ],
  "callingCode": [
    "354"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "IS",
    "ccn3": "352",
    "cca3": "ISL",
    "cioc": "ISL"
  }
}
},{}],100:[function(require,module,exports){
module.exports={
  "name": {
    "common": "India",
    "official": "Republic of India",
    "native": {
      "eng": {
        "official": "Republic of India",
        "common": "India"
      },
      "hin": {
        "official": "भारत गणराज्य",
        "common": "भारत"
      },
      "tam": {
        "official": "இந்தியக் குடியரசு",
        "common": "இந்தியா"
      }
    }
  },
  "altSpellings": [
    "IN",
    "Bhārat",
    "Republic of India",
    "Bharat Ganrajya",
    "இந்தியா"
  ],
  "area": 3287590,
  "borders": [
    "AFG",
    "BGD",
    "BTN",
    "MMR",
    "CHN",
    "NPL",
    "PAK",
    "LKA"
  ],
  "capital": "New Delhi",
  "demonym": "Indian",
  "languages": {
    "eng": "English",
    "hin": "Hindi",
    "tam": "Tamil"
  },
  "latlng": [
    20,
    77
  ],
  "nativeName": "भारत",
  "population": 1263930000,
  "region": "Asia",
  "subregion": "Southern Asia",
  "timezones": [
    "UTC+05:30"
  ],
  "tld": [
    ".in"
  ],
  "translations": {
    "deu": {
      "official": "Republik Indien",
      "common": "Indien"
    },
    "fra": {
      "official": "République de l'Inde",
      "common": "Inde"
    },
    "hrv": {
      "official": "Republika Indija",
      "common": "Indija"
    },
    "ita": {
      "official": "Repubblica dell'India",
      "common": "India"
    },
    "jpn": {
      "official": "インド共和国",
      "common": "インド"
    },
    "nld": {
      "official": "Republiek India",
      "common": "India"
    },
    "por": {
      "official": "República da Índia",
      "common": "Índia"
    },
    "rus": {
      "official": "Республика Индия",
      "common": "Индия"
    },
    "spa": {
      "official": "República de la India",
      "common": "India"
    },
    "fin": {
      "official": "Intian tasavalta",
      "common": "Intia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/india",
  "currency": [
    "INR"
  ],
  "callingCode": [
    "91"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "IN",
    "ccn3": "356",
    "cca3": "IND",
    "cioc": "IND"
  }
}
},{}],101:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Indonesia",
    "official": "Republic of Indonesia",
    "native": {
      "ind": {
        "official": "Republik Indonesia",
        "common": "Indonesia"
      }
    }
  },
  "altSpellings": [
    "ID",
    "Republic of Indonesia",
    "Republik Indonesia"
  ],
  "area": 1904569,
  "borders": [
    "TLS",
    "MYS",
    "PNG"
  ],
  "capital": "Jakarta",
  "demonym": "Indonesian",
  "languages": {
    "ind": "Indonesian"
  },
  "latlng": [
    -5,
    120
  ],
  "nativeName": "Indonesia",
  "population": 252164800,
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "timezones": [
    "UTC+07:00",
    "UTC+08:00",
    "UTC+09:00"
  ],
  "tld": [
    ".id"
  ],
  "translations": {
    "deu": {
      "official": "Republik Indonesien",
      "common": "Indonesien"
    },
    "fra": {
      "official": "République d'Indonésie",
      "common": "Indonésie"
    },
    "hrv": {
      "official": "Republika Indonezija",
      "common": "Indonezija"
    },
    "ita": {
      "official": "Repubblica di Indonesia",
      "common": "Indonesia"
    },
    "jpn": {
      "official": "インドネシア共和国",
      "common": "インドネシア"
    },
    "nld": {
      "official": "Republiek Indonesië",
      "common": "Indonesië"
    },
    "por": {
      "official": "República da Indonésia",
      "common": "Indonésia"
    },
    "rus": {
      "official": "Республика Индонезия",
      "common": "Индонезия"
    },
    "spa": {
      "official": "República de Indonesia",
      "common": "Indonesia"
    },
    "fin": {
      "official": "Indonesian tasavalta",
      "common": "Indonesia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/indonesia",
  "currency": [
    "IDR"
  ],
  "callingCode": [
    "62"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "ID",
    "ccn3": "360",
    "cca3": "IDN",
    "cioc": "INA"
  }
}
},{}],102:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Iran",
    "official": "Islamic Republic of Iran",
    "native": {
      "fas": {
        "official": "جمهوری اسلامی ایران",
        "common": "ایران"
      }
    }
  },
  "altSpellings": [
    "IR",
    "Islamic Republic of Iran",
    "Iran, Islamic Republic of",
    "Jomhuri-ye Eslāmi-ye Irān"
  ],
  "area": 1648195,
  "borders": [
    "AFG",
    "ARM",
    "AZE",
    "IRQ",
    "PAK",
    "TUR",
    "TKM"
  ],
  "capital": "Tehran",
  "demonym": "Iranian",
  "languages": {
    "fas": "Persian"
  },
  "latlng": [
    32,
    53
  ],
  "nativeName": "Irān",
  "population": 77966400,
  "region": "Asia",
  "subregion": "Southern Asia",
  "timezones": [
    "UTC+03:30"
  ],
  "tld": [
    ".ir",
    "ایران."
  ],
  "translations": {
    "deu": {
      "official": "Islamische Republik Iran",
      "common": "Iran"
    },
    "fra": {
      "official": "République islamique d'Iran",
      "common": "Iran"
    },
    "hrv": {
      "official": "Islamska Republika Iran",
      "common": "Iran"
    },
    "jpn": {
      "official": "イラン·イスラム共和国",
      "common": "イラン・イスラム共和国"
    },
    "nld": {
      "official": "Islamitische Republiek Iran",
      "common": "Iran"
    },
    "por": {
      "official": "República Islâmica do Irã",
      "common": "Irão"
    },
    "rus": {
      "official": "Исламская Республика Иран",
      "common": "Иран"
    },
    "spa": {
      "official": "República Islámica de Irán",
      "common": "Iran"
    },
    "fin": {
      "official": "Iranin islamilainen tasavalta",
      "common": "Iran"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/iran",
  "currency": [
    "IRR"
  ],
  "callingCode": [
    "98"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "IR",
    "ccn3": "364",
    "cca3": "IRN",
    "cioc": "IRI"
  }
}
},{}],103:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Iraq",
    "official": "Republic of Iraq",
    "native": {
      "ara": {
        "official": "جمهورية العراق",
        "common": "العراق"
      },
      "arc": {
        "official": "ܩܘܼܛܢܵܐ ܐܝܼܪܲܩ",
        "common": "ܩܘܼܛܢܵܐ"
      },
      "ckb": {
        "official": "کۆماری عێراق",
        "common": "کۆماری"
      }
    }
  },
  "altSpellings": [
    "IQ",
    "Republic of Iraq",
    "Jumhūriyyat al-‘Irāq"
  ],
  "area": 438317,
  "borders": [
    "IRN",
    "JOR",
    "KWT",
    "SAU",
    "SYR",
    "TUR"
  ],
  "capital": "Baghdad",
  "demonym": "Iraqi",
  "languages": {
    "ara": "Arabic",
    "arc": "Aramaic",
    "ckb": "Sorani"
  },
  "latlng": [
    33,
    44
  ],
  "nativeName": "العراق",
  "population": 36004552,
  "region": "Asia",
  "subregion": "Western Asia",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".iq"
  ],
  "translations": {
    "deu": {
      "official": "Republik Irak",
      "common": "Irak"
    },
    "fra": {
      "official": "République d'Irak",
      "common": "Irak"
    },
    "hrv": {
      "official": "Republika Irak",
      "common": "Irak"
    },
    "ita": {
      "official": "Repubblica dell'Iraq",
      "common": "Iraq"
    },
    "jpn": {
      "official": "イラク共和国",
      "common": "イラク"
    },
    "nld": {
      "official": "Republiek Irak",
      "common": "Irak"
    },
    "por": {
      "official": "República do Iraque",
      "common": "Iraque"
    },
    "rus": {
      "official": "Республика Ирак",
      "common": "Ирак"
    },
    "spa": {
      "official": "República de Irak",
      "common": "Irak"
    },
    "fin": {
      "official": "Irakin tasavalta",
      "common": "Irak"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/iraq",
  "currency": [
    "IQD"
  ],
  "callingCode": [
    "964"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "IQ",
    "ccn3": "368",
    "cca3": "IRQ",
    "cioc": "IRQ"
  }
}
},{}],104:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Ireland",
    "official": "Republic of Ireland",
    "native": {
      "eng": {
        "official": "Republic of Ireland",
        "common": "Ireland"
      },
      "gle": {
        "official": "Poblacht na hÉireann",
        "common": "Éire"
      }
    }
  },
  "altSpellings": [
    "IE",
    "Éire",
    "Republic of Ireland",
    "Poblacht na hÉireann"
  ],
  "area": 70273,
  "borders": [
    "GBR"
  ],
  "capital": "Dublin",
  "demonym": "Irish",
  "languages": {
    "eng": "English",
    "gle": "Irish"
  },
  "latlng": [
    53,
    -8
  ],
  "nativeName": "Éire",
  "population": 6378000,
  "region": "Europe",
  "subregion": "Northern Europe",
  "timezones": [
    "UTC"
  ],
  "tld": [
    ".ie"
  ],
  "translations": {
    "deu": {
      "official": "Republik Irland",
      "common": "Irland"
    },
    "fra": {
      "official": "République d'Irlande",
      "common": "Irlande"
    },
    "hrv": {
      "official": "Republika Irska",
      "common": "Irska"
    },
    "ita": {
      "official": "Repubblica d'Irlanda",
      "common": "Irlanda"
    },
    "jpn": {
      "official": "アイルランド共和国",
      "common": "アイルランド"
    },
    "nld": {
      "official": "Republic of Ireland",
      "common": "Ierland"
    },
    "por": {
      "official": "República da Irlanda",
      "common": "Irlanda"
    },
    "rus": {
      "official": "Ирландия",
      "common": "Ирландия"
    },
    "spa": {
      "official": "República de Irlanda",
      "common": "Irlanda"
    },
    "fin": {
      "official": "Irlannin tasavalta",
      "common": "Irlanti"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/ireland",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "353"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "IE",
    "ccn3": "372",
    "cca3": "IRL",
    "cioc": "IRL"
  }
}
},{}],105:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Isle of Man",
    "official": "Isle of Man",
    "native": {
      "eng": {
        "official": "Isle of Man",
        "common": "Isle of Man"
      },
      "glv": {
        "official": "Ellan Vannin or Mannin",
        "common": "Mannin"
      }
    }
  },
  "tld": [
    ".im"
  ],
  "currency": [
    "GBP"
  ],
  "callingCode": [
    "44"
  ],
  "capital": "Douglas",
  "altSpellings": [
    "IM",
    "Ellan Vannin",
    "Mann",
    "Mannin"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "eng": "English",
    "glv": "Manx"
  },
  "translations": {
    "deu": {
      "official": "Isle of Man",
      "common": "Insel Man"
    },
    "fra": {
      "official": "Isle of Man",
      "common": "Île de Man"
    },
    "hrv": {
      "official": "Mana ostrvo",
      "common": "Otok Man"
    },
    "ita": {
      "official": "Isola di Man",
      "common": "Isola di Man"
    },
    "jpn": {
      "official": "マン島",
      "common": "マン島"
    },
    "nld": {
      "official": "Isle of Man",
      "common": "Isle of Man"
    },
    "por": {
      "official": "Isle of Man",
      "common": "Ilha de Man"
    },
    "rus": {
      "official": "Остров Мэн",
      "common": "Остров Мэн"
    },
    "spa": {
      "official": "Isla de Man",
      "common": "Isla de Man"
    },
    "fin": {
      "official": "Mansaari",
      "common": "Mansaari"
    }
  },
  "latlng": [
    54.25,
    -4.5
  ],
  "demonym": "Manx",
  "landlocked": false,
  "borders": [],
  "area": 572,
  "codes": {
    "cca2": "IM",
    "ccn3": "833",
    "cca3": "IMN",
    "cioc": ""
  }
}
},{}],106:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Israel",
    "official": "State of Israel",
    "native": {
      "ara": {
        "official": "دولة إسرائيل",
        "common": "إسرائيل"
      },
      "heb": {
        "official": "מדינת ישראל",
        "common": "ישראל"
      }
    }
  },
  "altSpellings": [
    "IL",
    "State of Israel",
    "Medīnat Yisrā'el"
  ],
  "area": 20770,
  "borders": [
    "EGY",
    "JOR",
    "LBN",
    "SYR"
  ],
  "capital": "Jerusalem",
  "demonym": "Israeli",
  "languages": {
    "ara": "Arabic",
    "heb": "Hebrew"
  },
  "latlng": [
    31.47,
    35.13
  ],
  "nativeName": "יִשְׂרָאֵל",
  "population": 8268400,
  "region": "Asia",
  "subregion": "Western Asia",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".il"
  ],
  "translations": {
    "deu": {
      "official": "Staat Israel",
      "common": "Israel"
    },
    "fra": {
      "official": "État d'Israël",
      "common": "Israël"
    },
    "hrv": {
      "official": "Država Izrael",
      "common": "Izrael"
    },
    "ita": {
      "official": "Stato di Israele",
      "common": "Israele"
    },
    "jpn": {
      "official": "イスラエル国",
      "common": "イスラエル"
    },
    "nld": {
      "official": "Staat Israël",
      "common": "Israël"
    },
    "por": {
      "official": "Estado de Israel",
      "common": "Israel"
    },
    "rus": {
      "official": "Государство Израиль",
      "common": "Израиль"
    },
    "spa": {
      "official": "Estado de Israel",
      "common": "Israel"
    },
    "fin": {
      "official": "Israelin valtio",
      "common": "Israel"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/israel",
  "currency": [
    "ILS"
  ],
  "callingCode": [
    "972"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "IL",
    "ccn3": "376",
    "cca3": "ISR",
    "cioc": "ISR"
  }
}
},{}],107:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Italy",
    "official": "Italian Republic",
    "native": {
      "bar": {
        "official": "Italienische Republik",
        "common": "Italien"
      },
      "ita": {
        "official": "Repubblica italiana",
        "common": "Italia"
      },
      "srd": {
        "official": "Repubbricanu Italia",
        "common": "Italia"
      }
    }
  },
  "altSpellings": [
    "IT",
    "Italian Republic",
    "Repubblica italiana"
  ],
  "area": 301336,
  "borders": [
    "AUT",
    "FRA",
    "SMR",
    "SVN",
    "CHE",
    "VAT"
  ],
  "capital": "Rome",
  "demonym": "Italian",
  "languages": {
    "bar": "Austro-Bavarian German",
    "ita": "Italian",
    "srd": "Sardinian"
  },
  "latlng": [
    42.83333333,
    12.83333333
  ],
  "nativeName": "Italia",
  "population": 60769102,
  "region": "Europe",
  "subregion": "Southern Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".it"
  ],
  "translations": {
    "deu": {
      "official": "Italienische Republik",
      "common": "Italien"
    },
    "fra": {
      "official": "République italienne",
      "common": "Italie"
    },
    "hrv": {
      "official": "talijanska Republika",
      "common": "Italija"
    },
    "ita": {
      "official": "Repubblica italiana",
      "common": "Italia"
    },
    "jpn": {
      "official": "イタリア共和国",
      "common": "イタリア"
    },
    "nld": {
      "official": "Italiaanse Republiek",
      "common": "Italië"
    },
    "por": {
      "official": "República Italiana",
      "common": "Itália"
    },
    "rus": {
      "official": "итальянская Республика",
      "common": "Италия"
    },
    "spa": {
      "official": "República Italiana",
      "common": "Italia"
    },
    "fin": {
      "official": "Italian tasavalta",
      "common": "Italia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/italy",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "39"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "IT",
    "ccn3": "380",
    "cca3": "ITA",
    "cioc": "ITA"
  }
}
},{}],108:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Ivory Coast",
    "official": "Republic of Côte d'Ivoire",
    "native": {
      "fra": {
        "official": "République de Côte d'Ivoire",
        "common": "Côte d'Ivoire"
      }
    }
  },
  "tld": [
    ".ci"
  ],
  "currency": [
    "XOF"
  ],
  "callingCode": [
    "225"
  ],
  "capital": "Yamoussoukro",
  "altSpellings": [
    "CI",
    "Côte d'Ivoire",
    "Ivory Coast",
    "Republic of Côte d'Ivoire",
    "République de Côte d'Ivoire"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Republik Côte d'Ivoire",
      "common": "Elfenbeinküste"
    },
    "fra": {
      "official": "République de Côte d' Ivoire",
      "common": "Côte d'Ivoire"
    },
    "hrv": {
      "official": "Republika Côte d'Ivoire",
      "common": "Obala Bjelokosti"
    },
    "ita": {
      "official": "Repubblica della Costa d'Avorio",
      "common": "Costa d'Avorio"
    },
    "jpn": {
      "official": "コートジボワール共和国",
      "common": "コートジボワール"
    },
    "nld": {
      "official": "Republiek Ivoorkust",
      "common": "Ivoorkust"
    },
    "por": {
      "official": "República da Côte d'Ivoire",
      "common": "Costa do Marfim"
    },
    "rus": {
      "official": "Республика Кот-д'Ивуаре",
      "common": "Кот-д’Ивуар"
    },
    "spa": {
      "official": "República de Côte d'Ivoire",
      "common": "Costa de Marfil"
    },
    "fin": {
      "official": "Norsunluurannikon tasavalta",
      "common": "Norsunluurannikko"
    }
  },
  "latlng": [
    8,
    -5
  ],
  "demonym": "Ivorian",
  "landlocked": false,
  "borders": [
    "BFA",
    "GHA",
    "GIN",
    "LBR",
    "MLI"
  ],
  "area": 322463,
  "codes": {
    "cca2": "CI",
    "ccn3": "384",
    "cca3": "CIV",
    "cioc": "CIV"
  }
}
},{}],109:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Jamaica",
    "official": "Jamaica",
    "native": {
      "eng": {
        "official": "Jamaica",
        "common": "Jamaica"
      },
      "jam": {
        "official": "Jamaica",
        "common": "Jamaica"
      }
    }
  },
  "altSpellings": [
    "JM"
  ],
  "area": 10991,
  "borders": [],
  "capital": "Kingston",
  "demonym": "Jamaican",
  "languages": {
    "eng": "English",
    "jam": "Jamaican Patois"
  },
  "latlng": [
    18.25,
    -77.5
  ],
  "nativeName": "Jamaica",
  "population": 2717991,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": [
    "UTC−05:00"
  ],
  "tld": [
    ".jm"
  ],
  "translations": {
    "deu": {
      "official": "Jamaika",
      "common": "Jamaika"
    },
    "fra": {
      "official": "Jamaïque",
      "common": "Jamaïque"
    },
    "hrv": {
      "official": "Jamajka",
      "common": "Jamajka"
    },
    "ita": {
      "official": "Giamaica",
      "common": "Giamaica"
    },
    "jpn": {
      "official": "ジャマイカ",
      "common": "ジャマイカ"
    },
    "nld": {
      "official": "Jamaica",
      "common": "Jamaica"
    },
    "por": {
      "official": "Jamaica",
      "common": "Jamaica"
    },
    "rus": {
      "official": "Ямайка",
      "common": "Ямайка"
    },
    "spa": {
      "official": "Jamaica",
      "common": "Jamaica"
    },
    "fin": {
      "official": "Jamaika",
      "common": "Jamaika"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/jamaica",
  "currency": [
    "JMD"
  ],
  "callingCode": [
    "1876"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "JM",
    "ccn3": "388",
    "cca3": "JAM",
    "cioc": "JAM"
  }
}
},{}],110:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Japan",
    "official": "Japan",
    "native": {
      "jpn": {
        "official": "日本",
        "common": "日本"
      }
    }
  },
  "altSpellings": [
    "JP",
    "Nippon",
    "Nihon"
  ],
  "area": 377930,
  "borders": [],
  "capital": "Tokyo",
  "demonym": "Japanese",
  "languages": {
    "jpn": "Japanese"
  },
  "latlng": [
    36,
    138
  ],
  "nativeName": "日本",
  "population": 127080000,
  "region": "Asia",
  "subregion": "Eastern Asia",
  "timezones": [
    "UTC+09:00"
  ],
  "tld": [
    ".jp",
    ".みんな"
  ],
  "translations": {
    "deu": {
      "official": "Japan",
      "common": "Japan"
    },
    "fra": {
      "official": "Japon",
      "common": "Japon"
    },
    "hrv": {
      "official": "Japan",
      "common": "Japan"
    },
    "ita": {
      "official": "Giappone",
      "common": "Giappone"
    },
    "jpn": {
      "official": "日本",
      "common": "日本"
    },
    "nld": {
      "official": "Japan",
      "common": "Japan"
    },
    "por": {
      "official": "Japão",
      "common": "Japão"
    },
    "rus": {
      "official": "Япония",
      "common": "Япония"
    },
    "spa": {
      "official": "Japón",
      "common": "Japón"
    },
    "fin": {
      "official": "Japani",
      "common": "Japani"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/japan",
  "currency": [
    "JPY"
  ],
  "callingCode": [
    "81"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "JP",
    "ccn3": "392",
    "cca3": "JPN",
    "cioc": "JPN"
  }
}
},{}],111:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Jersey",
    "official": "Bailiwick of Jersey",
    "native": {
      "eng": {
        "official": "Bailiwick of Jersey",
        "common": "Jersey"
      },
      "fra": {
        "official": "Bailliage de Jersey",
        "common": "Jersey"
      },
      "nrf": {
        "official": "Bailliage dé Jèrri",
        "common": "Jèrri"
      }
    }
  },
  "altSpellings": [
    "JE",
    "Bailiwick of Jersey",
    "Bailliage de Jersey",
    "Bailliage dé Jèrri"
  ],
  "area": 116,
  "borders": [],
  "capital": "Saint Helier",
  "demonym": "Channel Islander",
  "languages": {
    "eng": "English",
    "fra": "French",
    "nrf": "Jèrriais"
  },
  "latlng": [
    49.25,
    -2.16666666
  ],
  "nativeName": "Jersey",
  "population": 99000,
  "region": "Europe",
  "subregion": "Northern Europe",
  "timezones": null,
  "tld": [
    ".je"
  ],
  "translations": {
    "deu": {
      "official": "Vogtei Jersey",
      "common": "Jersey"
    },
    "fra": {
      "official": "Bailliage de Jersey",
      "common": "Jersey"
    },
    "hrv": {
      "official": "Struka od Jersey",
      "common": "Jersey"
    },
    "ita": {
      "official": "Baliato di Jersey",
      "common": "Isola di Jersey"
    },
    "jpn": {
      "official": "ジャージの得意分野",
      "common": "ジャージー"
    },
    "nld": {
      "official": "Baljuwschap Jersey",
      "common": "Jersey"
    },
    "por": {
      "official": "Bailiado de Jersey",
      "common": "Jersey"
    },
    "rus": {
      "official": "Коронное владение Джерси",
      "common": "Джерси"
    },
    "spa": {
      "official": "Bailía de Jersey",
      "common": "Jersey"
    },
    "fin": {
      "official": "Jersey",
      "common": "Jersey"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/jersey",
  "currency": [
    "GBP"
  ],
  "callingCode": [
    "44"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "JE",
    "ccn3": "832",
    "cca3": "JEY",
    "cioc": ""
  }
}
},{}],112:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Jordan",
    "official": "Hashemite Kingdom of Jordan",
    "native": {
      "ara": {
        "official": "المملكة الأردنية الهاشمية",
        "common": "الأردن"
      }
    }
  },
  "altSpellings": [
    "JO",
    "Hashemite Kingdom of Jordan",
    "al-Mamlakah al-Urdunīyah al-Hāshimīyah"
  ],
  "area": 89342,
  "borders": [
    "IRQ",
    "ISR",
    "SAU",
    "SYR"
  ],
  "capital": "Amman",
  "demonym": "Jordanian",
  "languages": {
    "ara": "Arabic"
  },
  "latlng": [
    31,
    36
  ],
  "nativeName": "الأردن",
  "population": 6666960,
  "region": "Asia",
  "subregion": "Western Asia",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".jo",
    "الاردن."
  ],
  "translations": {
    "deu": {
      "official": "Haschemitisches Königreich Jordanien",
      "common": "Jordanien"
    },
    "fra": {
      "official": "Royaume hachémite de Jordanie",
      "common": "Jordanie"
    },
    "hrv": {
      "official": "Hašemitske Kraljevine Jordan",
      "common": "Jordan"
    },
    "ita": {
      "official": "Regno hascemita di Giordania",
      "common": "Giordania"
    },
    "jpn": {
      "official": "ヨルダン·ハシミテ王国",
      "common": "ヨルダン"
    },
    "nld": {
      "official": "Hasjemitisch Koninkrijk Jordanië",
      "common": "Jordanië"
    },
    "por": {
      "official": "Reino Hachemita da Jordânia",
      "common": "Jordânia"
    },
    "rus": {
      "official": "Иорданского Хашимитского Королевства",
      "common": "Иордания"
    },
    "spa": {
      "official": "Reino Hachemita de Jordania",
      "common": "Jordania"
    },
    "fin": {
      "official": "Jordanian hašemiittinen kunigaskunta",
      "common": "Jordania"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/jordan",
  "currency": [
    "JOD"
  ],
  "callingCode": [
    "962"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "JO",
    "ccn3": "400",
    "cca3": "JOR",
    "cioc": "JOR"
  }
}
},{}],113:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Kazakhstan",
    "official": "Republic of Kazakhstan",
    "native": {
      "kaz": {
        "official": "Қазақстан Республикасы",
        "common": "Қазақстан"
      },
      "rus": {
        "official": "Республика Казахстан",
        "common": "Казахстан"
      }
    }
  },
  "altSpellings": [
    "KZ",
    "Qazaqstan",
    "Казахстан",
    "Republic of Kazakhstan",
    "Қазақстан Республикасы",
    "Qazaqstan Respublïkası",
    "Республика Казахстан",
    "Respublika Kazakhstan"
  ],
  "area": 2724900,
  "borders": [
    "CHN",
    "KGZ",
    "RUS",
    "TKM",
    "UZB"
  ],
  "capital": "Astana",
  "demonym": "Kazakhstani",
  "languages": {
    "kaz": "Kazakh",
    "rus": "Russian"
  },
  "latlng": [
    48,
    68
  ],
  "nativeName": "Қазақстан",
  "population": 17377800,
  "region": "Asia",
  "subregion": "Central Asia",
  "timezones": [
    "UTC+05:00",
    "UTC+06:00"
  ],
  "tld": [
    ".kz",
    ".қаз"
  ],
  "translations": {
    "deu": {
      "official": "Republik Kasachstan",
      "common": "Kasachstan"
    },
    "fra": {
      "official": "République du Kazakhstan",
      "common": "Kazakhstan"
    },
    "hrv": {
      "official": "Republika Kazahstan",
      "common": "Kazahstan"
    },
    "ita": {
      "official": "Repubblica del Kazakhstan",
      "common": "Kazakistan"
    },
    "jpn": {
      "official": "カザフスタン共和国",
      "common": "カザフスタン"
    },
    "nld": {
      "official": "Republiek Kazachstan",
      "common": "Kazachstan"
    },
    "por": {
      "official": "República do Cazaquistão",
      "common": "Cazaquistão"
    },
    "rus": {
      "official": "Республика Казахстан",
      "common": "Казахстан"
    },
    "spa": {
      "official": "República de Kazajstán",
      "common": "Kazajistán"
    },
    "fin": {
      "official": "Kazakstanin tasavalta",
      "common": "Kazakstan"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/kazakhstan",
  "currency": [
    "KZT"
  ],
  "callingCode": [
    "76",
    "77"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "KZ",
    "ccn3": "398",
    "cca3": "KAZ",
    "cioc": "KAZ"
  }
}
},{}],114:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Kenya",
    "official": "Republic of Kenya",
    "native": {
      "eng": {
        "official": "Republic of Kenya",
        "common": "Kenya"
      },
      "swa": {
        "official": "Republic of Kenya",
        "common": "Kenya"
      }
    }
  },
  "altSpellings": [
    "KE",
    "Republic of Kenya",
    "Jamhuri ya Kenya"
  ],
  "area": 580367,
  "borders": [
    "ETH",
    "SOM",
    "SSD",
    "TZA",
    "UGA"
  ],
  "capital": "Nairobi",
  "demonym": "Kenyan",
  "languages": {
    "eng": "English",
    "swa": "Swahili"
  },
  "latlng": [
    1,
    38
  ],
  "nativeName": "Kenya",
  "population": 41800000,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".ke"
  ],
  "translations": {
    "deu": {
      "official": "Republik Kenia",
      "common": "Kenia"
    },
    "fra": {
      "official": "République du Kenya",
      "common": "Kenya"
    },
    "hrv": {
      "official": "Republika Kenija",
      "common": "Kenija"
    },
    "ita": {
      "official": "Repubblica del Kenya",
      "common": "Kenya"
    },
    "jpn": {
      "official": "ケニア共和国",
      "common": "ケニア"
    },
    "nld": {
      "official": "Republiek Kenia",
      "common": "Kenia"
    },
    "por": {
      "official": "República do Quénia",
      "common": "Quénia"
    },
    "rus": {
      "official": "Республика Кения",
      "common": "Кения"
    },
    "spa": {
      "official": "República de Kenya",
      "common": "Kenia"
    },
    "fin": {
      "official": "Kenian tasavalta",
      "common": "Kenia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/kenya",
  "currency": [
    "KES"
  ],
  "callingCode": [
    "254"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "KE",
    "ccn3": "404",
    "cca3": "KEN",
    "cioc": "KEN"
  }
}
},{}],115:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Kiribati",
    "official": "Independent and Sovereign Republic of Kiribati",
    "native": {
      "eng": {
        "official": "Independent and Sovereign Republic of Kiribati",
        "common": "Kiribati"
      },
      "gil": {
        "official": "Ribaberiki Kiribati",
        "common": "Kiribati"
      }
    }
  },
  "altSpellings": [
    "KI",
    "Republic of Kiribati",
    "Ribaberiki Kiribati"
  ],
  "area": 811,
  "borders": [],
  "capital": "South Tarawa",
  "demonym": "I-Kiribati",
  "languages": {
    "eng": "English",
    "gil": "Gilbertese"
  },
  "latlng": [
    1.41666666,
    173
  ],
  "nativeName": "Kiribati",
  "population": 106461,
  "region": "Oceania",
  "subregion": "Micronesia",
  "timezones": [
    "UTC+12:00",
    "UTC+13:00",
    "UTC+14:00"
  ],
  "tld": [
    ".ki"
  ],
  "translations": {
    "deu": {
      "official": "Unabhängige und souveräne Republik Kiribati",
      "common": "Kiribati"
    },
    "fra": {
      "official": "République de Kiribati",
      "common": "Kiribati"
    },
    "hrv": {
      "official": "Samostalne i suverene Republike Kiribati",
      "common": "Kiribati"
    },
    "ita": {
      "official": "Repubblica indipendente e sovrano di Kiribati",
      "common": "Kiribati"
    },
    "jpn": {
      "official": "キリバスの独立と主権共和国",
      "common": "キリバス"
    },
    "nld": {
      "official": "Onafhankelijke en soevereine republiek Kiribati",
      "common": "Kiribati"
    },
    "por": {
      "official": "Independente e soberano República de Kiribati",
      "common": "Kiribati"
    },
    "rus": {
      "official": "Независимой и суверенной Республики Кирибати",
      "common": "Кирибати"
    },
    "spa": {
      "official": "República Independiente y Soberano de Kiribati",
      "common": "Kiribati"
    },
    "fin": {
      "official": "Kiribatin tasavalta",
      "common": "Kiribati"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/kiribati",
  "currency": [
    "AUD"
  ],
  "callingCode": [
    "686"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "KI",
    "ccn3": "296",
    "cca3": "KIR",
    "cioc": "KIR"
  }
}
},{}],116:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Kosovo",
    "official": "Republic of Kosovo",
    "native": {
      "sqi": {
        "official": "Republika e Kosovës",
        "common": "Kosova"
      },
      "srp": {
        "official": "Република Косово",
        "common": "Косово"
      }
    }
  },
  "tld": [],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "383"
  ],
  "capital": "Pristina",
  "altSpellings": [
    "XK",
    "Република Косово"
  ],
  "region": "Europe",
  "subregion": "Eastern Europe",
  "languages": {
    "sqi": "Albanian",
    "srp": "Serbian"
  },
  "translations": {
    "fra": {
      "official": "République du Kosovo",
      "common": "Kosovo"
    },
    "hrv": {
      "official": "Republika Kosovo",
      "common": "Kosovo"
    },
    "por": {
      "official": "República do Kosovo",
      "common": "Kosovo"
    },
    "rus": {
      "official": "Республика Косово",
      "common": "Республика Косово"
    },
    "spa": {
      "official": "República de Kosovo",
      "common": "Kosovo"
    },
    "fin": {
      "official": "Kosovon tasavalta",
      "common": "Kosovo"
    }
  },
  "latlng": [
    42.666667,
    21.166667
  ],
  "demonym": "Kosovar",
  "landlocked": true,
  "borders": [
    "ALB",
    "MKD",
    "MNE",
    "SRB"
  ],
  "area": 10908,
  "codes": {
    "cca2": "XK",
    "ccn3": "",
    "cca3": "UNK",
    "cioc": "KOS"
  }
}
},{}],117:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Kuwait",
    "official": "State of Kuwait",
    "native": {
      "ara": {
        "official": "دولة الكويت",
        "common": "الكويت"
      }
    }
  },
  "altSpellings": [
    "KW",
    "State of Kuwait",
    "Dawlat al-Kuwait"
  ],
  "area": 17818,
  "borders": [
    "IRQ",
    "SAU"
  ],
  "capital": "Kuwait City",
  "demonym": "Kuwaiti",
  "languages": {
    "ara": "Arabic"
  },
  "latlng": [
    29.5,
    45.75
  ],
  "nativeName": "الكويت",
  "population": 3268431,
  "region": "Asia",
  "subregion": "Western Asia",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".kw"
  ],
  "translations": {
    "deu": {
      "official": "Staat Kuwait",
      "common": "Kuwait"
    },
    "fra": {
      "official": "État du Koweït",
      "common": "Koweït"
    },
    "hrv": {
      "official": "Država Kuvajt",
      "common": "Kuvajt"
    },
    "ita": {
      "official": "Stato del Kuwait",
      "common": "Kuwait"
    },
    "jpn": {
      "official": "クウェート国",
      "common": "クウェート"
    },
    "nld": {
      "official": "Staat Koeweit",
      "common": "Koeweit"
    },
    "por": {
      "official": "Estado do Kuwait",
      "common": "Kuwait"
    },
    "rus": {
      "official": "Государство Кувейт",
      "common": "Кувейт"
    },
    "spa": {
      "official": "Estado de Kuwait",
      "common": "Kuwait"
    },
    "fin": {
      "official": "Kuwaitin valtio",
      "common": "Kuwait"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/kuwait",
  "currency": [
    "KWD"
  ],
  "callingCode": [
    "965"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "KW",
    "ccn3": "414",
    "cca3": "KWT",
    "cioc": "KUW"
  }
}
},{}],118:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Kyrgyzstan",
    "official": "Kyrgyz Republic",
    "native": {
      "kir": {
        "official": "Кыргыз Республикасы",
        "common": "Кыргызстан"
      },
      "rus": {
        "official": "Кыргызская Республика",
        "common": "Киргизия"
      }
    }
  },
  "altSpellings": [
    "KG",
    "Киргизия",
    "Kyrgyz Republic",
    "Кыргыз Республикасы",
    "Kyrgyz Respublikasy"
  ],
  "area": 199951,
  "borders": [
    "CHN",
    "KAZ",
    "TJK",
    "UZB"
  ],
  "capital": "Bishkek",
  "demonym": "Kirghiz",
  "languages": {
    "kir": "Kyrgyz",
    "rus": "Russian"
  },
  "latlng": [
    41,
    75
  ],
  "nativeName": "Кыргызстан",
  "population": 5776570,
  "region": "Asia",
  "subregion": "Central Asia",
  "timezones": [
    "UTC+06:00"
  ],
  "tld": [
    ".kg"
  ],
  "translations": {
    "deu": {
      "official": "Kirgisische Republik",
      "common": "Kirgisistan"
    },
    "fra": {
      "official": "République kirghize",
      "common": "Kirghizistan"
    },
    "hrv": {
      "official": "Kirgistanu",
      "common": "Kirgistan"
    },
    "ita": {
      "official": "Kirghizistan",
      "common": "Kirghizistan"
    },
    "jpn": {
      "official": "キルギス共和国",
      "common": "キルギス"
    },
    "nld": {
      "official": "Kirgizische Republiek",
      "common": "Kirgizië"
    },
    "por": {
      "official": "República do Quirguistão",
      "common": "Quirguistão"
    },
    "rus": {
      "official": "Кыргызская Республика",
      "common": "Киргизия"
    },
    "spa": {
      "official": "República Kirguisa",
      "common": "Kirguizistán"
    },
    "fin": {
      "official": "Kirgisian tasavalta",
      "common": "Kirgisia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/kyrgyzstan",
  "currency": [
    "KGS"
  ],
  "callingCode": [
    "996"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "KG",
    "ccn3": "417",
    "cca3": "KGZ",
    "cioc": "KGZ"
  }
}
},{}],119:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Laos",
    "official": "Lao People's Democratic Republic",
    "native": {
      "lao": {
        "official": "ສາທາລະນະ ຊາທິປະໄຕ ຄົນລາວ ຂອງ",
        "common": "ສປປລາວ"
      }
    }
  },
  "altSpellings": [
    "LA",
    "Lao",
    "Lao People's Democratic Republic",
    "Sathalanalat Paxathipatai Paxaxon Lao"
  ],
  "area": 236800,
  "borders": [
    "MMR",
    "KHM",
    "CHN",
    "THA",
    "VNM"
  ],
  "capital": "Vientiane",
  "demonym": "Laotian",
  "languages": {
    "lao": "Lao"
  },
  "latlng": [
    18,
    105
  ],
  "nativeName": "ສປປລາວ",
  "population": 6693300,
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "timezones": [
    "UTC+07:00"
  ],
  "tld": [
    ".la"
  ],
  "translations": {
    "deu": {
      "official": "Laos, Demokratische Volksrepublik",
      "common": "Laos"
    },
    "fra": {
      "official": "République démocratique populaire lao",
      "common": "Laos"
    },
    "hrv": {
      "official": "Narodna Demokratska Republika",
      "common": "Laos"
    },
    "ita": {
      "official": "Repubblica democratica popolare del Laos",
      "common": "Laos"
    },
    "jpn": {
      "official": "ラオス人民民主共和国",
      "common": "ラオス人民民主共和国"
    },
    "nld": {
      "official": "Lao Democratische Volksrepubliek",
      "common": "Laos"
    },
    "por": {
      "official": "Laos, República Democrática",
      "common": "Laos"
    },
    "rus": {
      "official": "Лаосская Народно-Демократическая Республика",
      "common": "Лаос"
    },
    "spa": {
      "official": "República Democrática Popular Lao",
      "common": "Laos"
    },
    "fin": {
      "official": "Laosin demokraattinen kansantasavalta",
      "common": "Laos"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/laos",
  "currency": [
    "LAK"
  ],
  "callingCode": [
    "856"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "LA",
    "ccn3": "418",
    "cca3": "LAO",
    "cioc": "LAO"
  }
}
},{}],120:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Latvia",
    "official": "Republic of Latvia",
    "native": {
      "lav": {
        "official": "Latvijas Republikas",
        "common": "Latvija"
      }
    }
  },
  "altSpellings": [
    "LV",
    "Republic of Latvia",
    "Latvijas Republika"
  ],
  "area": 64559,
  "borders": [
    "BLR",
    "EST",
    "LTU",
    "RUS"
  ],
  "capital": "Riga",
  "demonym": "Latvian",
  "languages": {
    "lav": "Latvian"
  },
  "latlng": [
    57,
    25
  ],
  "nativeName": "Latvija",
  "population": 1991800,
  "region": "Europe",
  "subregion": "Northern Europe",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".lv"
  ],
  "translations": {
    "deu": {
      "official": "Republik Lettland",
      "common": "Lettland"
    },
    "fra": {
      "official": "République de Lettonie",
      "common": "Lettonie"
    },
    "hrv": {
      "official": "Republika Latvija",
      "common": "Latvija"
    },
    "ita": {
      "official": "Repubblica di Lettonia",
      "common": "Lettonia"
    },
    "jpn": {
      "official": "ラトビア共和国",
      "common": "ラトビア"
    },
    "nld": {
      "official": "Republiek Letland",
      "common": "Letland"
    },
    "por": {
      "official": "República da Letónia",
      "common": "Letónia"
    },
    "rus": {
      "official": "Латвийская Республика",
      "common": "Латвия"
    },
    "spa": {
      "official": "República de Letonia",
      "common": "Letonia"
    },
    "fin": {
      "official": "Latvian tasavalta",
      "common": "Latvia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/latvia",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "371"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "LV",
    "ccn3": "428",
    "cca3": "LVA",
    "cioc": "LAT"
  }
}
},{}],121:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Lebanon",
    "official": "Lebanese Republic",
    "native": {
      "ara": {
        "official": "الجمهورية اللبنانية",
        "common": "لبنان"
      },
      "fra": {
        "official": "République libanaise",
        "common": "Liban"
      }
    }
  },
  "altSpellings": [
    "LB",
    "Lebanese Republic",
    "Al-Jumhūrīyah Al-Libnānīyah"
  ],
  "area": 10452,
  "borders": [
    "ISR",
    "SYR"
  ],
  "capital": "Beirut",
  "demonym": "Lebanese",
  "languages": {
    "ara": "Arabic",
    "fra": "French"
  },
  "latlng": [
    33.83333333,
    35.83333333
  ],
  "nativeName": "لبنان",
  "population": 4104000,
  "region": "Asia",
  "subregion": "Western Asia",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".lb"
  ],
  "translations": {
    "deu": {
      "official": "Libanesische Republik",
      "common": "Libanon"
    },
    "fra": {
      "official": "République libanaise",
      "common": "Liban"
    },
    "hrv": {
      "official": "Libanonska Republika",
      "common": "Libanon"
    },
    "ita": {
      "official": "Repubblica libanese",
      "common": "Libano"
    },
    "jpn": {
      "official": "レバノン共和国",
      "common": "レバノン"
    },
    "nld": {
      "official": "Libanese Republiek",
      "common": "Libanon"
    },
    "por": {
      "official": "República Libanesa",
      "common": "Líbano"
    },
    "rus": {
      "official": "Ливанская Республика",
      "common": "Ливан"
    },
    "spa": {
      "official": "República Libanesa",
      "common": "Líbano"
    },
    "fin": {
      "official": "Libanonin tasavalta",
      "common": "Libanon"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/lebanon",
  "currency": [
    "LBP"
  ],
  "callingCode": [
    "961"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "LB",
    "ccn3": "422",
    "cca3": "LBN",
    "cioc": "LIB"
  }
}
},{}],122:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Lesotho",
    "official": "Kingdom of Lesotho",
    "native": {
      "eng": {
        "official": "Kingdom of Lesotho",
        "common": "Lesotho"
      },
      "sot": {
        "official": "Kingdom of Lesotho",
        "common": "Lesotho"
      }
    }
  },
  "altSpellings": [
    "LS",
    "Kingdom of Lesotho",
    "Muso oa Lesotho"
  ],
  "area": 30355,
  "borders": [
    "ZAF"
  ],
  "capital": "Maseru",
  "demonym": "Mosotho",
  "languages": {
    "eng": "English",
    "sot": "Sotho"
  },
  "latlng": [
    -29.5,
    28.5
  ],
  "nativeName": "Lesotho",
  "population": 2098000,
  "region": "Africa",
  "subregion": "Southern Africa",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".ls"
  ],
  "translations": {
    "deu": {
      "official": "Königreich Lesotho",
      "common": "Lesotho"
    },
    "fra": {
      "official": "Royaume du Lesotho",
      "common": "Lesotho"
    },
    "hrv": {
      "official": "Kraljevina Lesoto",
      "common": "Lesoto"
    },
    "ita": {
      "official": "Regno del Lesotho",
      "common": "Lesotho"
    },
    "jpn": {
      "official": "レソト王国",
      "common": "レソト"
    },
    "nld": {
      "official": "Koninkrijk Lesotho",
      "common": "Lesotho"
    },
    "por": {
      "official": "Reino do Lesoto",
      "common": "Lesoto"
    },
    "rus": {
      "official": "Королевство Лесото",
      "common": "Лесото"
    },
    "spa": {
      "official": "Reino de Lesotho",
      "common": "Lesotho"
    },
    "fin": {
      "official": "Lesothon kuningaskunta",
      "common": "Lesotho"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/lesotho",
  "currency": [
    "LSL",
    "ZAR"
  ],
  "callingCode": [
    "266"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "LS",
    "ccn3": "426",
    "cca3": "LSO",
    "cioc": "LES"
  }
}
},{}],123:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Liberia",
    "official": "Republic of Liberia",
    "native": {
      "eng": {
        "official": "Republic of Liberia",
        "common": "Liberia"
      }
    }
  },
  "altSpellings": [
    "LR",
    "Republic of Liberia"
  ],
  "area": 111369,
  "borders": [
    "GIN",
    "CIV",
    "SLE"
  ],
  "capital": "Monrovia",
  "demonym": "Liberian",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    6.5,
    -9.5
  ],
  "nativeName": "Liberia",
  "population": 4397000,
  "region": "Africa",
  "subregion": "Western Africa",
  "timezones": [
    "UTC"
  ],
  "tld": [
    ".lr"
  ],
  "translations": {
    "deu": {
      "official": "Republik Liberia",
      "common": "Liberia"
    },
    "fra": {
      "official": "République du Libéria",
      "common": "Liberia"
    },
    "hrv": {
      "official": "Republika Liberija",
      "common": "Liberija"
    },
    "ita": {
      "official": "Repubblica di Liberia",
      "common": "Liberia"
    },
    "jpn": {
      "official": "リベリア共和国",
      "common": "リベリア"
    },
    "nld": {
      "official": "Republiek Liberia",
      "common": "Liberia"
    },
    "por": {
      "official": "República da Libéria",
      "common": "Libéria"
    },
    "rus": {
      "official": "Республика Либерия",
      "common": "Либерия"
    },
    "spa": {
      "official": "República de Liberia",
      "common": "Liberia"
    },
    "fin": {
      "official": "Liberian tasavalta",
      "common": "Liberia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/liberia",
  "currency": [
    "LRD"
  ],
  "callingCode": [
    "231"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "LR",
    "ccn3": "430",
    "cca3": "LBR",
    "cioc": "LBR"
  }
}
},{}],124:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Libya",
    "official": "State of Libya",
    "native": {
      "ara": {
        "official": "الدولة ليبيا",
        "common": "‏ليبيا"
      }
    }
  },
  "altSpellings": [
    "LY",
    "State of Libya",
    "Dawlat Libya"
  ],
  "area": 1759540,
  "borders": [
    "DZA",
    "TCD",
    "EGY",
    "NER",
    "SDN",
    "TUN"
  ],
  "capital": "Tripoli",
  "demonym": "Libyan",
  "languages": {
    "ara": "Arabic"
  },
  "latlng": [
    25,
    17
  ],
  "nativeName": "‏ليبيا",
  "population": 6253000,
  "region": "Africa",
  "subregion": "Northern Africa",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".ly"
  ],
  "translations": {
    "deu": {
      "official": "Staat Libyen",
      "common": "Libyen"
    },
    "fra": {
      "official": "Grande République arabe libyenne populaire et socialiste",
      "common": "Libye"
    },
    "hrv": {
      "official": "Država Libiji",
      "common": "Libija"
    },
    "ita": {
      "official": "Stato della Libia",
      "common": "Libia"
    },
    "jpn": {
      "official": "リビアの国家",
      "common": "リビア"
    },
    "nld": {
      "official": "Staat van Libië",
      "common": "Libië"
    },
    "por": {
      "official": "Estado da Líbia",
      "common": "Líbia"
    },
    "rus": {
      "official": "Государство Ливии",
      "common": "Ливия"
    },
    "spa": {
      "official": "Estado de Libia",
      "common": "Libia"
    },
    "fin": {
      "official": "Libyan valtio",
      "common": "Libya"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/libya",
  "currency": [
    "LYD"
  ],
  "callingCode": [
    "218"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "LY",
    "ccn3": "434",
    "cca3": "LBY",
    "cioc": "LBA"
  }
}
},{}],125:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Liechtenstein",
    "official": "Principality of Liechtenstein",
    "native": {
      "deu": {
        "official": "Fürstentum Liechtenstein",
        "common": "Liechtenstein"
      }
    }
  },
  "altSpellings": [
    "LI",
    "Principality of Liechtenstein",
    "Fürstentum Liechtenstein"
  ],
  "area": 160,
  "borders": [
    "AUT",
    "CHE"
  ],
  "capital": "Vaduz",
  "demonym": "Liechtensteiner",
  "languages": {
    "deu": "German"
  },
  "latlng": [
    47.26666666,
    9.53333333
  ],
  "nativeName": "Liechtenstein",
  "population": 37132,
  "region": "Europe",
  "subregion": "Western Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".li"
  ],
  "translations": {
    "deu": {
      "official": "Fürstentum Liechtenstein",
      "common": "Liechtenstein"
    },
    "fra": {
      "official": "Principauté du Liechtenstein",
      "common": "Liechtenstein"
    },
    "hrv": {
      "official": "Kneževina Lihtenštajn",
      "common": "Lihtenštajn"
    },
    "ita": {
      "official": "Principato del Liechtenstein",
      "common": "Liechtenstein"
    },
    "jpn": {
      "official": "リヒテンシュタイン公国",
      "common": "リヒテンシュタイン"
    },
    "nld": {
      "official": "Vorstendom Liechtenstein",
      "common": "Liechtenstein"
    },
    "por": {
      "official": "Principado de Liechtenstein",
      "common": "Liechtenstein"
    },
    "rus": {
      "official": "Княжество Лихтенштейн",
      "common": "Лихтенштейн"
    },
    "spa": {
      "official": "Principado de Liechtenstein",
      "common": "Liechtenstein"
    },
    "fin": {
      "official": "Liechensteinin ruhtinaskunta",
      "common": "Liechenstein"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/liechtenstein",
  "currency": [
    "CHF"
  ],
  "callingCode": [
    "423"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "LI",
    "ccn3": "438",
    "cca3": "LIE",
    "cioc": "LIE"
  }
}
},{}],126:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Lithuania",
    "official": "Republic of Lithuania",
    "native": {
      "lit": {
        "official": "Lietuvos Respublikos",
        "common": "Lietuva"
      }
    }
  },
  "altSpellings": [
    "LT",
    "Republic of Lithuania",
    "Lietuvos Respublika"
  ],
  "area": 65300,
  "borders": [
    "BLR",
    "LVA",
    "POL",
    "RUS"
  ],
  "capital": "Vilnius",
  "demonym": "Lithuanian",
  "languages": {
    "lit": "Lithuanian"
  },
  "latlng": [
    56,
    24
  ],
  "nativeName": "Lietuva",
  "population": 2927310,
  "region": "Europe",
  "subregion": "Northern Europe",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".lt"
  ],
  "translations": {
    "deu": {
      "official": "Republik Litauen",
      "common": "Litauen"
    },
    "fra": {
      "official": "République de Lituanie",
      "common": "Lituanie"
    },
    "hrv": {
      "official": "Republika Litva",
      "common": "Litva"
    },
    "ita": {
      "official": "Repubblica di Lituania",
      "common": "Lituania"
    },
    "jpn": {
      "official": "リトアニア共和国",
      "common": "リトアニア"
    },
    "nld": {
      "official": "Republiek Litouwen",
      "common": "Litouwen"
    },
    "por": {
      "official": "República da Lituânia",
      "common": "Lituânia"
    },
    "rus": {
      "official": "Литовская Республика",
      "common": "Литва"
    },
    "spa": {
      "official": "República de Lituania",
      "common": "Lituania"
    },
    "fin": {
      "official": "Liettuan tasavalta",
      "common": "Liettua"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/lithuania",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "370"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "LT",
    "ccn3": "440",
    "cca3": "LTU",
    "cioc": "LTU"
  }
}
},{}],127:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Luxembourg",
    "official": "Grand Duchy of Luxembourg",
    "native": {
      "deu": {
        "official": "Großherzogtum Luxemburg",
        "common": "Luxemburg"
      },
      "fra": {
        "official": "Grand-Duché de Luxembourg",
        "common": "Luxembourg"
      },
      "ltz": {
        "official": "Groussherzogtum Lëtzebuerg",
        "common": "Lëtzebuerg"
      }
    }
  },
  "altSpellings": [
    "LU",
    "Grand Duchy of Luxembourg",
    "Grand-Duché de Luxembourg",
    "Großherzogtum Luxemburg",
    "Groussherzogtum Lëtzebuerg"
  ],
  "area": 2586,
  "borders": [
    "BEL",
    "FRA",
    "DEU"
  ],
  "capital": "Luxembourg",
  "demonym": "Luxembourger",
  "languages": {
    "deu": "German",
    "fra": "French",
    "ltz": "Luxembourgish"
  },
  "latlng": [
    49.75,
    6.16666666
  ],
  "nativeName": "Luxembourg",
  "population": 549700,
  "region": "Europe",
  "subregion": "Western Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".lu"
  ],
  "translations": {
    "deu": {
      "official": "Großherzogtum Luxemburg,",
      "common": "Luxemburg"
    },
    "fra": {
      "official": "Grand-Duché de Luxembourg",
      "common": "Luxembourg"
    },
    "hrv": {
      "official": "Veliko Vojvodstvo Luksemburg",
      "common": "Luksemburg"
    },
    "ita": {
      "official": "Granducato di Lussemburgo",
      "common": "Lussemburgo"
    },
    "jpn": {
      "official": "ルクセンブルク大公国",
      "common": "ルクセンブルク"
    },
    "nld": {
      "official": "Groothertogdom Luxemburg",
      "common": "Luxemburg"
    },
    "por": {
      "official": "Grão-Ducado do Luxemburgo",
      "common": "Luxemburgo"
    },
    "rus": {
      "official": "Великое Герцогство Люксембург",
      "common": "Люксембург"
    },
    "spa": {
      "official": "Gran Ducado de Luxemburgo",
      "common": "Luxemburgo"
    },
    "fin": {
      "official": "Luxemburgin suurherttuakunta",
      "common": "Luxemburg"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/luxembourg",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "352"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "LU",
    "ccn3": "442",
    "cca3": "LUX",
    "cioc": "LUX"
  }
}
},{}],128:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Macau",
    "official": "Macao Special Administrative Region of the People's Republic of China",
    "native": {
      "por": {
        "official": "Região Administrativa Especial de Macau da República Popular da China",
        "common": "Macau"
      },
      "zho": {
        "official": "澳门特别行政区中国人民共和国",
        "common": "澳門"
      }
    }
  },
  "altSpellings": [
    "MO",
    "澳门",
    "Macao",
    "Macao Special Administrative Region of the People's Republic of China",
    "中華人民共和國澳門特別行政區",
    "Região Administrativa Especial de Macau da República Popular da China"
  ],
  "area": 30,
  "borders": [
    "CHN"
  ],
  "capital": "",
  "demonym": "Chinese",
  "languages": {
    "por": "Portuguese",
    "zho": "Chinese"
  },
  "latlng": [
    22.16666666,
    113.55
  ],
  "nativeName": "澳門",
  "population": 631000,
  "region": "Asia",
  "subregion": "Eastern Asia",
  "timezones": [
    "UTC+08:00"
  ],
  "tld": [
    ".mo"
  ],
  "translations": {
    "deu": {
      "official": "Sonderverwaltungsregion Macau der Volksrepublik China",
      "common": "Macao"
    },
    "fra": {
      "official": "Région administrative spéciale de Macao de la République populaire de Chine",
      "common": "Macao"
    },
    "hrv": {
      "official": "Makao Posebnog upravnog područjaNarodne Republike Kine",
      "common": "Makao"
    },
    "ita": {
      "official": "Macao Regione amministrativa speciale della Repubblica Popolare Cinese",
      "common": "Macao"
    },
    "jpn": {
      "official": "中華人民共和国マカオ特別行政区",
      "common": "マカオ"
    },
    "nld": {
      "official": "Speciale Administratieve Regio Macau van de Volksrepubliek China",
      "common": "Macao"
    },
    "por": {
      "official": "Macau Região Administrativa Especial da República Popular da China",
      "common": "Macau"
    },
    "rus": {
      "official": "Специальный административный район Макао Китайской Народной Республики Китай",
      "common": "Макао"
    },
    "spa": {
      "official": "Macao, Región Administrativa Especial de la República Popular China",
      "common": "Macao"
    },
    "fin": {
      "official": "Macaon Kiinan kansantasavallan erityishallintoalue",
      "common": "Macao"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/macau",
  "currency": [
    "MOP"
  ],
  "callingCode": [
    "853"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "MO",
    "ccn3": "446",
    "cca3": "MAC",
    "cioc": ""
  }
}
},{}],129:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Macedonia",
    "official": "Republic of Macedonia",
    "native": {
      "mkd": {
        "official": "Република Македонија",
        "common": "Македонија"
      }
    }
  },
  "tld": [
    ".mk"
  ],
  "currency": [
    "MKD"
  ],
  "callingCode": [
    "389"
  ],
  "capital": "Skopje",
  "altSpellings": [
    "MK",
    "Macedonia, the Former Yugoslav Republic of",
    "Republic of Macedonia",
    "Република Македонија"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "mkd": "Macedonian"
  },
  "translations": {
    "deu": {
      "official": "Republik Mazedonien",
      "common": "Mazedonien"
    },
    "fra": {
      "official": "République de Macédoine",
      "common": "Macédoine"
    },
    "hrv": {
      "official": "Republika Makedonija",
      "common": "Makedonija"
    },
    "ita": {
      "official": "Repubblica di Macedonia",
      "common": "Macedonia"
    },
    "jpn": {
      "official": "マケドニア共和国",
      "common": "マケドニア旧ユーゴスラビア共和国"
    },
    "nld": {
      "official": "Republic of Macedonia",
      "common": "Macedonië"
    },
    "por": {
      "official": "República da Macedónia",
      "common": "Macedónia"
    },
    "rus": {
      "official": "Республика Македония",
      "common": "Республика Македония"
    },
    "spa": {
      "official": "República de Macedonia",
      "common": "Macedonia"
    },
    "fin": {
      "official": "Makedonian tasavalta",
      "common": "Makedonia"
    }
  },
  "latlng": [
    41.83333333,
    22
  ],
  "demonym": "Macedonian",
  "landlocked": true,
  "borders": [
    "ALB",
    "BGR",
    "GRC",
    "KOS",
    "SRB"
  ],
  "area": 25713,
  "codes": {
    "cca2": "MK",
    "ccn3": "807",
    "cca3": "MKD",
    "cioc": "MKD"
  }
}
},{}],130:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Madagascar",
    "official": "Republic of Madagascar",
    "native": {
      "fra": {
        "official": "République de Madagascar",
        "common": "Madagascar"
      },
      "mlg": {
        "official": "Repoblikan'i Madagasikara",
        "common": "Madagasikara"
      }
    }
  },
  "altSpellings": [
    "MG",
    "Republic of Madagascar",
    "Repoblikan'i Madagasikara",
    "République de Madagascar"
  ],
  "area": 587041,
  "borders": [],
  "capital": "Antananarivo",
  "demonym": "Malagasy",
  "languages": {
    "fra": "French",
    "mlg": "Malagasy"
  },
  "latlng": [
    -20,
    47
  ],
  "nativeName": "Madagasikara",
  "population": 21842167,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".mg"
  ],
  "translations": {
    "deu": {
      "official": "Republik Madagaskar",
      "common": "Madagaskar"
    },
    "fra": {
      "official": "République de Madagascar",
      "common": "Madagascar"
    },
    "hrv": {
      "official": "Republika Madagaskar",
      "common": "Madagaskar"
    },
    "ita": {
      "official": "Repubblica del Madagascar",
      "common": "Madagascar"
    },
    "jpn": {
      "official": "マダガスカル共和国",
      "common": "マダガスカル"
    },
    "nld": {
      "official": "Republiek Madagaskar",
      "common": "Madagaskar"
    },
    "por": {
      "official": "República de Madagáscar",
      "common": "Madagáscar"
    },
    "rus": {
      "official": "Республика Мадагаскар",
      "common": "Мадагаскар"
    },
    "spa": {
      "official": "República de Madagascar",
      "common": "Madagascar"
    },
    "fin": {
      "official": "Madagaskarin tasavalta",
      "common": "Madagaskar"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/madagascar",
  "currency": [
    "MGA"
  ],
  "callingCode": [
    "261"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "MG",
    "ccn3": "450",
    "cca3": "MDG",
    "cioc": "MAD"
  }
}
},{}],131:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Malawi",
    "official": "Republic of Malawi",
    "native": {
      "eng": {
        "official": "Republic of Malawi",
        "common": "Malawi"
      },
      "nya": {
        "official": "Chalo cha Malawi, Dziko la Malaŵi",
        "common": "Malaŵi"
      }
    }
  },
  "altSpellings": [
    "MW",
    "Republic of Malawi"
  ],
  "area": 118484,
  "borders": [
    "MOZ",
    "TZA",
    "ZMB"
  ],
  "capital": "Lilongwe",
  "demonym": "Malawian",
  "languages": {
    "eng": "English",
    "nya": "Chewa"
  },
  "latlng": [
    -13.5,
    34
  ],
  "nativeName": "Malawi",
  "population": 15805239,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".mw"
  ],
  "translations": {
    "deu": {
      "official": "Republik Malawi",
      "common": "Malawi"
    },
    "fra": {
      "official": "République du Malawi",
      "common": "Malawi"
    },
    "hrv": {
      "official": "Republika Malavi",
      "common": "Malavi"
    },
    "ita": {
      "official": "Repubblica del Malawi",
      "common": "Malawi"
    },
    "jpn": {
      "official": "マラウイ共和国",
      "common": "マラウイ"
    },
    "nld": {
      "official": "Republiek Malawi",
      "common": "Malawi"
    },
    "por": {
      "official": "República do Malawi",
      "common": "Malawi"
    },
    "rus": {
      "official": "Республика Малави",
      "common": "Малави"
    },
    "spa": {
      "official": "República de Malawi",
      "common": "Malawi"
    },
    "fin": {
      "official": "Malawin tasavalta",
      "common": "Malawi"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/malawi",
  "currency": [
    "MWK"
  ],
  "callingCode": [
    "265"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "MW",
    "ccn3": "454",
    "cca3": "MWI",
    "cioc": "MAW"
  }
}
},{}],132:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Malaysia",
    "official": "Malaysia",
    "native": {
      "eng": {
        "official": "Malaysia",
        "common": "Malaysia"
      },
      "msa": {
        "official": "مليسيا",
        "common": "مليسيا"
      }
    }
  },
  "altSpellings": [
    "MY"
  ],
  "area": 330803,
  "borders": [
    "BRN",
    "IDN",
    "THA"
  ],
  "capital": "Kuala Lumpur",
  "demonym": "Malaysian",
  "languages": {
    "eng": "English",
    "msa": "Malay"
  },
  "latlng": [
    2.5,
    112.5
  ],
  "nativeName": "Malaysia",
  "population": 30430500,
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "timezones": [
    "UTC+08:00"
  ],
  "tld": [
    ".my"
  ],
  "translations": {
    "deu": {
      "official": "Malaysia",
      "common": "Malaysia"
    },
    "fra": {
      "official": "Fédération de Malaisie",
      "common": "Malaisie"
    },
    "hrv": {
      "official": "Malezija",
      "common": "Malezija"
    },
    "ita": {
      "official": "Malaysia",
      "common": "Malesia"
    },
    "jpn": {
      "official": "マレーシア",
      "common": "マレーシア"
    },
    "nld": {
      "official": "Maleisië",
      "common": "Maleisië"
    },
    "por": {
      "official": "Malásia",
      "common": "Malásia"
    },
    "rus": {
      "official": "Малайзия",
      "common": "Малайзия"
    },
    "spa": {
      "official": "Malasia",
      "common": "Malasia"
    },
    "fin": {
      "official": "Malesia",
      "common": "Malesia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/malaysia",
  "currency": [
    "MYR"
  ],
  "callingCode": [
    "60"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "MY",
    "ccn3": "458",
    "cca3": "MYS",
    "cioc": "MAS"
  }
}
},{}],133:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Maldives",
    "official": "Republic of the Maldives",
    "native": {
      "div": {
        "official": "ދިވެހިރާއްޖޭގެ ޖުމްހޫރިއްޔާ",
        "common": "ދިވެހިރާއްޖޭގެ"
      }
    }
  },
  "altSpellings": [
    "MV",
    "Maldive Islands",
    "Republic of the Maldives",
    "Dhivehi Raajjeyge Jumhooriyya"
  ],
  "area": 300,
  "borders": [],
  "capital": "Malé",
  "demonym": "Maldivan",
  "languages": {
    "div": "Maldivian"
  },
  "latlng": [
    3.25,
    73
  ],
  "nativeName": "Maldives",
  "population": 341256,
  "region": "Asia",
  "subregion": "Southern Asia",
  "timezones": [
    "UTC+05:00"
  ],
  "tld": [
    ".mv"
  ],
  "translations": {
    "deu": {
      "official": "Republik Malediven",
      "common": "Malediven"
    },
    "fra": {
      "official": "République des Maldives",
      "common": "Maldives"
    },
    "hrv": {
      "official": "Republika Maldivi",
      "common": "Maldivi"
    },
    "ita": {
      "official": "Repubblica delle Maldive",
      "common": "Maldive"
    },
    "jpn": {
      "official": "モルディブ共和国",
      "common": "モルディブ"
    },
    "nld": {
      "official": "Republiek van de Malediven",
      "common": "Maldiven"
    },
    "por": {
      "official": "República das Maldivas",
      "common": "Maldivas"
    },
    "rus": {
      "official": "Республика Мальдивы",
      "common": "Мальдивы"
    },
    "spa": {
      "official": "República de las Maldivas",
      "common": "Maldivas"
    },
    "fin": {
      "official": "Malediivien tasavalta",
      "common": "Malediivit"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/maldives",
  "currency": [
    "MVR"
  ],
  "callingCode": [
    "960"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "MV",
    "ccn3": "462",
    "cca3": "MDV",
    "cioc": "MDV"
  }
}
},{}],134:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Mali",
    "official": "Republic of Mali",
    "native": {
      "fra": {
        "official": "République du Mali",
        "common": "Mali"
      }
    }
  },
  "altSpellings": [
    "ML",
    "Republic of Mali",
    "République du Mali"
  ],
  "area": 1240192,
  "borders": [
    "DZA",
    "BFA",
    "GIN",
    "CIV",
    "MRT",
    "NER",
    "SEN"
  ],
  "capital": "Bamako",
  "demonym": "Malian",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    17,
    -4
  ],
  "nativeName": "Mali",
  "population": 15768000,
  "region": "Africa",
  "subregion": "Western Africa",
  "timezones": [
    "UTC"
  ],
  "tld": [
    ".ml"
  ],
  "translations": {
    "deu": {
      "official": "Republik Mali",
      "common": "Mali"
    },
    "fra": {
      "official": "République du Mali",
      "common": "Mali"
    },
    "hrv": {
      "official": "Republika Mali",
      "common": "Mali"
    },
    "ita": {
      "official": "Repubblica del Mali",
      "common": "Mali"
    },
    "jpn": {
      "official": "マリ共和国",
      "common": "マリ"
    },
    "nld": {
      "official": "Republiek Mali",
      "common": "Mali"
    },
    "por": {
      "official": "República do Mali",
      "common": "Mali"
    },
    "rus": {
      "official": "Республика Мали",
      "common": "Мали"
    },
    "spa": {
      "official": "República de Malí",
      "common": "Mali"
    },
    "fin": {
      "official": "Malin tasavalta",
      "common": "Mali"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/mali",
  "currency": [
    "XOF"
  ],
  "callingCode": [
    "223"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "ML",
    "ccn3": "466",
    "cca3": "MLI",
    "cioc": "MLI"
  }
}
},{}],135:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Malta",
    "official": "Republic of Malta",
    "native": {
      "eng": {
        "official": "Republic of Malta",
        "common": "Malta"
      },
      "mlt": {
        "official": "Repubblika ta ' Malta",
        "common": "Malta"
      }
    }
  },
  "altSpellings": [
    "MT",
    "Republic of Malta",
    "Repubblika ta' Malta"
  ],
  "area": 316,
  "borders": [],
  "capital": "Valletta",
  "demonym": "Maltese",
  "languages": {
    "eng": "English",
    "mlt": "Maltese"
  },
  "latlng": [
    35.83333333,
    14.58333333
  ],
  "nativeName": "Malta",
  "population": 416055,
  "region": "Europe",
  "subregion": "Southern Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".mt"
  ],
  "translations": {
    "deu": {
      "official": "Republik Malta",
      "common": "Malta"
    },
    "fra": {
      "official": "République de Malte",
      "common": "Malte"
    },
    "hrv": {
      "official": "Republika Malta",
      "common": "Malta"
    },
    "ita": {
      "official": "Repubblica di Malta",
      "common": "Malta"
    },
    "jpn": {
      "official": "マルタ共和国",
      "common": "マルタ"
    },
    "nld": {
      "official": "Republiek Malta",
      "common": "Malta"
    },
    "por": {
      "official": "República de Malta",
      "common": "Malta"
    },
    "rus": {
      "official": "Республика Мальта",
      "common": "Мальта"
    },
    "spa": {
      "official": "República de Malta",
      "common": "Malta"
    },
    "fin": {
      "official": "Maltan tasavalta",
      "common": "Malta"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/malta",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "356"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "MT",
    "ccn3": "470",
    "cca3": "MLT",
    "cioc": "MLT"
  }
}
},{}],136:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Marshall Islands",
    "official": "Republic of the Marshall Islands",
    "native": {
      "eng": {
        "official": "Republic of the Marshall Islands",
        "common": "Marshall Islands"
      },
      "mah": {
        "official": "Republic of the Marshall Islands",
        "common": "M̧ajeļ"
      }
    }
  },
  "altSpellings": [
    "MH",
    "Republic of the Marshall Islands",
    "Aolepān Aorōkin M̧ajeļ"
  ],
  "area": 181,
  "borders": [],
  "capital": "Majuro",
  "demonym": "Marshallese",
  "languages": {
    "eng": "English",
    "mah": "Marshallese"
  },
  "latlng": [
    9,
    168
  ],
  "nativeName": "M̧ajeļ",
  "population": 56086,
  "region": "Oceania",
  "subregion": "Micronesia",
  "timezones": [
    "UTC+12:00"
  ],
  "tld": [
    ".mh"
  ],
  "translations": {
    "deu": {
      "official": "Republik der Marshall-Inseln",
      "common": "Marshallinseln"
    },
    "fra": {
      "official": "République des Îles Marshall",
      "common": "Îles Marshall"
    },
    "hrv": {
      "official": "Republika Maršalovi Otoci",
      "common": "Maršalovi Otoci"
    },
    "ita": {
      "official": "Repubblica delle Isole Marshall",
      "common": "Isole Marshall"
    },
    "jpn": {
      "official": "マーシャル諸島共和国",
      "common": "マーシャル諸島"
    },
    "nld": {
      "official": "Republiek van de Marshall-eilanden",
      "common": "Marshalleilanden"
    },
    "por": {
      "official": "República das Ilhas Marshall",
      "common": "Ilhas Marshall"
    },
    "rus": {
      "official": "Республика Маршалловы острова",
      "common": "Маршалловы Острова"
    },
    "spa": {
      "official": "República de las Islas Marshall",
      "common": "Islas Marshall"
    },
    "fin": {
      "official": "Marshallinsaarten tasavalta",
      "common": "Marshallinsaaret"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/marshall_islands",
  "currency": [
    "USD"
  ],
  "callingCode": [
    "692"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "MH",
    "ccn3": "584",
    "cca3": "MHL",
    "cioc": "MHL"
  }
}
},{}],137:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Martinique",
    "official": "Martinique",
    "native": {
      "fra": {
        "official": "Martinique",
        "common": "Martinique"
      }
    }
  },
  "altSpellings": [
    "MQ"
  ],
  "area": 1128,
  "borders": [],
  "capital": "Fort-de-France",
  "demonym": "French",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    14.666667,
    -61
  ],
  "nativeName": "Martinique",
  "population": 386486,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": null,
  "tld": [
    ".mq"
  ],
  "translations": {
    "deu": {
      "official": "Martinique",
      "common": "Martinique"
    },
    "fra": {
      "official": "Martinique",
      "common": "Martinique"
    },
    "hrv": {
      "official": "Martinique",
      "common": "Martinique"
    },
    "ita": {
      "official": "Martinique",
      "common": "Martinica"
    },
    "jpn": {
      "official": "マルティニーク島",
      "common": "マルティニーク"
    },
    "nld": {
      "official": "Martinique",
      "common": "Martinique"
    },
    "por": {
      "official": "Martinique",
      "common": "Martinica"
    },
    "rus": {
      "official": "Мартиника",
      "common": "Мартиника"
    },
    "spa": {
      "official": "Martinica",
      "common": "Martinica"
    },
    "fin": {
      "official": "Martinique",
      "common": "Martinique"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/martinique",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "596"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "MQ",
    "ccn3": "474",
    "cca3": "MTQ",
    "cioc": ""
  }
}
},{}],138:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Mauritania",
    "official": "Islamic Republic of Mauritania",
    "native": {
      "ara": {
        "official": "الجمهورية الإسلامية الموريتانية",
        "common": "موريتانيا"
      }
    }
  },
  "altSpellings": [
    "MR",
    "Islamic Republic of Mauritania",
    "al-Jumhūriyyah al-ʾIslāmiyyah al-Mūrītāniyyah"
  ],
  "area": 1030700,
  "borders": [
    "DZA",
    "MLI",
    "SEN",
    "ESH"
  ],
  "capital": "Nouakchott",
  "demonym": "Mauritanian",
  "languages": {
    "ara": "Arabic"
  },
  "latlng": [
    20,
    -12
  ],
  "nativeName": "موريتانيا",
  "population": 3545620,
  "region": "Africa",
  "subregion": "Western Africa",
  "timezones": [
    "UTC"
  ],
  "tld": [
    ".mr"
  ],
  "translations": {
    "deu": {
      "official": "Islamische Republik Mauretanien",
      "common": "Mauretanien"
    },
    "fra": {
      "official": "République islamique de Mauritanie",
      "common": "Mauritanie"
    },
    "hrv": {
      "official": "Islamska Republika Mauritanija",
      "common": "Mauritanija"
    },
    "ita": {
      "official": "Repubblica islamica di Mauritania",
      "common": "Mauritania"
    },
    "jpn": {
      "official": "モーリタニア·イスラム共和国",
      "common": "モーリタニア"
    },
    "nld": {
      "official": "Islamitische Republiek Mauritanië",
      "common": "Mauritanië"
    },
    "por": {
      "official": "República Islâmica da Mauritânia",
      "common": "Mauritânia"
    },
    "rus": {
      "official": "Исламская Республика Мавритания",
      "common": "Мавритания"
    },
    "spa": {
      "official": "República Islámica de Mauritania",
      "common": "Mauritania"
    },
    "fin": {
      "official": "Mauritanian islamilainen tasavalta",
      "common": "Mauritania"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/mauritania",
  "currency": [
    "MRO"
  ],
  "callingCode": [
    "222"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "MR",
    "ccn3": "478",
    "cca3": "MRT",
    "cioc": "MTN"
  }
}
},{}],139:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Mauritius",
    "official": "Republic of Mauritius",
    "native": {
      "eng": {
        "official": "Republic of Mauritius",
        "common": "Mauritius"
      },
      "fra": {
        "official": "République de Maurice",
        "common": "Maurice"
      },
      "mfe": {
        "official": "Republik Moris",
        "common": "Moris"
      }
    }
  },
  "altSpellings": [
    "MU",
    "Republic of Mauritius",
    "République de Maurice"
  ],
  "area": 2040,
  "borders": [],
  "capital": "Port Louis",
  "demonym": "Mauritian",
  "languages": {
    "eng": "English",
    "fra": "French",
    "mfe": "Mauritian Creole"
  },
  "latlng": [
    -20.28333333,
    57.55
  ],
  "nativeName": "Maurice",
  "population": 1261208,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": [
    "UTC+04:00"
  ],
  "tld": [
    ".mu"
  ],
  "translations": {
    "deu": {
      "official": "Republik Mauritius",
      "common": "Mauritius"
    },
    "fra": {
      "official": "République de Maurice",
      "common": "Île Maurice"
    },
    "hrv": {
      "official": "Republika Mauricijus",
      "common": "Mauricijus"
    },
    "ita": {
      "official": "Repubblica di Mauritius",
      "common": "Mauritius"
    },
    "jpn": {
      "official": "モーリシャス共和国",
      "common": "モーリシャス"
    },
    "nld": {
      "official": "Republiek Mauritius",
      "common": "Mauritius"
    },
    "por": {
      "official": "República das Maurícias",
      "common": "Maurício"
    },
    "rus": {
      "official": "Республика Маврикий",
      "common": "Маврикий"
    },
    "spa": {
      "official": "República de Mauricio",
      "common": "Mauricio"
    },
    "fin": {
      "official": "Mauritiuksen tasavalta",
      "common": "Mauritius"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/mauritius",
  "currency": [
    "MUR"
  ],
  "callingCode": [
    "230"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "MU",
    "ccn3": "480",
    "cca3": "MUS",
    "cioc": "MRI"
  }
}
},{}],140:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Mayotte",
    "official": "Department of Mayotte",
    "native": {
      "fra": {
        "official": "Département de Mayotte",
        "common": "Mayotte"
      }
    }
  },
  "altSpellings": [
    "YT",
    "Department of Mayotte",
    "Département de Mayotte"
  ],
  "area": 374,
  "borders": [],
  "capital": "Mamoudzou",
  "demonym": "Mahoran",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    -12.83333333,
    45.16666666
  ],
  "nativeName": "Mayotte",
  "population": 212645,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": null,
  "tld": [
    ".yt"
  ],
  "translations": {
    "deu": {
      "official": "Übersee-Département Mayotte",
      "common": "Mayotte"
    },
    "fra": {
      "official": "Département de Mayotte",
      "common": "Mayotte"
    },
    "hrv": {
      "official": "Odjel Mayotte",
      "common": "Mayotte"
    },
    "ita": {
      "official": "Dipartimento di Mayotte",
      "common": "Mayotte"
    },
    "jpn": {
      "official": "マヨット科",
      "common": "マヨット"
    },
    "nld": {
      "official": "Afdeling Mayotte",
      "common": "Mayotte"
    },
    "por": {
      "official": "Departamento de Mayotte",
      "common": "Mayotte"
    },
    "rus": {
      "official": "Департамент Майотта",
      "common": "Майотта"
    },
    "spa": {
      "official": "Departamento de Mayotte",
      "common": "Mayotte"
    },
    "fin": {
      "official": "Mayotte",
      "common": "Mayotte"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/mayotte",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "262"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "YT",
    "ccn3": "175",
    "cca3": "MYT",
    "cioc": ""
  }
}
},{}],141:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Mexico",
    "official": "United Mexican States",
    "native": {
      "spa": {
        "official": "Estados Unidos Mexicanos",
        "common": "México"
      }
    }
  },
  "altSpellings": [
    "MX",
    "Mexicanos",
    "United Mexican States",
    "Estados Unidos Mexicanos"
  ],
  "area": 1964375,
  "borders": [
    "BLZ",
    "GTM",
    "USA"
  ],
  "capital": "Mexico City",
  "demonym": "Mexican",
  "languages": {
    "spa": "Spanish"
  },
  "latlng": [
    23,
    -102
  ],
  "nativeName": "México",
  "population": 119713203,
  "region": "Americas",
  "subregion": "Central America",
  "timezones": [
    "UTC−08:00",
    "UTC−07:00",
    "UTC−06:00"
  ],
  "tld": [
    ".mx"
  ],
  "translations": {
    "deu": {
      "official": "Vereinigte Mexikanische Staaten",
      "common": "Mexiko"
    },
    "fra": {
      "official": "États-Unis du Mexique",
      "common": "Mexique"
    },
    "hrv": {
      "official": "Sjedinjene Meksičke Države",
      "common": "Meksiko"
    },
    "ita": {
      "official": "Stati Uniti del Messico",
      "common": "Messico"
    },
    "jpn": {
      "official": "メキシコ合衆国",
      "common": "メキシコ"
    },
    "nld": {
      "official": "Verenigde Mexicaanse Staten",
      "common": "Mexico"
    },
    "por": {
      "official": "Estados Unidos Mexicanos",
      "common": "México"
    },
    "rus": {
      "official": "Мексиканских Соединенных Штатов",
      "common": "Мексика"
    },
    "spa": {
      "official": "Estados Unidos Mexicanos",
      "common": "México"
    },
    "fin": {
      "official": "Meksikon yhdysvallat",
      "common": "Meksiko"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/mexico",
  "currency": [
    "MXN"
  ],
  "callingCode": [
    "52"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "MX",
    "ccn3": "484",
    "cca3": "MEX",
    "cioc": "MEX"
  }
}
},{}],142:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Micronesia",
    "official": "Federated States of Micronesia",
    "native": {
      "eng": {
        "official": "Federated States of Micronesia",
        "common": "Micronesia"
      }
    }
  },
  "tld": [
    ".fm"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "691"
  ],
  "capital": "Palikir",
  "altSpellings": [
    "FM",
    "Federated States of Micronesia",
    "Micronesia, Federated States of"
  ],
  "region": "Oceania",
  "subregion": "Micronesia",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Föderierte Staaten von Mikronesien",
      "common": "Mikronesien"
    },
    "fra": {
      "official": "États fédérés de Micronésie",
      "common": "Micronésie"
    },
    "hrv": {
      "official": "Savezne Države Mikronezije",
      "common": "Mikronezija"
    },
    "ita": {
      "official": "Stati federati di Micronesia",
      "common": "Micronesia"
    },
    "jpn": {
      "official": "ミクロネシア連邦",
      "common": "ミクロネシア連邦"
    },
    "nld": {
      "official": "Federale Staten van Micronesia",
      "common": "Micronesië"
    },
    "por": {
      "official": "Estados Federados da Micronésia",
      "common": "Micronésia"
    },
    "rus": {
      "official": "Федеративные Штаты Микронезии",
      "common": "Федеративные Штаты Микронезии"
    },
    "spa": {
      "official": "Estados Federados de Micronesia",
      "common": "Micronesia"
    },
    "fin": {
      "official": "Mikronesian liittovaltio",
      "common": "Mikronesia"
    }
  },
  "latlng": [
    6.91666666,
    158.25
  ],
  "demonym": "Micronesian",
  "landlocked": false,
  "borders": [],
  "area": 702,
  "codes": {
    "cca2": "FM",
    "ccn3": "583",
    "cca3": "FSM",
    "cioc": "FSM"
  }
}
},{}],143:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Moldova",
    "official": "Republic of Moldova",
    "native": {
      "ron": {
        "official": "Republica Moldova",
        "common": "Moldova"
      }
    }
  },
  "altSpellings": [
    "MD",
    "Moldova, Republic of",
    "Republic of Moldova",
    "Republica Moldova"
  ],
  "area": 33846,
  "borders": [
    "ROU",
    "UKR"
  ],
  "capital": "Chișinău",
  "demonym": "Moldovan",
  "languages": {
    "ron": "Moldavian"
  },
  "latlng": [
    47,
    29
  ],
  "nativeName": "Moldova",
  "population": 3557600,
  "region": "Europe",
  "subregion": "Eastern Europe",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".md"
  ],
  "translations": {
    "deu": {
      "official": "Republik Moldau",
      "common": "Moldawie"
    },
    "fra": {
      "official": "République de Moldavie",
      "common": "Moldavie"
    },
    "hrv": {
      "official": "Moldavija",
      "common": "Moldova"
    },
    "ita": {
      "official": "Repubblica di Moldova",
      "common": "Moldavia"
    },
    "jpn": {
      "official": "モルドバ共和国",
      "common": "モルドバ共和国"
    },
    "nld": {
      "official": "Republiek Moldavië",
      "common": "Moldavië"
    },
    "por": {
      "official": "República da Moldávia",
      "common": "Moldávia"
    },
    "rus": {
      "official": "Молдова",
      "common": "Молдавия"
    },
    "spa": {
      "official": "República de Moldova",
      "common": "Moldavia"
    },
    "fin": {
      "official": "Moldovan tasavalta",
      "common": "Moldova"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/moldova",
  "currency": [
    "MDL"
  ],
  "callingCode": [
    "373"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "MD",
    "ccn3": "498",
    "cca3": "MDA",
    "cioc": "MDA"
  }
}
},{}],144:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Monaco",
    "official": "Principality of Monaco",
    "native": {
      "fra": {
        "official": "Principauté de Monaco",
        "common": "Monaco"
      }
    }
  },
  "altSpellings": [
    "MC",
    "Principality of Monaco",
    "Principauté de Monaco"
  ],
  "area": 2.02,
  "borders": [
    "FRA"
  ],
  "capital": "Monaco",
  "demonym": "Monegasque",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    43.73333333,
    7.4
  ],
  "nativeName": "Monaco",
  "population": 36950,
  "region": "Europe",
  "subregion": "Western Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".mc"
  ],
  "translations": {
    "deu": {
      "official": "Fürstentum Monaco",
      "common": "Monaco"
    },
    "fra": {
      "official": "Principauté de Monaco",
      "common": "Monaco"
    },
    "hrv": {
      "official": "Kneževina Monako",
      "common": "Monako"
    },
    "ita": {
      "official": "Principato di Monaco",
      "common": "Principato di Monaco"
    },
    "jpn": {
      "official": "モナコ公国",
      "common": "モナコ"
    },
    "nld": {
      "official": "Vorstendom Monaco",
      "common": "Monaco"
    },
    "por": {
      "official": "Principado do Mónaco",
      "common": "Mónaco"
    },
    "rus": {
      "official": "Княжество Монако",
      "common": "Монако"
    },
    "spa": {
      "official": "Principado de Mónaco",
      "common": "Mónaco"
    },
    "fin": {
      "official": "Monacon ruhtinaskunta",
      "common": "Monaco"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/monaco",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "377"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "MC",
    "ccn3": "492",
    "cca3": "MCO",
    "cioc": "MON"
  }
}
},{}],145:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Mongolia",
    "official": "Mongolia",
    "native": {
      "mon": {
        "official": "Монгол улс",
        "common": "Монгол улс"
      }
    }
  },
  "altSpellings": [
    "MN"
  ],
  "area": 1564110,
  "borders": [
    "CHN",
    "RUS"
  ],
  "capital": "Ulan Bator",
  "demonym": "Mongolian",
  "languages": {
    "mon": "Mongolian"
  },
  "latlng": [
    46,
    105
  ],
  "nativeName": "Монгол улс",
  "population": 2987733,
  "region": "Asia",
  "subregion": "Eastern Asia",
  "timezones": [
    "UTC+07:00",
    "UTC+08:00"
  ],
  "tld": [
    ".mn"
  ],
  "translations": {
    "deu": {
      "official": "Mongolei",
      "common": "Mongolei"
    },
    "fra": {
      "official": "Mongolie",
      "common": "Mongolie"
    },
    "hrv": {
      "official": "Mongolija",
      "common": "Mongolija"
    },
    "ita": {
      "official": "Mongolia",
      "common": "Mongolia"
    },
    "jpn": {
      "official": "モンゴル",
      "common": "モンゴル"
    },
    "nld": {
      "official": "Mongolië",
      "common": "Mongolië"
    },
    "por": {
      "official": "Mongólia",
      "common": "Mongólia"
    },
    "rus": {
      "official": "Монголия",
      "common": "Монголия"
    },
    "spa": {
      "official": "Mongolia",
      "common": "Mongolia"
    },
    "fin": {
      "official": "Mongolian tasavalta",
      "common": "Mongolia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/mongolia",
  "currency": [
    "MNT"
  ],
  "callingCode": [
    "976"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "MN",
    "ccn3": "496",
    "cca3": "MNG",
    "cioc": "MGL"
  }
}
},{}],146:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Montenegro",
    "official": "Montenegro",
    "native": {
      "srp": {
        "official": "Црна Гора",
        "common": "Црна Гора"
      }
    }
  },
  "tld": [
    ".me"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "382"
  ],
  "capital": "Podgorica",
  "altSpellings": [
    "ME",
    "Crna Gora"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "srp": "Montenegrin"
  },
  "translations": {
    "deu": {
      "official": "Montenegro",
      "common": "Montenegro"
    },
    "fra": {
      "official": "Monténégro",
      "common": "Monténégro"
    },
    "hrv": {
      "official": "Crna Gora",
      "common": "Crna Gora"
    },
    "ita": {
      "official": "Montenegro",
      "common": "Montenegro"
    },
    "jpn": {
      "official": "モンテネグロ",
      "common": "モンテネグロ"
    },
    "nld": {
      "official": "Montenegro",
      "common": "Montenegro"
    },
    "por": {
      "official": "Montenegro",
      "common": "Montenegro"
    },
    "rus": {
      "official": "Черногория",
      "common": "Черногория"
    },
    "spa": {
      "official": "Montenegro",
      "common": "Montenegro"
    },
    "fin": {
      "official": "Montenegro",
      "common": "Montenegro"
    }
  },
  "latlng": [
    42.5,
    19.3
  ],
  "demonym": "Montenegrin",
  "landlocked": false,
  "borders": [
    "ALB",
    "BIH",
    "HRV",
    "KOS",
    "SRB"
  ],
  "area": 13812,
  "codes": {
    "cca2": "ME",
    "ccn3": "499",
    "cca3": "MNE",
    "cioc": "MNE"
  }
}
},{}],147:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Montserrat",
    "official": "Montserrat",
    "native": {
      "eng": {
        "official": "Montserrat",
        "common": "Montserrat"
      }
    }
  },
  "altSpellings": [
    "MS"
  ],
  "area": 102,
  "borders": [],
  "capital": "Plymouth",
  "demonym": "Montserratian",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    16.75,
    -62.2
  ],
  "nativeName": "Montserrat",
  "population": 4922,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": null,
  "tld": [
    ".ms"
  ],
  "translations": {
    "deu": {
      "official": "Montserrat",
      "common": "Montserrat"
    },
    "fra": {
      "official": "Montserrat",
      "common": "Montserrat"
    },
    "hrv": {
      "official": "Montserrat",
      "common": "Montserrat"
    },
    "ita": {
      "official": "Montserrat",
      "common": "Montserrat"
    },
    "jpn": {
      "official": "モントセラト",
      "common": "モントセラト"
    },
    "nld": {
      "official": "Montserrat",
      "common": "Montserrat"
    },
    "por": {
      "official": "Montserrat",
      "common": "Montserrat"
    },
    "rus": {
      "official": "Монтсеррат",
      "common": "Монтсеррат"
    },
    "spa": {
      "official": "Montserrat",
      "common": "Montserrat"
    },
    "fin": {
      "official": "Montserrat",
      "common": "Montserrat"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/montserrat",
  "currency": [
    "XCD"
  ],
  "callingCode": [
    "1664"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "MS",
    "ccn3": "500",
    "cca3": "MSR",
    "cioc": ""
  }
}
},{}],148:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Morocco",
    "official": "Kingdom of Morocco",
    "native": {
      "ara": {
        "official": "المملكة المغربية",
        "common": "المغرب"
      },
      "ber": {
        "official": "ⵜⴰⴳⵍⴷⵉⵜ ⵏ ⵍⵎⵖⵔⵉⴱ",
        "common": "ⵍⵎⴰⵖⵔⵉⴱ"
      }
    }
  },
  "altSpellings": [
    "MA",
    "Kingdom of Morocco",
    "Al-Mamlakah al-Maġribiyah"
  ],
  "area": 446550,
  "borders": [
    "DZA",
    "ESH",
    "ESP"
  ],
  "capital": "Rabat",
  "demonym": "Moroccan",
  "languages": {
    "ara": "Arabic",
    "ber": "Berber"
  },
  "latlng": [
    32,
    -5
  ],
  "nativeName": "المغرب",
  "population": 33465000,
  "region": "Africa",
  "subregion": "Northern Africa",
  "timezones": [
    "UTC"
  ],
  "tld": [
    ".ma",
    "المغرب."
  ],
  "translations": {
    "deu": {
      "official": "Königreich Marokko",
      "common": "Marokko"
    },
    "fra": {
      "official": "Royaume du Maroc",
      "common": "Maroc"
    },
    "hrv": {
      "official": "Kraljevina Maroko",
      "common": "Maroko"
    },
    "ita": {
      "official": "Regno del Marocco",
      "common": "Marocco"
    },
    "jpn": {
      "official": "モロッコ王国",
      "common": "モロッコ"
    },
    "nld": {
      "official": "Koninkrijk Marokko",
      "common": "Marokko"
    },
    "por": {
      "official": "Reino de Marrocos",
      "common": "Marrocos"
    },
    "rus": {
      "official": "Королевство Марокко",
      "common": "Марокко"
    },
    "spa": {
      "official": "Reino de Marruecos",
      "common": "Marruecos"
    },
    "fin": {
      "official": "Marokon kuningaskunta",
      "common": "Marokko"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/morocco",
  "currency": [
    "MAD"
  ],
  "callingCode": [
    "212"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "MA",
    "ccn3": "504",
    "cca3": "MAR",
    "cioc": "MAR"
  }
}
},{}],149:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Mozambique",
    "official": "Republic of Mozambique",
    "native": {
      "por": {
        "official": "República de Moçambique",
        "common": "Moçambique"
      }
    }
  },
  "altSpellings": [
    "MZ",
    "Republic of Mozambique",
    "República de Moçambique"
  ],
  "area": 801590,
  "borders": [
    "MWI",
    "ZAF",
    "SWZ",
    "TZA",
    "ZMB",
    "ZWE"
  ],
  "capital": "Maputo",
  "demonym": "Mozambican",
  "languages": {
    "por": "Portuguese"
  },
  "latlng": [
    -18.25,
    35
  ],
  "nativeName": "Moçambique",
  "population": 25041922,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".mz"
  ],
  "translations": {
    "deu": {
      "official": "Republik Mosambik",
      "common": "Mosambik"
    },
    "fra": {
      "official": "République du Mozambique",
      "common": "Mozambique"
    },
    "hrv": {
      "official": "Republika Mozambiku",
      "common": "Mozambik"
    },
    "ita": {
      "official": "Repubblica del Mozambico",
      "common": "Mozambico"
    },
    "jpn": {
      "official": "モザンビーク共和国",
      "common": "モザンビーク"
    },
    "nld": {
      "official": "Republiek Mozambique",
      "common": "Mozambique"
    },
    "por": {
      "official": "República de Moçambique",
      "common": "Moçambique"
    },
    "rus": {
      "official": "Республика Мозамбик",
      "common": "Мозамбик"
    },
    "spa": {
      "official": "República de Mozambique",
      "common": "Mozambique"
    },
    "fin": {
      "official": "Mosambikin tasavalta",
      "common": "Mosambik"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/mozambique",
  "currency": [
    "MZN"
  ],
  "callingCode": [
    "258"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "MZ",
    "ccn3": "508",
    "cca3": "MOZ",
    "cioc": "MOZ"
  }
}
},{}],150:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Myanmar",
    "official": "Republic of the Union of Myanmar",
    "native": {
      "mya": {
        "official": "ပြည်ထောင်စု သမ္မတ မြန်မာနိုင်ငံတော်",
        "common": "မြန်မာ"
      }
    }
  },
  "tld": [
    ".mm"
  ],
  "currency": [
    "MMK"
  ],
  "callingCode": [
    "95"
  ],
  "capital": "Naypyidaw",
  "altSpellings": [
    "MM",
    "Burma",
    "Republic of the Union of Myanmar",
    "Pyidaunzu Thanmăda Myăma Nainngandaw"
  ],
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "languages": {
    "mya": "Burmese"
  },
  "translations": {
    "deu": {
      "official": "Republik der Union von Myanmar",
      "common": "Myanmar"
    },
    "fra": {
      "official": "République de l'Union du Myanmar",
      "common": "Birmanie"
    },
    "hrv": {
      "official": "Republika Unije Mijanmar",
      "common": "Mijanmar"
    },
    "ita": {
      "official": "Repubblica dell'Unione di Myanmar",
      "common": "Birmania"
    },
    "jpn": {
      "official": "ミャンマー連邦共和国",
      "common": "ミャンマー"
    },
    "nld": {
      "official": "Republiek van de Unie van Myanmar",
      "common": "Myanmar"
    },
    "por": {
      "official": "República da União de Myanmar",
      "common": "Myanmar"
    },
    "rus": {
      "official": "Республика Союза Мьянма",
      "common": "Мьянма"
    },
    "spa": {
      "official": "República de la Unión de Myanmar",
      "common": "Myanmar"
    },
    "fin": {
      "official": "Myanmarin liiton tasavalta",
      "common": "Myanmar"
    }
  },
  "latlng": [
    22,
    98
  ],
  "demonym": "Bamar",
  "landlocked": false,
  "borders": [
    "BGD",
    "CHN",
    "IND",
    "LAO",
    "THA"
  ],
  "area": 676578,
  "codes": {
    "cca2": "MM",
    "ccn3": "104",
    "cca3": "MMR",
    "cioc": "MYA"
  }
}
},{}],151:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Namibia",
    "official": "Republic of Namibia",
    "native": {
      "afr": {
        "official": "Republiek van Namibië",
        "common": "Namibië"
      },
      "deu": {
        "official": "Republik Namibia",
        "common": "Namibia"
      },
      "eng": {
        "official": "Republic of Namibia",
        "common": "Namibia"
      },
      "her": {
        "official": "Republic of Namibia",
        "common": "Namibia"
      },
      "hgm": {
        "official": "Republic of Namibia",
        "common": "Namibia"
      },
      "kwn": {
        "official": "Republic of Namibia",
        "common": "Namibia"
      },
      "loz": {
        "official": "Republic of Namibia",
        "common": "Namibia"
      },
      "ndo": {
        "official": "Republic of Namibia",
        "common": "Namibia"
      },
      "tsn": {
        "official": "Lefatshe la Namibia",
        "common": "Namibia"
      }
    }
  },
  "altSpellings": [
    "NA",
    "Namibië",
    "Republic of Namibia"
  ],
  "area": 825615,
  "borders": [
    "AGO",
    "BWA",
    "ZAF",
    "ZMB"
  ],
  "capital": "Windhoek",
  "demonym": "Namibian",
  "languages": {
    "afr": "Afrikaans",
    "deu": "German",
    "eng": "English",
    "her": "Herero",
    "hgm": "Khoekhoe",
    "kwn": "Kwangali",
    "loz": "Lozi",
    "ndo": "Ndonga",
    "tsn": "Tswana"
  },
  "latlng": [
    -22,
    17
  ],
  "nativeName": "Namibia",
  "population": 2113077,
  "region": "Africa",
  "subregion": "Southern Africa",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".na"
  ],
  "translations": {
    "deu": {
      "official": "Republik Namibia",
      "common": "Namibia"
    },
    "fra": {
      "official": "République de Namibie",
      "common": "Namibie"
    },
    "hrv": {
      "official": "Republika Namibija",
      "common": "Namibija"
    },
    "ita": {
      "official": "Repubblica di Namibia",
      "common": "Namibia"
    },
    "jpn": {
      "official": "ナミビア共和国",
      "common": "ナミビア"
    },
    "nld": {
      "official": "Republiek Namibië",
      "common": "Namibië"
    },
    "por": {
      "official": "República da Namíbia",
      "common": "Namíbia"
    },
    "rus": {
      "official": "Республика Намибия",
      "common": "Намибия"
    },
    "spa": {
      "official": "República de Namibia",
      "common": "Namibia"
    },
    "fin": {
      "official": "Namibian tasavalta",
      "common": "Namibia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/namibia",
  "currency": [
    "NAD",
    "ZAR"
  ],
  "callingCode": [
    "264"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "NA",
    "ccn3": "516",
    "cca3": "NAM",
    "cioc": "NAM"
  }
}
},{}],152:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Nauru",
    "official": "Republic of Nauru",
    "native": {
      "eng": {
        "official": "Republic of Nauru",
        "common": "Nauru"
      },
      "nau": {
        "official": "Republic of Nauru",
        "common": "Nauru"
      }
    }
  },
  "altSpellings": [
    "NR",
    "Naoero",
    "Pleasant Island",
    "Republic of Nauru",
    "Ripublik Naoero"
  ],
  "area": 21,
  "borders": [],
  "capital": "Yaren",
  "demonym": "Nauruan",
  "languages": {
    "eng": "English",
    "nau": "Nauru"
  },
  "latlng": [
    -0.53333333,
    166.91666666
  ],
  "nativeName": "Nauru",
  "population": 10084,
  "region": "Oceania",
  "subregion": "Micronesia",
  "timezones": [
    "UTC+12:00"
  ],
  "tld": [
    ".nr"
  ],
  "translations": {
    "deu": {
      "official": "Republik Nauru",
      "common": "Nauru"
    },
    "fra": {
      "official": "République de Nauru",
      "common": "Nauru"
    },
    "hrv": {
      "official": "Republika Nauru",
      "common": "Nauru"
    },
    "ita": {
      "official": "Repubblica di Nauru",
      "common": "Nauru"
    },
    "jpn": {
      "official": "ナウル共和国",
      "common": "ナウル"
    },
    "nld": {
      "official": "Republiek Nauru",
      "common": "Nauru"
    },
    "por": {
      "official": "República de Nauru",
      "common": "Nauru"
    },
    "rus": {
      "official": "Республика Науру",
      "common": "Науру"
    },
    "spa": {
      "official": "República de Nauru",
      "common": "Nauru"
    },
    "fin": {
      "official": "Naurun tasavalta",
      "common": "Nauru"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/nauru",
  "currency": [
    "AUD"
  ],
  "callingCode": [
    "674"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "NR",
    "ccn3": "520",
    "cca3": "NRU",
    "cioc": "NRU"
  }
}
},{}],153:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Nepal",
    "official": "Federal Democratic Republic of Nepal",
    "native": {
      "nep": {
        "official": "नेपाल संघीय लोकतान्त्रिक गणतन्त्र",
        "common": "नपल"
      }
    }
  },
  "altSpellings": [
    "NP",
    "Federal Democratic Republic of Nepal",
    "Loktāntrik Ganatantra Nepāl"
  ],
  "area": 147181,
  "borders": [
    "CHN",
    "IND"
  ],
  "capital": "Kathmandu",
  "demonym": "Nepalese",
  "languages": {
    "nep": "Nepali"
  },
  "latlng": [
    28,
    84
  ],
  "nativeName": "नपल",
  "population": 27646053,
  "region": "Asia",
  "subregion": "Southern Asia",
  "timezones": [
    "UTC+05:45"
  ],
  "tld": [
    ".np"
  ],
  "translations": {
    "deu": {
      "official": "Demokratischen Bundesrepublik Nepal",
      "common": "Népal"
    },
    "fra": {
      "official": "République du Népal",
      "common": "Népal"
    },
    "hrv": {
      "official": "Savezna Demokratska Republika Nepal",
      "common": "Nepal"
    },
    "ita": {
      "official": "Repubblica federale democratica del Nepal",
      "common": "Nepal"
    },
    "jpn": {
      "official": "ネパール連邦民主共和国",
      "common": "ネパール"
    },
    "nld": {
      "official": "Federale Democratische Republiek Nepal",
      "common": "Nepal"
    },
    "por": {
      "official": "República Democrática Federal do Nepal",
      "common": "Nepal"
    },
    "rus": {
      "official": "Федеративная Демократическая Республика Непал",
      "common": "Непал"
    },
    "spa": {
      "official": "República Democrática Federal de Nepal",
      "common": "Nepal"
    },
    "fin": {
      "official": "Nepalin demokraattinen liittotasavalta",
      "common": "Nepal"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/nepal",
  "currency": [
    "NPR"
  ],
  "callingCode": [
    "977"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "NP",
    "ccn3": "524",
    "cca3": "NPL",
    "cioc": "NEP"
  }
}
},{}],154:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Netherlands",
    "official": "Netherlands",
    "native": {
      "nld": {
        "official": "Nederland",
        "common": "Nederland"
      }
    }
  },
  "altSpellings": [
    "NL",
    "Holland",
    "Nederland"
  ],
  "area": 41850,
  "borders": [
    "BEL",
    "DEU"
  ],
  "capital": "Amsterdam",
  "demonym": "Dutch",
  "languages": {
    "nld": "Dutch"
  },
  "latlng": [
    52.5,
    5.75
  ],
  "nativeName": "Nederland",
  "population": 16881000,
  "region": "Europe",
  "subregion": "Western Europe",
  "timezones": null,
  "tld": [
    ".nl"
  ],
  "translations": {
    "deu": {
      "official": "Niederlande",
      "common": "Niederlande"
    },
    "fra": {
      "official": "Pays-Bas",
      "common": "Pays-Bas"
    },
    "hrv": {
      "official": "Holandija",
      "common": "Nizozemska"
    },
    "ita": {
      "official": "Paesi Bassi",
      "common": "Paesi Bassi"
    },
    "jpn": {
      "official": "オランダ",
      "common": "オランダ"
    },
    "nld": {
      "official": "Nederland",
      "common": "Nederland"
    },
    "por": {
      "official": "Holanda",
      "common": "Holanda"
    },
    "rus": {
      "official": "Нидерланды",
      "common": "Нидерланды"
    },
    "spa": {
      "official": "Países Bajos",
      "common": "Países Bajos"
    },
    "fin": {
      "official": "Alankomaat",
      "common": "Alankomaat"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/netherlands",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "31"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "NL",
    "ccn3": "528",
    "cca3": "NLD",
    "cioc": "NED"
  }
}
},{}],155:[function(require,module,exports){
module.exports={
  "name": {
    "common": "New Caledonia",
    "official": "New Caledonia",
    "native": {
      "fra": {
        "official": "Nouvelle-Calédonie",
        "common": "Nouvelle-Calédonie"
      }
    }
  },
  "altSpellings": [
    "NC"
  ],
  "area": 18575,
  "borders": [],
  "capital": "Nouméa",
  "demonym": "New Caledonian",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    -21.5,
    165.5
  ],
  "nativeName": "Nouvelle-Calédonie",
  "population": 268767,
  "region": "Oceania",
  "subregion": "Melanesia",
  "timezones": null,
  "tld": [
    ".nc"
  ],
  "translations": {
    "deu": {
      "official": "Neukaledonien",
      "common": "Neukaledonien"
    },
    "fra": {
      "official": "Nouvelle-Calédonie",
      "common": "Nouvelle-Calédonie"
    },
    "hrv": {
      "official": "Nova Kaledonija",
      "common": "Nova Kaledonija"
    },
    "ita": {
      "official": "Nuova Caledonia",
      "common": "Nuova Caledonia"
    },
    "jpn": {
      "official": "ニューカレドニア",
      "common": "ニューカレドニア"
    },
    "nld": {
      "official": "nieuw -Caledonië",
      "common": "Nieuw-Caledonië"
    },
    "por": {
      "official": "New Caledonia",
      "common": "Nova Caledónia"
    },
    "rus": {
      "official": "Новая Каледония",
      "common": "Новая Каледония"
    },
    "spa": {
      "official": "nueva Caledonia",
      "common": "Nueva Caledonia"
    },
    "fin": {
      "official": "Uusi-Kaledonia",
      "common": "Uusi-Kaledonia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/new_caledonia",
  "currency": [
    "XPF"
  ],
  "callingCode": [
    "687"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "NC",
    "ccn3": "540",
    "cca3": "NCL",
    "cioc": ""
  }
}
},{}],156:[function(require,module,exports){
module.exports={
  "name": {
    "common": "New Zealand",
    "official": "New Zealand",
    "native": {
      "eng": {
        "official": "New Zealand",
        "common": "New Zealand"
      },
      "mri": {
        "official": "Aotearoa",
        "common": "Aotearoa"
      },
      "nzs": {
        "official": "New Zealand",
        "common": "New Zealand"
      }
    }
  },
  "altSpellings": [
    "NZ",
    "Aotearoa"
  ],
  "area": 270467,
  "borders": [],
  "capital": "Wellington",
  "demonym": "New Zealander",
  "languages": {
    "eng": "English",
    "mri": "Māori",
    "nzs": "New Zealand Sign Language"
  },
  "latlng": [
    -41,
    174
  ],
  "nativeName": "New Zealand",
  "population": 4547900,
  "region": "Oceania",
  "subregion": "Australia and New Zealand",
  "timezones": [
    "UTC−11:00",
    "UTC−10:00",
    "UTC+12:00",
    "UTC+12:45",
    "UTC+13:00"
  ],
  "tld": [
    ".nz"
  ],
  "translations": {
    "deu": {
      "official": "Neuseeland",
      "common": "Neuseeland"
    },
    "fra": {
      "official": "Nouvelle-Zélande",
      "common": "Nouvelle-Zélande"
    },
    "hrv": {
      "official": "Novi Zeland",
      "common": "Novi Zeland"
    },
    "ita": {
      "official": "Nuova Zelanda",
      "common": "Nuova Zelanda"
    },
    "jpn": {
      "official": "ニュージーランド",
      "common": "ニュージーランド"
    },
    "nld": {
      "official": "Nieuw Zeeland",
      "common": "Nieuw-Zeeland"
    },
    "por": {
      "official": "nova Zelândia",
      "common": "Nova Zelândia"
    },
    "rus": {
      "official": "Новая Зеландия",
      "common": "Новая Зеландия"
    },
    "spa": {
      "official": "nueva Zelanda",
      "common": "Nueva Zelanda"
    },
    "fin": {
      "official": "Uusi-Seelanti",
      "common": "Uusi-Seelanti"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/new_zealand",
  "currency": [
    "NZD"
  ],
  "callingCode": [
    "64"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "NZ",
    "ccn3": "554",
    "cca3": "NZL",
    "cioc": "NZL"
  }
}
},{}],157:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Nicaragua",
    "official": "Republic of Nicaragua",
    "native": {
      "spa": {
        "official": "República de Nicaragua",
        "common": "Nicaragua"
      }
    }
  },
  "altSpellings": [
    "NI",
    "Republic of Nicaragua",
    "República de Nicaragua"
  ],
  "area": 130373,
  "borders": [
    "CRI",
    "HND"
  ],
  "capital": "Managua",
  "demonym": "Nicaraguan",
  "languages": {
    "spa": "Spanish"
  },
  "latlng": [
    13,
    -85
  ],
  "nativeName": "Nicaragua",
  "population": 6134270,
  "region": "Americas",
  "subregion": "Central America",
  "timezones": [
    "UTC−06:00"
  ],
  "tld": [
    ".ni"
  ],
  "translations": {
    "deu": {
      "official": "Republik Nicaragua",
      "common": "Nicaragua"
    },
    "fra": {
      "official": "République du Nicaragua",
      "common": "Nicaragua"
    },
    "hrv": {
      "official": "Republika Nikaragva",
      "common": "Nikaragva"
    },
    "ita": {
      "official": "Repubblica del Nicaragua",
      "common": "Nicaragua"
    },
    "jpn": {
      "official": "ニカラグア共和国",
      "common": "ニカラグア"
    },
    "nld": {
      "official": "Republiek Nicaragua",
      "common": "Nicaragua"
    },
    "por": {
      "official": "República da Nicarágua",
      "common": "Nicarágua"
    },
    "rus": {
      "official": "Республика Никарагуа",
      "common": "Никарагуа"
    },
    "spa": {
      "official": "República de Nicaragua",
      "common": "Nicaragua"
    },
    "fin": {
      "official": "Nicaraguan tasavalta",
      "common": "Nicaragua"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/nicaragua",
  "currency": [
    "NIO"
  ],
  "callingCode": [
    "505"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "NI",
    "ccn3": "558",
    "cca3": "NIC",
    "cioc": "NCA"
  }
}
},{}],158:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Niger",
    "official": "Republic of Niger",
    "native": {
      "fra": {
        "official": "République du Niger",
        "common": "Niger"
      }
    }
  },
  "altSpellings": [
    "NE",
    "Nijar"
  ],
  "area": 1267000,
  "borders": [
    "DZA",
    "BEN",
    "BFA",
    "TCD",
    "LBY",
    "MLI",
    "NGA"
  ],
  "capital": "Niamey",
  "demonym": "Nigerien",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    16,
    8
  ],
  "nativeName": "Niger",
  "population": 17138707,
  "region": "Africa",
  "subregion": "Western Africa",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".ne"
  ],
  "translations": {
    "deu": {
      "official": "Republik Niger",
      "common": "Niger"
    },
    "fra": {
      "official": "République du Niger",
      "common": "Niger"
    },
    "hrv": {
      "official": "Republika Niger",
      "common": "Niger"
    },
    "ita": {
      "official": "Repubblica del Niger",
      "common": "Niger"
    },
    "jpn": {
      "official": "ニジェール共和国",
      "common": "ニジェール"
    },
    "nld": {
      "official": "Republiek Niger",
      "common": "Niger"
    },
    "por": {
      "official": "República do Níger",
      "common": "Níger"
    },
    "rus": {
      "official": "Республика Нигер",
      "common": "Нигер"
    },
    "spa": {
      "official": "República de Níger",
      "common": "Níger"
    },
    "fin": {
      "official": "Nigerin tasavalta",
      "common": "Niger"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/niger",
  "currency": [
    "XOF"
  ],
  "callingCode": [
    "227"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "NE",
    "ccn3": "562",
    "cca3": "NER",
    "cioc": "NIG"
  }
}
},{}],159:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Nigeria",
    "official": "Federal Republic of Nigeria",
    "native": {
      "eng": {
        "official": "Federal Republic of Nigeria",
        "common": "Nigeria"
      }
    }
  },
  "altSpellings": [
    "NG",
    "Nijeriya",
    "Naíjíríà",
    "Federal Republic of Nigeria"
  ],
  "area": 923768,
  "borders": [
    "BEN",
    "CMR",
    "TCD",
    "NER"
  ],
  "capital": "Abuja",
  "demonym": "Nigerian",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    10,
    8
  ],
  "nativeName": "Nigeria",
  "population": 178517000,
  "region": "Africa",
  "subregion": "Western Africa",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".ng"
  ],
  "translations": {
    "deu": {
      "official": "Bundesrepublik Nigeria",
      "common": "Nigeria"
    },
    "fra": {
      "official": "République fédérale du Nigeria",
      "common": "Nigéria"
    },
    "hrv": {
      "official": "Savezna Republika Nigerija",
      "common": "Nigerija"
    },
    "ita": {
      "official": "Repubblica federale di Nigeria",
      "common": "Nigeria"
    },
    "jpn": {
      "official": "ナイジェリア連邦共和国",
      "common": "ナイジェリア"
    },
    "nld": {
      "official": "Federale Republiek Nigeria",
      "common": "Nigeria"
    },
    "por": {
      "official": "República Federal da Nigéria",
      "common": "Nigéria"
    },
    "rus": {
      "official": "Федеративная Республика Нигерия",
      "common": "Нигерия"
    },
    "spa": {
      "official": "República Federal de Nigeria",
      "common": "Nigeria"
    },
    "fin": {
      "official": "Nigerian liittotasavalta",
      "common": "Nigeria"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/nigeria",
  "currency": [
    "NGN"
  ],
  "callingCode": [
    "234"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "NG",
    "ccn3": "566",
    "cca3": "NGA",
    "cioc": "NGR"
  }
}
},{}],160:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Niue",
    "official": "Niue",
    "native": {
      "eng": {
        "official": "Niue",
        "common": "Niue"
      },
      "niu": {
        "official": "Niuē",
        "common": "Niuē"
      }
    }
  },
  "altSpellings": [
    "NU"
  ],
  "area": 260,
  "borders": [],
  "capital": "Alofi",
  "demonym": "Niuean",
  "languages": {
    "eng": "English",
    "niu": "Niuean"
  },
  "latlng": [
    -19.03333333,
    -169.86666666
  ],
  "nativeName": "Niuē",
  "population": 1613,
  "region": "Oceania",
  "subregion": "Polynesia",
  "timezones": null,
  "tld": [
    ".nu"
  ],
  "translations": {
    "deu": {
      "official": "Niue",
      "common": "Niue"
    },
    "fra": {
      "official": "Niue",
      "common": "Niue"
    },
    "hrv": {
      "official": "Niue",
      "common": "Niue"
    },
    "ita": {
      "official": "Niue",
      "common": "Niue"
    },
    "jpn": {
      "official": "ニウエ",
      "common": "ニウエ"
    },
    "nld": {
      "official": "Niue",
      "common": "Niue"
    },
    "por": {
      "official": "Niue",
      "common": "Niue"
    },
    "rus": {
      "official": "Ниуэ",
      "common": "Ниуэ"
    },
    "spa": {
      "official": "Niue",
      "common": "Niue"
    },
    "fin": {
      "official": "Niue",
      "common": "Niue"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/niue",
  "currency": [
    "NZD"
  ],
  "callingCode": [
    "683"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "NU",
    "ccn3": "570",
    "cca3": "NIU",
    "cioc": ""
  }
}
},{}],161:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Norfolk Island",
    "official": "Territory of Norfolk Island",
    "native": {
      "eng": {
        "official": "Territory of Norfolk Island",
        "common": "Norfolk Island"
      },
      "pih": {
        "official": "Teratri of Norf'k Ailen",
        "common": "Norf'k Ailen"
      }
    }
  },
  "altSpellings": [
    "NF",
    "Territory of Norfolk Island",
    "Teratri of Norf'k Ailen"
  ],
  "area": 36,
  "borders": [],
  "capital": "Kingston",
  "demonym": "Norfolk Islander",
  "languages": {
    "eng": "English",
    "pih": "Norfuk"
  },
  "latlng": [
    -29.03333333,
    167.95
  ],
  "nativeName": "Norfolk Island",
  "population": 2302,
  "region": "Oceania",
  "subregion": "Australia and New Zealand",
  "timezones": null,
  "tld": [
    ".nf"
  ],
  "translations": {
    "deu": {
      "official": "Gebiet der Norfolk-Insel",
      "common": "Norfolkinsel"
    },
    "fra": {
      "official": "Territoire de l'île Norfolk",
      "common": "Île Norfolk"
    },
    "hrv": {
      "official": "Teritorij Norfolk Island",
      "common": "Otok Norfolk"
    },
    "ita": {
      "official": "Territorio di Norfolk Island",
      "common": "Isola Norfolk"
    },
    "jpn": {
      "official": "ノーフォーク島の領土",
      "common": "ノーフォーク島"
    },
    "nld": {
      "official": "Grondgebied van Norfolk Island",
      "common": "Norfolkeiland"
    },
    "por": {
      "official": "Território da Ilha Norfolk",
      "common": "Ilha Norfolk"
    },
    "rus": {
      "official": "Территория острова Норфолк",
      "common": "Норфолк"
    },
    "spa": {
      "official": "Territorio de la Isla Norfolk",
      "common": "Isla de Norfolk"
    },
    "fin": {
      "official": "Norfolkinsaaren territorio",
      "common": "Norfolkinsaari"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/norfolk_island",
  "currency": [
    "AUD"
  ],
  "callingCode": [
    "672"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "NF",
    "ccn3": "574",
    "cca3": "NFK",
    "cioc": ""
  }
}
},{}],162:[function(require,module,exports){
module.exports={
  "name": {
    "common": "North Korea",
    "official": "Democratic People's Republic of Korea",
    "native": {
      "kor": {
        "official": "조선 민주주의 인민 공화국",
        "common": "북한"
      }
    }
  },
  "tld": [
    ".kp"
  ],
  "currency": [
    "KPW"
  ],
  "callingCode": [
    "850"
  ],
  "capital": "Pyongyang",
  "altSpellings": [
    "KP",
    "Democratic People's Republic of Korea",
    "조선민주주의인민공화국",
    "Chosŏn Minjujuŭi Inmin Konghwaguk",
    "Korea, Democratic People's Republic of"
  ],
  "region": "Asia",
  "subregion": "Eastern Asia",
  "languages": {
    "kor": "Korean"
  },
  "translations": {
    "deu": {
      "official": "Demokratische Volksrepublik Korea",
      "common": "Nordkorea"
    },
    "fra": {
      "official": "République populaire démocratique de Corée",
      "common": "Corée du Nord"
    },
    "hrv": {
      "official": "Demokratska Narodna Republika Koreja",
      "common": "Sjeverna Koreja"
    },
    "ita": {
      "official": "Repubblica democratica popolare di Corea",
      "common": "Corea del Nord"
    },
    "jpn": {
      "official": "朝鮮民主主義人民共和国",
      "common": "朝鮮民主主義人民共和国"
    },
    "nld": {
      "official": "Democratische Volksrepubliek Korea",
      "common": "Noord-Korea"
    },
    "por": {
      "official": "República Popular Democrática da Coreia",
      "common": "Coreia do Norte"
    },
    "rus": {
      "official": "Корейская Народно-Демократическая Республика Корея",
      "common": "Северная Корея"
    },
    "spa": {
      "official": "República Popular Democrática de Corea",
      "common": "Corea del Norte"
    },
    "fin": {
      "official": "Korean demokraattinen kansantasavalta",
      "common": "Pohjois-Korea"
    }
  },
  "latlng": [
    40,
    127
  ],
  "demonym": "North Korean",
  "landlocked": false,
  "borders": [
    "CHN",
    "KOR",
    "RUS"
  ],
  "area": 120538,
  "codes": {
    "cca2": "KP",
    "ccn3": "408",
    "cca3": "PRK",
    "cioc": "PRK"
  }
}
},{}],163:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Northern Mariana Islands",
    "official": "Commonwealth of the Northern Mariana Islands",
    "native": {
      "cal": {
        "official": "Commonwealth of the Northern Mariana Islands",
        "common": "Northern Mariana Islands"
      },
      "cha": {
        "official": "Sankattan Siha Na Islas Mariånas",
        "common": "Na Islas Mariånas"
      },
      "eng": {
        "official": "Commonwealth of the Northern Mariana Islands",
        "common": "Northern Mariana Islands"
      }
    }
  },
  "altSpellings": [
    "MP",
    "Commonwealth of the Northern Mariana Islands",
    "Sankattan Siha Na Islas Mariånas"
  ],
  "area": 464,
  "borders": [],
  "capital": "Saipan",
  "demonym": "American",
  "languages": {
    "cal": "Carolinian",
    "cha": "Chamorro",
    "eng": "English"
  },
  "latlng": [
    15.2,
    145.75
  ],
  "nativeName": "Northern Mariana Islands",
  "population": 53883,
  "region": "Oceania",
  "subregion": "Micronesia",
  "timezones": null,
  "tld": [
    ".mp"
  ],
  "translations": {
    "deu": {
      "official": "Commonwealth der Nördlichen Marianen",
      "common": "Nördliche Marianen"
    },
    "fra": {
      "official": "Commonwealth des îles Mariannes du Nord",
      "common": "Îles Mariannes du Nord"
    },
    "hrv": {
      "official": "Zajednica je Sjeverni Marijanski otoci",
      "common": "Sjevernomarijanski otoci"
    },
    "ita": {
      "official": "Commonwealth delle Isole Marianne Settentrionali",
      "common": "Isole Marianne Settentrionali"
    },
    "jpn": {
      "official": "北マリアナ諸島",
      "common": "北マリアナ諸島"
    },
    "nld": {
      "official": "Commonwealth van de Noordelijke Marianen",
      "common": "Noordelijke Marianeneilanden"
    },
    "por": {
      "official": "Comunidade das Ilhas Marianas do Norte",
      "common": "Marianas Setentrionais"
    },
    "rus": {
      "official": "Содружество Северных Марианских островов",
      "common": "Северные Марианские острова"
    },
    "spa": {
      "official": "Mancomunidad de las Islas Marianas del Norte",
      "common": "Islas Marianas del Norte"
    },
    "fin": {
      "official": "Pohjois-Mariaanit",
      "common": "Pohjois-Mariaanit"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/northern_mariana_islands",
  "currency": [
    "USD"
  ],
  "callingCode": [
    "1670"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "MP",
    "ccn3": "580",
    "cca3": "MNP",
    "cioc": ""
  }
}
},{}],164:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Norway",
    "official": "Kingdom of Norway",
    "native": {
      "nno": {
        "official": "Kongeriket Noreg",
        "common": "Noreg"
      },
      "nob": {
        "official": "Kongeriket Norge",
        "common": "Norge"
      },
      "smi": {
        "official": "Norgga gonagasriika",
        "common": "Norgga"
      }
    }
  },
  "altSpellings": [
    "NO",
    "Norge",
    "Noreg",
    "Kingdom of Norway",
    "Kongeriket Norge",
    "Kongeriket Noreg"
  ],
  "area": 323802,
  "borders": [
    "FIN",
    "SWE",
    "RUS"
  ],
  "capital": "Oslo",
  "demonym": "Norwegian",
  "languages": {
    "nno": "Norwegian Nynorsk",
    "nob": "Norwegian Bokmål",
    "smi": "Sami"
  },
  "latlng": [
    62,
    10
  ],
  "nativeName": "Norge",
  "population": 5156450,
  "region": "Europe",
  "subregion": "Northern Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".no"
  ],
  "translations": {
    "deu": {
      "official": "Königreich Norwegen",
      "common": "Norwegen"
    },
    "fra": {
      "official": "Royaume de Norvège",
      "common": "Norvège"
    },
    "hrv": {
      "official": "Kraljevina Norveška",
      "common": "Norveška"
    },
    "ita": {
      "official": "Regno di Norvegia",
      "common": "Norvegia"
    },
    "jpn": {
      "official": "ノルウェー王国",
      "common": "ノルウェー"
    },
    "nld": {
      "official": "Koninkrijk Noorwegen",
      "common": "Noorwegen"
    },
    "por": {
      "official": "Reino da Noruega",
      "common": "Noruega"
    },
    "rus": {
      "official": "Королевство Норвегия",
      "common": "Норвегия"
    },
    "spa": {
      "official": "Reino de Noruega",
      "common": "Noruega"
    },
    "fin": {
      "official": "Norjan kuningaskunta",
      "common": "Norja"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/norway",
  "currency": [
    "NOK"
  ],
  "callingCode": [
    "47"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "NO",
    "ccn3": "578",
    "cca3": "NOR",
    "cioc": "NOR"
  }
}
},{}],165:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Oman",
    "official": "Sultanate of Oman",
    "native": {
      "ara": {
        "official": "سلطنة عمان",
        "common": "عمان"
      }
    }
  },
  "altSpellings": [
    "OM",
    "Sultanate of Oman",
    "Salṭanat ʻUmān"
  ],
  "area": 309500,
  "borders": [
    "SAU",
    "ARE",
    "YEM"
  ],
  "capital": "Muscat",
  "demonym": "Omani",
  "languages": {
    "ara": "Arabic"
  },
  "latlng": [
    21,
    57
  ],
  "nativeName": "عمان",
  "population": 4089076,
  "region": "Asia",
  "subregion": "Western Asia",
  "timezones": [
    "UTC+04:00"
  ],
  "tld": [
    ".om"
  ],
  "translations": {
    "deu": {
      "official": "Sultanat Oman",
      "common": "Oman"
    },
    "fra": {
      "official": "Sultanat d'Oman",
      "common": "Oman"
    },
    "hrv": {
      "official": "Sultanat Oman",
      "common": "Oman"
    },
    "ita": {
      "official": "Sultanato dell'Oman",
      "common": "oman"
    },
    "jpn": {
      "official": "オマーン·スルタン国",
      "common": "オマーン"
    },
    "nld": {
      "official": "Sultanaat van Oman",
      "common": "Oman"
    },
    "por": {
      "official": "Sultanato de Omã",
      "common": "Omã"
    },
    "rus": {
      "official": "Султанат Оман",
      "common": "Оман"
    },
    "spa": {
      "official": "Sultanato de Omán",
      "common": "Omán"
    },
    "fin": {
      "official": "Omanin sulttaanikunta",
      "common": "Oman"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/oman",
  "currency": [
    "OMR"
  ],
  "callingCode": [
    "968"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "OM",
    "ccn3": "512",
    "cca3": "OMN",
    "cioc": "OMA"
  }
}
},{}],166:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Pakistan",
    "official": "Islamic Republic of Pakistan",
    "native": {
      "eng": {
        "official": "Islamic Republic of Pakistan",
        "common": "Pakistan"
      },
      "urd": {
        "official": "اسلامی جمہوریۂ پاكستان",
        "common": "پاكستان"
      }
    }
  },
  "altSpellings": [
    "PK",
    "Pākistān",
    "Islamic Republic of Pakistan",
    "Islāmī Jumhūriya'eh Pākistān"
  ],
  "area": 881912,
  "borders": [
    "AFG",
    "CHN",
    "IND",
    "IRN"
  ],
  "capital": "Islamabad",
  "demonym": "Pakistani",
  "languages": {
    "eng": "English",
    "urd": "Urdu"
  },
  "latlng": [
    30,
    70
  ],
  "nativeName": "Pakistan",
  "population": 188410000,
  "region": "Asia",
  "subregion": "Southern Asia",
  "timezones": [
    "UTC+05:00"
  ],
  "tld": [
    ".pk"
  ],
  "translations": {
    "deu": {
      "official": "Islamische Republik Pakistan",
      "common": "Pakistan"
    },
    "fra": {
      "official": "République islamique du Pakistan",
      "common": "Pakistan"
    },
    "hrv": {
      "official": "Islamska Republika Pakistan",
      "common": "Pakistan"
    },
    "ita": {
      "official": "Repubblica islamica del Pakistan",
      "common": "Pakistan"
    },
    "jpn": {
      "official": "パキスタン",
      "common": "パキスタン"
    },
    "nld": {
      "official": "Islamitische Republiek Pakistan",
      "common": "Pakistan"
    },
    "por": {
      "official": "República Islâmica do Paquistão",
      "common": "Paquistão"
    },
    "rus": {
      "official": "Исламская Республика Пакистан",
      "common": "Пакистан"
    },
    "spa": {
      "official": "República Islámica de Pakistán",
      "common": "Pakistán"
    },
    "fin": {
      "official": "Pakistanin islamilainen tasavalta",
      "common": "Pakistan"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/pakistan",
  "currency": [
    "PKR"
  ],
  "callingCode": [
    "92"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "PK",
    "ccn3": "586",
    "cca3": "PAK",
    "cioc": "PAK"
  }
}
},{}],167:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Palau",
    "official": "Republic of Palau",
    "native": {
      "eng": {
        "official": "Republic of Palau",
        "common": "Palau"
      },
      "pau": {
        "official": "Beluu er a Belau",
        "common": "Belau"
      }
    }
  },
  "altSpellings": [
    "PW",
    "Republic of Palau",
    "Beluu er a Belau"
  ],
  "area": 459,
  "borders": [],
  "capital": "Ngerulmud",
  "demonym": "Palauan",
  "languages": {
    "eng": "English",
    "pau": "Palauan"
  },
  "latlng": [
    7.5,
    134.5
  ],
  "nativeName": "Palau",
  "population": 20901,
  "region": "Oceania",
  "subregion": "Micronesia",
  "timezones": [
    "UTC+09:00"
  ],
  "tld": [
    ".pw"
  ],
  "translations": {
    "deu": {
      "official": "Palau",
      "common": "Palau"
    },
    "fra": {
      "official": "République des Palaos (Palau)",
      "common": "Palaos (Palau)"
    },
    "hrv": {
      "official": "Republika Palau",
      "common": "Palau"
    },
    "ita": {
      "official": "Repubblica di Palau",
      "common": "Palau"
    },
    "jpn": {
      "official": "パラオ共和国",
      "common": "パラオ"
    },
    "nld": {
      "official": "Republiek van Palau",
      "common": "Palau"
    },
    "por": {
      "official": "República de Palau",
      "common": "Palau"
    },
    "rus": {
      "official": "Республика Палау",
      "common": "Палау"
    },
    "spa": {
      "official": "República de Palau",
      "common": "Palau"
    },
    "fin": {
      "official": "Palaun tasavalta",
      "common": "Palau"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/palau",
  "currency": [
    "USD"
  ],
  "callingCode": [
    "680"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "PW",
    "ccn3": "585",
    "cca3": "PLW",
    "cioc": "PLW"
  }
}
},{}],168:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Palestine",
    "official": "State of Palestine",
    "native": {
      "ara": {
        "official": "دولة فلسطين",
        "common": "فلسطين"
      }
    }
  },
  "tld": [
    ".ps",
    "فلسطين."
  ],
  "currency": [
    "ILS"
  ],
  "callingCode": [
    "970"
  ],
  "capital": "Ramallah",
  "altSpellings": [
    "PS",
    "Palestine, State of",
    "State of Palestine",
    "Dawlat Filasṭin"
  ],
  "region": "Asia",
  "subregion": "Western Asia",
  "languages": {
    "ara": "Arabic"
  },
  "translations": {
    "deu": {
      "official": "Staat Palästina",
      "common": "Palästina"
    },
    "fra": {
      "official": "État de Palestine",
      "common": "Palestine"
    },
    "hrv": {
      "official": "State of Palestine",
      "common": "Palestina"
    },
    "ita": {
      "official": "Stato di Palestina",
      "common": "Palestina"
    },
    "jpn": {
      "official": "パレスチナ自治政府",
      "common": "パレスチナ"
    },
    "nld": {
      "official": "Staat Palestina",
      "common": "Palestijnse gebieden"
    },
    "por": {
      "official": "Estado da Palestina",
      "common": "Palestina"
    },
    "rus": {
      "official": "Государство Палестина",
      "common": "Палестина"
    },
    "spa": {
      "official": "Estado de Palestina",
      "common": "Palestina"
    },
    "fin": {
      "official": "Palestiinan valtio",
      "common": "Palestiina"
    }
  },
  "latlng": [
    31.9,
    35.2
  ],
  "demonym": "Palestinian",
  "landlocked": false,
  "borders": [
    "ISR",
    "EGY",
    "JOR"
  ],
  "area": 6220,
  "codes": {
    "cca2": "PS",
    "ccn3": "275",
    "cca3": "PSE",
    "cioc": "PLE"
  }
}
},{}],169:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Panama",
    "official": "Republic of Panama",
    "native": {
      "spa": {
        "official": "República de Panamá",
        "common": "Panamá"
      }
    }
  },
  "altSpellings": [
    "PA",
    "Republic of Panama",
    "República de Panamá"
  ],
  "area": 75417,
  "borders": [
    "COL",
    "CRI"
  ],
  "capital": "Panama City",
  "demonym": "Panamanian",
  "languages": {
    "spa": "Spanish"
  },
  "latlng": [
    9,
    -80
  ],
  "nativeName": "Panamá",
  "population": 3713312,
  "region": "Americas",
  "subregion": "Central America",
  "timezones": [
    "UTC−05:00"
  ],
  "tld": [
    ".pa"
  ],
  "translations": {
    "deu": {
      "official": "Republik Panama",
      "common": "Panama"
    },
    "fra": {
      "official": "République du Panama",
      "common": "Panama"
    },
    "hrv": {
      "official": "Republika Panama",
      "common": "Panama"
    },
    "ita": {
      "official": "Repubblica di Panama",
      "common": "Panama"
    },
    "jpn": {
      "official": "パナマ共和国",
      "common": "パナマ"
    },
    "nld": {
      "official": "Republiek Panama",
      "common": "Panama"
    },
    "por": {
      "official": "República do Panamá",
      "common": "Panamá"
    },
    "rus": {
      "official": "Республика Панама",
      "common": "Панама"
    },
    "spa": {
      "official": "República de Panamá",
      "common": "Panamá"
    },
    "fin": {
      "official": "Panaman tasavalta",
      "common": "Panama"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/panama",
  "currency": [
    "PAB",
    "USD"
  ],
  "callingCode": [
    "507"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "PA",
    "ccn3": "591",
    "cca3": "PAN",
    "cioc": "PAN"
  }
}
},{}],170:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Papua New Guinea",
    "official": "Independent State of Papua New Guinea",
    "native": {
      "eng": {
        "official": "Independent State of Papua New Guinea",
        "common": "Papua New Guinea"
      },
      "hmo": {
        "official": "Independen Stet bilong Papua Niugini",
        "common": "Papua Niu Gini"
      },
      "tpi": {
        "official": "Independen Stet bilong Papua Niugini",
        "common": "Papua Niugini"
      }
    }
  },
  "altSpellings": [
    "PG",
    "Independent State of Papua New Guinea",
    "Independen Stet bilong Papua Niugini"
  ],
  "area": 462840,
  "borders": [
    "IDN"
  ],
  "capital": "Port Moresby",
  "demonym": "Papua New Guinean",
  "languages": {
    "eng": "English",
    "hmo": "Hiri Motu",
    "tpi": "Tok Pisin"
  },
  "latlng": [
    -6,
    147
  ],
  "nativeName": "Papua Niugini",
  "population": 7398500,
  "region": "Oceania",
  "subregion": "Melanesia",
  "timezones": [
    "UTC+10:00"
  ],
  "tld": [
    ".pg"
  ],
  "translations": {
    "deu": {
      "official": "Unabhängige Staat Papua-Neuguinea",
      "common": "Papua-Neuguinea"
    },
    "fra": {
      "official": "État indépendant de Papouasie-Nouvelle-Guinée",
      "common": "Papouasie-Nouvelle-Guinée"
    },
    "hrv": {
      "official": "Nezavisna Država Papui Novoj Gvineji",
      "common": "Papua Nova Gvineja"
    },
    "ita": {
      "official": "Stato indipendente di Papua Nuova Guinea",
      "common": "Papua Nuova Guinea"
    },
    "jpn": {
      "official": "パプアニューギニア独立国",
      "common": "パプアニューギニア"
    },
    "nld": {
      "official": "Onafhankelijke Staat Papoea -Nieuw-Guinea",
      "common": "Papoea-Nieuw-Guinea"
    },
    "por": {
      "official": "Estado Independente da Papua Nova Guiné",
      "common": "Papua Nova Guiné"
    },
    "rus": {
      "official": "Независимое Государство Папуа-Новой Гвинеи",
      "common": "Папуа — Новая Гвинея"
    },
    "spa": {
      "official": "Estado Independiente de Papúa Nueva Guinea",
      "common": "Papúa Nueva Guinea"
    },
    "fin": {
      "official": "Papua-Uuden-Guinean Itsenäinen valtio",
      "common": "Papua-Uusi-Guinea"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/papua_new_guinea",
  "currency": [
    "PGK"
  ],
  "callingCode": [
    "675"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "PG",
    "ccn3": "598",
    "cca3": "PNG",
    "cioc": "PNG"
  }
}
},{}],171:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Paraguay",
    "official": "Republic of Paraguay",
    "native": {
      "grn": {
        "official": "Tetã Paraguái",
        "common": "Paraguái"
      },
      "spa": {
        "official": "República de Paraguay",
        "common": "Paraguay"
      }
    }
  },
  "altSpellings": [
    "PY",
    "Republic of Paraguay",
    "República del Paraguay",
    "Tetã Paraguái"
  ],
  "area": 406752,
  "borders": [
    "ARG",
    "BOL",
    "BRA"
  ],
  "capital": "Asunción",
  "demonym": "Paraguayan",
  "languages": {
    "grn": "Guaraní",
    "spa": "Spanish"
  },
  "latlng": [
    -23,
    -58
  ],
  "nativeName": "Paraguay",
  "population": 6893727,
  "region": "Americas",
  "subregion": "South America",
  "timezones": [
    "UTC−04:00"
  ],
  "tld": [
    ".py"
  ],
  "translations": {
    "deu": {
      "official": "Republik Paraguay",
      "common": "Paraguay"
    },
    "fra": {
      "official": "République du Paraguay",
      "common": "Paraguay"
    },
    "hrv": {
      "official": "Republika Paragvaj",
      "common": "Paragvaj"
    },
    "ita": {
      "official": "Repubblica del Paraguay",
      "common": "Paraguay"
    },
    "jpn": {
      "official": "パラグアイ共和国",
      "common": "パラグアイ"
    },
    "nld": {
      "official": "Republiek Paraguay",
      "common": "Paraguay"
    },
    "por": {
      "official": "República do Paraguai",
      "common": "Paraguai"
    },
    "rus": {
      "official": "Республика Парагвай",
      "common": "Парагвай"
    },
    "spa": {
      "official": "República de Paraguay",
      "common": "Paraguay"
    },
    "fin": {
      "official": "Paraguayn tasavalta",
      "common": "Paraguay"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/paraguay",
  "currency": [
    "PYG"
  ],
  "callingCode": [
    "595"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "PY",
    "ccn3": "600",
    "cca3": "PRY",
    "cioc": "PAR"
  }
}
},{}],172:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Peru",
    "official": "Republic of Peru",
    "native": {
      "aym": {
        "official": "Piruw Suyu",
        "common": "Piruw"
      },
      "que": {
        "official": "Piruw Ripuwlika",
        "common": "Piruw"
      },
      "spa": {
        "official": "República del Perú",
        "common": "Perú"
      }
    }
  },
  "altSpellings": [
    "PE",
    "Republic of Peru",
    "República del Perú"
  ],
  "area": 1285216,
  "borders": [
    "BOL",
    "BRA",
    "CHL",
    "COL",
    "ECU"
  ],
  "capital": "Lima",
  "demonym": "Peruvian",
  "languages": {
    "aym": "Aymara",
    "que": "Quechua",
    "spa": "Spanish"
  },
  "latlng": [
    -10,
    -76
  ],
  "nativeName": "Perú",
  "population": 30814175,
  "region": "Americas",
  "subregion": "South America",
  "timezones": [
    "UTC−05:00"
  ],
  "tld": [
    ".pe"
  ],
  "translations": {
    "deu": {
      "official": "Republik Peru",
      "common": "Peru"
    },
    "fra": {
      "official": "République du Pérou",
      "common": "Pérou"
    },
    "hrv": {
      "official": "Republika Peru",
      "common": "Peru"
    },
    "ita": {
      "official": "Repubblica del Perù",
      "common": "Perù"
    },
    "jpn": {
      "official": "ペルー共和国",
      "common": "ペルー"
    },
    "nld": {
      "official": "Republiek Peru",
      "common": "Peru"
    },
    "por": {
      "official": "República do Peru",
      "common": "Perú"
    },
    "rus": {
      "official": "Республика Перу",
      "common": "Перу"
    },
    "spa": {
      "official": "República de Perú",
      "common": "Perú"
    },
    "fin": {
      "official": "Perun tasavalta",
      "common": "Peru"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/peru",
  "currency": [
    "PEN"
  ],
  "callingCode": [
    "51"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "PE",
    "ccn3": "604",
    "cca3": "PER",
    "cioc": "PER"
  }
}
},{}],173:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Philippines",
    "official": "Republic of the Philippines",
    "native": {
      "eng": {
        "official": "Republic of the Philippines",
        "common": "Philippines"
      },
      "fil": {
        "official": "Republic of the Philippines",
        "common": "Pilipinas"
      }
    }
  },
  "altSpellings": [
    "PH",
    "Republic of the Philippines",
    "Repúblika ng Pilipinas"
  ],
  "area": 342353,
  "borders": [],
  "capital": "Manila",
  "demonym": "Filipino",
  "languages": {
    "eng": "English",
    "fil": "Filipino"
  },
  "latlng": [
    13,
    122
  ],
  "nativeName": "Pilipinas",
  "population": 100697400,
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "timezones": [
    "UTC+08:00"
  ],
  "tld": [
    ".ph"
  ],
  "translations": {
    "deu": {
      "official": "Republik der Philippinen",
      "common": "Philippinen"
    },
    "fra": {
      "official": "République des Philippines",
      "common": "Philippines"
    },
    "hrv": {
      "official": "Republika Filipini",
      "common": "Filipini"
    },
    "ita": {
      "official": "Repubblica delle Filippine",
      "common": "Filippine"
    },
    "jpn": {
      "official": "フィリピン共和国",
      "common": "フィリピン"
    },
    "nld": {
      "official": "Republiek der Filipijnen",
      "common": "Filipijnen"
    },
    "por": {
      "official": "República das Filipinas",
      "common": "Filipinas"
    },
    "rus": {
      "official": "Республика Филиппины",
      "common": "Филиппины"
    },
    "spa": {
      "official": "República de las Filipinas",
      "common": "Filipinas"
    },
    "fin": {
      "official": "Filippiinien tasavalta",
      "common": "Filippiinit"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/philippines",
  "currency": [
    "PHP"
  ],
  "callingCode": [
    "63"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "PH",
    "ccn3": "608",
    "cca3": "PHL",
    "cioc": "PHI"
  }
}
},{}],174:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Pitcairn Islands",
    "official": "Pitcairn Group of Islands",
    "native": {
      "eng": {
        "official": "Pitcairn Group of Islands",
        "common": "Pitcairn Islands"
      }
    }
  },
  "tld": [
    ".pn"
  ],
  "currency": [
    "NZD"
  ],
  "callingCode": [
    "64"
  ],
  "capital": "Adamstown",
  "altSpellings": [
    "PN",
    "Pitcairn",
    "Pitcairn Henderson Ducie and Oeno Islands"
  ],
  "region": "Oceania",
  "subregion": "Polynesia",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Pitcairn Inselgruppe",
      "common": "Pitcairn"
    },
    "fra": {
      "official": "Groupe d'îles Pitcairn",
      "common": "Îles Pitcairn"
    },
    "hrv": {
      "official": "Pitcairn skupine otoka",
      "common": "Pitcairnovo otočje"
    },
    "ita": {
      "official": "Pitcairn gruppo di isole",
      "common": "Isole Pitcairn"
    },
    "jpn": {
      "official": "島のピトケアングループ",
      "common": "ピトケアン"
    },
    "nld": {
      "official": "Pitcairn groep eilanden",
      "common": "Pitcairneilanden"
    },
    "por": {
      "official": "Pitcairn grupo de ilhas",
      "common": "Ilhas Pitcairn"
    },
    "rus": {
      "official": "Питкэрн группа островов",
      "common": "Острова Питкэрн"
    },
    "spa": {
      "official": "Grupo de Islas Pitcairn",
      "common": "Islas Pitcairn"
    },
    "fin": {
      "official": "Pitcairn",
      "common": "Pitcairn"
    }
  },
  "latlng": [
    -25.06666666,
    -130.1
  ],
  "demonym": "Pitcairn Islander",
  "landlocked": false,
  "borders": [],
  "area": 47,
  "codes": {
    "cca2": "PN",
    "ccn3": "612",
    "cca3": "PCN",
    "cioc": ""
  }
}
},{}],175:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Poland",
    "official": "Republic of Poland",
    "native": {
      "pol": {
        "official": "Rzeczpospolita Polska",
        "common": "Polska"
      }
    }
  },
  "altSpellings": [
    "PL",
    "Republic of Poland",
    "Rzeczpospolita Polska"
  ],
  "area": 312679,
  "borders": [
    "BLR",
    "CZE",
    "DEU",
    "LTU",
    "RUS",
    "SVK",
    "UKR"
  ],
  "capital": "Warsaw",
  "demonym": "Polish",
  "languages": {
    "pol": "Polish"
  },
  "latlng": [
    52,
    20
  ],
  "nativeName": "Polska",
  "population": 38496000,
  "region": "Europe",
  "subregion": "Eastern Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".pl"
  ],
  "translations": {
    "deu": {
      "official": "Republik Polen",
      "common": "Polen"
    },
    "fra": {
      "official": "République de Pologne",
      "common": "Pologne"
    },
    "hrv": {
      "official": "Republika Poljska",
      "common": "Poljska"
    },
    "ita": {
      "official": "Repubblica di Polonia",
      "common": "Polonia"
    },
    "jpn": {
      "official": "ポーランド共和国",
      "common": "ポーランド"
    },
    "nld": {
      "official": "Republiek Polen",
      "common": "Polen"
    },
    "por": {
      "official": "República da Polónia",
      "common": "Polónia"
    },
    "rus": {
      "official": "Республика Польша",
      "common": "Польша"
    },
    "spa": {
      "official": "República de Polonia",
      "common": "Polonia"
    },
    "fin": {
      "official": "Puolan tasavalta",
      "common": "Puola"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/poland",
  "currency": [
    "PLN"
  ],
  "callingCode": [
    "48"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "PL",
    "ccn3": "616",
    "cca3": "POL",
    "cioc": "POL"
  }
}
},{}],176:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Portugal",
    "official": "Portuguese Republic",
    "native": {
      "por": {
        "official": "República português",
        "common": "Portugal"
      }
    }
  },
  "altSpellings": [
    "PT",
    "Portuguesa",
    "Portuguese Republic",
    "República Portuguesa"
  ],
  "area": 92090,
  "borders": [
    "ESP"
  ],
  "capital": "Lisbon",
  "demonym": "Portuguese",
  "languages": {
    "por": "Portuguese"
  },
  "latlng": [
    39.5,
    -8
  ],
  "nativeName": "Portugal",
  "population": 10477800,
  "region": "Europe",
  "subregion": "Southern Europe",
  "timezones": [
    "UTC−01:00",
    "UTC"
  ],
  "tld": [
    ".pt"
  ],
  "translations": {
    "deu": {
      "official": "Portugiesische Republik",
      "common": "Portugal"
    },
    "fra": {
      "official": "République portugaise",
      "common": "Portugal"
    },
    "hrv": {
      "official": "Portugalska Republika",
      "common": "Portugal"
    },
    "ita": {
      "official": "Repubblica portoghese",
      "common": "Portogallo"
    },
    "jpn": {
      "official": "ポルトガル共和国",
      "common": "ポルトガル"
    },
    "nld": {
      "official": "Portugese Republiek",
      "common": "Portugal"
    },
    "por": {
      "official": "República português",
      "common": "Portugal"
    },
    "rus": {
      "official": "Португальская Республика",
      "common": "Португалия"
    },
    "spa": {
      "official": "República Portuguesa",
      "common": "Portugal"
    },
    "fin": {
      "official": "Portugalin tasavalta",
      "common": "Portugali"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/portugal",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "351"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "PT",
    "ccn3": "620",
    "cca3": "PRT",
    "cioc": "POR"
  }
}
},{}],177:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Puerto Rico",
    "official": "Commonwealth of Puerto Rico",
    "native": {
      "eng": {
        "official": "Commonwealth of Puerto Rico",
        "common": "Puerto Rico"
      },
      "spa": {
        "official": "Estado Libre Asociado de Puerto Rico",
        "common": "Puerto Rico"
      }
    }
  },
  "altSpellings": [
    "PR",
    "Commonwealth of Puerto Rico",
    "Estado Libre Asociado de Puerto Rico"
  ],
  "area": 8870,
  "borders": [],
  "capital": "San Juan",
  "demonym": "Puerto Rican",
  "languages": {
    "eng": "English",
    "spa": "Spanish"
  },
  "latlng": [
    18.25,
    -66.5
  ],
  "nativeName": "Puerto Rico",
  "population": 3615086,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": null,
  "tld": [
    ".pr"
  ],
  "translations": {
    "deu": {
      "official": "Commonwealth von Puerto Rico",
      "common": "Puerto Rico"
    },
    "fra": {
      "official": "Porto Rico",
      "common": "Porto Rico"
    },
    "hrv": {
      "official": "Zajednica Puerto Rico",
      "common": "Portoriko"
    },
    "ita": {
      "official": "Commonwealth di Porto Rico",
      "common": "Porto Rico"
    },
    "jpn": {
      "official": "プエルトリコのコモンウェルス",
      "common": "プエルトリコ"
    },
    "nld": {
      "official": "Gemenebest van Puerto Rico",
      "common": "Puerto Rico"
    },
    "por": {
      "official": "Commonwealth of Puerto Rico",
      "common": "Porto Rico"
    },
    "rus": {
      "official": "Содружество Пуэрто-Рико",
      "common": "Пуэрто-Рико"
    },
    "spa": {
      "official": "Asociado de Puerto Rico",
      "common": "Puerto Rico"
    },
    "fin": {
      "official": "Puerto Rico",
      "common": "Puerto Rico"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/puerto_rico",
  "currency": [
    "USD"
  ],
  "callingCode": [
    "1787",
    "1939"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "PR",
    "ccn3": "630",
    "cca3": "PRI",
    "cioc": "PUR"
  }
}
},{}],178:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Qatar",
    "official": "State of Qatar",
    "native": {
      "ara": {
        "official": "دولة قطر",
        "common": "قطر"
      }
    }
  },
  "altSpellings": [
    "QA",
    "State of Qatar",
    "Dawlat Qaṭar"
  ],
  "area": 11586,
  "borders": [
    "SAU"
  ],
  "capital": "Doha",
  "demonym": "Qatari",
  "languages": {
    "ara": "Arabic"
  },
  "latlng": [
    25.5,
    51.25
  ],
  "nativeName": "قطر",
  "population": 2269672,
  "region": "Asia",
  "subregion": "Western Asia",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".qa",
    "قطر."
  ],
  "translations": {
    "deu": {
      "official": "Staat Katar",
      "common": "Katar"
    },
    "fra": {
      "official": "État du Qatar",
      "common": "Qatar"
    },
    "hrv": {
      "official": "Država Katar",
      "common": "Katar"
    },
    "ita": {
      "official": "Stato del Qatar",
      "common": "Qatar"
    },
    "jpn": {
      "official": "カタール国",
      "common": "カタール"
    },
    "nld": {
      "official": "Staat Qatar",
      "common": "Qatar"
    },
    "por": {
      "official": "Estado do Qatar",
      "common": "Catar"
    },
    "rus": {
      "official": "Государство Катар",
      "common": "Катар"
    },
    "spa": {
      "official": "Estado de Qatar",
      "common": "Catar"
    },
    "fin": {
      "official": "Qatarin valtio",
      "common": "Qatar"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/qatar",
  "currency": [
    "QAR"
  ],
  "callingCode": [
    "974"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "QA",
    "ccn3": "634",
    "cca3": "QAT",
    "cioc": "QAT"
  }
}
},{}],179:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Réunion",
    "official": "Réunion Island",
    "native": {
      "fra": {
        "official": "Ile de la Réunion",
        "common": "La Réunion"
      }
    }
  },
  "tld": [
    ".re"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "262"
  ],
  "capital": "Saint-Denis",
  "altSpellings": [
    "RE",
    "Reunion"
  ],
  "region": "Africa",
  "subregion": "Eastern Africa",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Réunion",
      "common": "Réunion"
    },
    "fra": {
      "official": "Ile de la Réunion",
      "common": "Réunion"
    },
    "hrv": {
      "official": "Réunion Island",
      "common": "Réunion"
    },
    "ita": {
      "official": "Réunion",
      "common": "Riunione"
    },
    "jpn": {
      "official": "レユニオン島",
      "common": "レユニオン"
    },
    "nld": {
      "official": "Réunion",
      "common": "Réunion"
    },
    "por": {
      "official": "Ilha da Reunião",
      "common": "Reunião"
    },
    "rus": {
      "official": "Реюньон",
      "common": "Реюньон"
    },
    "spa": {
      "official": "Isla de la Reunión",
      "common": "Reunión"
    },
    "fin": {
      "official": "Réunion",
      "common": "Réunion"
    }
  },
  "latlng": [
    -21.15,
    55.5
  ],
  "demonym": "French",
  "landlocked": false,
  "borders": [],
  "area": 2511,
  "codes": {
    "cca2": "RE",
    "ccn3": "638",
    "cca3": "REU",
    "cioc": ""
  }
}
},{}],180:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Republic of the Congo",
    "official": "Republic of the Congo",
    "native": {
      "fra": {
        "official": "République du Congo",
        "common": "République du Congo"
      },
      "kon": {
        "official": "Repubilika ya Kongo",
        "common": "Repubilika ya Kongo"
      },
      "lin": {
        "official": "Republíki ya Kongó",
        "common": "Republíki ya Kongó"
      }
    }
  },
  "tld": [
    ".cg"
  ],
  "currency": [
    "XAF"
  ],
  "callingCode": [
    "242"
  ],
  "capital": "Brazzaville",
  "altSpellings": [
    "CG",
    "Congo",
    "Congo-Brazzaville"
  ],
  "region": "Africa",
  "subregion": "Middle Africa",
  "languages": {
    "fra": "French",
    "kon": "Kikongo",
    "lin": "Lingala"
  },
  "translations": {
    "cym": {
      "official": "Republic of the Congo",
      "common": "Gweriniaeth y Congo"
    },
    "deu": {
      "official": "Republik Kongo",
      "common": "Kongo"
    },
    "fra": {
      "official": "République du Congo",
      "common": "Congo"
    },
    "hrv": {
      "official": "Republika Kongo",
      "common": "Kongo"
    },
    "ita": {
      "official": "Repubblica del Congo",
      "common": "Congo"
    },
    "jpn": {
      "official": "コンゴ共和国",
      "common": "コンゴ共和国"
    },
    "nld": {
      "official": "Republiek Congo",
      "common": "Congo"
    },
    "por": {
      "official": "República do Congo",
      "common": "Congo"
    },
    "rus": {
      "official": "Республика Конго",
      "common": "Республика Конго"
    },
    "spa": {
      "official": "República del Congo",
      "common": "Congo"
    },
    "fin": {
      "official": "Kongon tasavalta",
      "common": "Kongo-Brazzaville"
    }
  },
  "latlng": [
    -1,
    15
  ],
  "demonym": "Congolese",
  "landlocked": false,
  "borders": [
    "AGO",
    "CMR",
    "CAF",
    "COD",
    "GAB"
  ],
  "area": 342000,
  "codes": {
    "cca2": "CG",
    "ccn3": "178",
    "cca3": "COG",
    "cioc": "CGO"
  }
}
},{}],181:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Romania",
    "official": "Romania",
    "native": {
      "ron": {
        "official": "România",
        "common": "România"
      }
    }
  },
  "tld": [
    ".ro"
  ],
  "currency": [
    "RON"
  ],
  "callingCode": [
    "40"
  ],
  "capital": "Bucharest",
  "altSpellings": [
    "RO",
    "Rumania",
    "Roumania",
    "România"
  ],
  "region": "Europe",
  "subregion": "Eastern Europe",
  "languages": {
    "ron": "Romanian"
  },
  "translations": {
    "deu": {
      "official": "Rumänien",
      "common": "Rumänien"
    },
    "fra": {
      "official": "Roumanie",
      "common": "Roumanie"
    },
    "hrv": {
      "official": "Rumunija",
      "common": "Rumunjska"
    },
    "ita": {
      "official": "Romania",
      "common": "Romania"
    },
    "jpn": {
      "official": "ルーマニア",
      "common": "ルーマニア"
    },
    "nld": {
      "official": "Roemenië",
      "common": "Roemenië"
    },
    "por": {
      "official": "Romênia",
      "common": "Roménia"
    },
    "rus": {
      "official": "Румыния",
      "common": "Румыния"
    },
    "spa": {
      "official": "Rumania",
      "common": "Rumania"
    },
    "fin": {
      "official": "Romania",
      "common": "Romania"
    }
  },
  "latlng": [
    46,
    25
  ],
  "demonym": "Romanian",
  "landlocked": false,
  "borders": [
    "BGR",
    "HUN",
    "MDA",
    "SRB",
    "UKR"
  ],
  "area": 238391,
  "codes": {
    "cca2": "RO",
    "ccn3": "642",
    "cca3": "ROU",
    "cioc": "ROU"
  }
}
},{}],182:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Russia",
    "official": "Russian Federation",
    "native": {
      "rus": {
        "official": "Русская Федерация",
        "common": "Россия"
      }
    }
  },
  "altSpellings": [
    "RU",
    "Rossiya",
    "Russian Federation",
    "Российская Федерация",
    "Rossiyskaya Federatsiya"
  ],
  "area": 17098242,
  "borders": [
    "AZE",
    "BLR",
    "CHN",
    "EST",
    "FIN",
    "GEO",
    "KAZ",
    "PRK",
    "LVA",
    "LTU",
    "MNG",
    "NOR",
    "POL",
    "UKR"
  ],
  "capital": "Moscow",
  "demonym": "Russian",
  "languages": {
    "rus": "Russian"
  },
  "latlng": [
    60,
    100
  ],
  "nativeName": "Россия",
  "population": 146233000,
  "region": "Europe",
  "subregion": "Eastern Europe",
  "timezones": [
    "UTC+03:00",
    "UTC+04:00",
    "UTC+06:00",
    "UTC+07:00",
    "UTC+08:00",
    "UTC+09:00",
    "UTC+10:00",
    "UTC+11:00",
    "UTC+12:00"
  ],
  "tld": [
    ".ru",
    ".su",
    ".рф"
  ],
  "translations": {
    "deu": {
      "official": "Russische Föderation",
      "common": "Russland"
    },
    "fra": {
      "official": "Fédération de Russie",
      "common": "Russie"
    },
    "hrv": {
      "official": "Ruska Federacija",
      "common": "Rusija"
    },
    "ita": {
      "official": "Federazione russa",
      "common": "Russia"
    },
    "jpn": {
      "official": "ロシア連邦",
      "common": "ロシア連邦"
    },
    "nld": {
      "official": "Russische Federatie",
      "common": "Rusland"
    },
    "por": {
      "official": "Federação Russa",
      "common": "Rússia"
    },
    "rus": {
      "official": "Россия Федерация",
      "common": "Россия"
    },
    "spa": {
      "official": "Federación de Rusia",
      "common": "Rusia"
    },
    "fin": {
      "official": "Venäjän federaatio",
      "common": "Venäjä"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/russia",
  "currency": [
    "RUB"
  ],
  "callingCode": [
    "7"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "RU",
    "ccn3": "643",
    "cca3": "RUS",
    "cioc": "RUS"
  }
}
},{}],183:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Rwanda",
    "official": "Republic of Rwanda",
    "native": {
      "eng": {
        "official": "Republic of Rwanda",
        "common": "Rwanda"
      },
      "fra": {
        "official": "République rwandaise",
        "common": "Rwanda"
      },
      "kin": {
        "official": "Repubulika y'u Rwanda",
        "common": "Rwanda"
      }
    }
  },
  "altSpellings": [
    "RW",
    "Republic of Rwanda",
    "Repubulika y'u Rwanda",
    "République du Rwanda"
  ],
  "area": 26338,
  "borders": [
    "BDI",
    "COD",
    "TZA",
    "UGA"
  ],
  "capital": "Kigali",
  "demonym": "Rwandan",
  "languages": {
    "eng": "English",
    "fra": "French",
    "kin": "Kinyarwanda"
  },
  "latlng": [
    -2,
    30
  ],
  "nativeName": "Rwanda",
  "population": 10996891,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".rw"
  ],
  "translations": {
    "deu": {
      "official": "Republik Ruanda",
      "common": "Ruanda"
    },
    "fra": {
      "official": "République rwandaise",
      "common": "Rwanda"
    },
    "hrv": {
      "official": "Republika Ruandi",
      "common": "Ruanda"
    },
    "ita": {
      "official": "Repubblica del Ruanda",
      "common": "Ruanda"
    },
    "jpn": {
      "official": "ルワンダ共和国",
      "common": "ルワンダ"
    },
    "nld": {
      "official": "Republiek Rwanda",
      "common": "Rwanda"
    },
    "por": {
      "official": "República do Ruanda",
      "common": "Ruanda"
    },
    "rus": {
      "official": "Республика Руанда",
      "common": "Руанда"
    },
    "spa": {
      "official": "República de Rwanda",
      "common": "Ruanda"
    },
    "fin": {
      "official": "Ruandan tasavalta",
      "common": "Ruanda"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/rwanda",
  "currency": [
    "RWF"
  ],
  "callingCode": [
    "250"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "RW",
    "ccn3": "646",
    "cca3": "RWA",
    "cioc": "RWA"
  }
}
},{}],184:[function(require,module,exports){
module.exports={
  "name": {
    "common": "São Tomé and Príncipe",
    "official": "Democratic Republic of São Tomé and Príncipe",
    "native": {
      "por": {
        "official": "República Democrática do São Tomé e Príncipe",
        "common": "São Tomé e Príncipe"
      }
    }
  },
  "tld": [
    ".st"
  ],
  "currency": [
    "STD"
  ],
  "callingCode": [
    "239"
  ],
  "capital": "São Tomé",
  "altSpellings": [
    "ST",
    "Democratic Republic of São Tomé and Príncipe",
    "Sao Tome and Principe",
    "República Democrática de São Tomé e Príncipe"
  ],
  "region": "Africa",
  "subregion": "Middle Africa",
  "languages": {
    "por": "Portuguese"
  },
  "translations": {
    "deu": {
      "official": "Demokratische Republik São Tomé und Príncipe",
      "common": "São Tomé und Príncipe"
    },
    "fra": {
      "official": "République démocratique de São Tomé et Príncipe",
      "common": "São Tomé et Príncipe"
    },
    "hrv": {
      "official": "Demokratska Republika São Tome i Principe",
      "common": "Sveti Toma i Princip"
    },
    "ita": {
      "official": "Repubblica democratica di São Tomé e Príncipe",
      "common": "São Tomé e Príncipe"
    },
    "jpn": {
      "official": "サントメ·プリンシペ民主共和国",
      "common": "サントメ・プリンシペ"
    },
    "nld": {
      "official": "Democratische Republiek Sao Tomé en Principe",
      "common": "Sao Tomé en Principe"
    },
    "por": {
      "official": "República Democrática de São Tomé e Príncipe",
      "common": "São Tomé e Príncipe"
    },
    "rus": {
      "official": "Демократическая Республика Сан-Томе и Принсипи",
      "common": "Сан-Томе и Принсипи"
    },
    "spa": {
      "official": "República Democrática de Santo Tomé y Príncipe",
      "common": "Santo Tomé y Príncipe"
    },
    "fin": {
      "official": "São Tomé ja Príncipen demokraattinen tasavalta",
      "common": "São Téme ja Príncipe"
    }
  },
  "latlng": [
    1,
    7
  ],
  "demonym": "Sao Tomean",
  "landlocked": false,
  "borders": [],
  "area": 964,
  "codes": {
    "cca2": "ST",
    "ccn3": "678",
    "cca3": "STP",
    "cioc": "STP"
  }
}
},{}],185:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Saint Barthélemy",
    "official": "Collectivity of Saint Barthélemy",
    "native": {
      "fra": {
        "official": "Collectivité de Saint-Barthélemy",
        "common": "Saint-Barthélemy"
      }
    }
  },
  "tld": [
    ".bl"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "590"
  ],
  "capital": "Gustavia",
  "altSpellings": [
    "BL",
    "St. Barthelemy",
    "Collectivity of Saint Barthélemy",
    "Collectivité de Saint-Barthélemy"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Gebietskörperschaft Saint -Barthélemy",
      "common": "Saint-Barthélemy"
    },
    "fra": {
      "official": "Collectivité de Saint-Barthélemy",
      "common": "Saint-Barthélemy"
    },
    "hrv": {
      "official": "Kolektivnost sv Barthélemy",
      "common": "Saint Barthélemy"
    },
    "ita": {
      "official": "Collettività di Saint Barthélemy",
      "common": "Antille Francesi"
    },
    "jpn": {
      "official": "サン·バルテルミー島の集合体",
      "common": "サン・バルテルミー"
    },
    "nld": {
      "official": "Gemeenschap Saint Barthélemy",
      "common": "Saint Barthélemy"
    },
    "por": {
      "official": "Coletividade de Saint Barthélemy",
      "common": "São Bartolomeu"
    },
    "rus": {
      "official": "Коллективность Санкт -Бартельми",
      "common": "Сен-Бартелеми"
    },
    "spa": {
      "official": "Colectividad de San Barthélemy",
      "common": "San Bartolomé"
    },
    "fin": {
      "official": "Saint-Barthélemyn yhteisö",
      "common": "Saint-Barthélemy"
    }
  },
  "latlng": [
    18.5,
    -63.41666666
  ],
  "demonym": "Saint Barthélemy Islander",
  "landlocked": false,
  "borders": [],
  "area": 21,
  "codes": {
    "cca2": "BL",
    "ccn3": "652",
    "cca3": "BLM",
    "cioc": ""
  }
}
},{}],186:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Saint Kitts and Nevis",
    "official": "Federation of Saint Christopher and Nevisa",
    "native": {
      "eng": {
        "official": "Federation of Saint Christopher and Nevisa",
        "common": "Saint Kitts and Nevis"
      }
    }
  },
  "altSpellings": [
    "KN",
    "Federation of Saint Christopher and Nevis"
  ],
  "area": 261,
  "borders": [],
  "capital": "Basseterre",
  "demonym": "Kittitian or Nevisian",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    17.33333333,
    -62.75
  ],
  "nativeName": "Saint Kitts and Nevis",
  "population": 55000,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": [
    "UTC−04:00"
  ],
  "tld": [
    ".kn"
  ],
  "translations": {
    "deu": {
      "official": "Föderation von Saint Kitts und Nevisa",
      "common": "Saint Christopher und Nevis"
    },
    "fra": {
      "official": "Fédération de Saint -Christophe-et Nevisa",
      "common": "Saint-Christophe-et-Niévès"
    },
    "hrv": {
      "official": "Federacija Sv.Kristofora i Nevisa",
      "common": "Sveti Kristof i Nevis"
    },
    "ita": {
      "official": "Federazione di Saint Christopher e Nevisa",
      "common": "Saint Kitts e Nevis"
    },
    "jpn": {
      "official": "セントクリストファーNevisa連盟",
      "common": "セントクリストファー・ネイビス"
    },
    "nld": {
      "official": "Federatie van Saint Kitts en Nevisa",
      "common": "Saint Kitts en Nevis"
    },
    "por": {
      "official": "Federação de São Cristóvão e Nevisa",
      "common": "São Cristóvão e Nevis"
    },
    "rus": {
      "official": "Федерация Сент-Кристофер и Nevisa",
      "common": "Сент-Китс и Невис"
    },
    "spa": {
      "official": "Federación de San Cristóbal y Nevisa",
      "common": "San Cristóbal y Nieves"
    },
    "fin": {
      "official": "Saint Christopherin ja Nevisin federaatio",
      "common": "Saint Kitts ja Nevis"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/saint_kitts_and_nevis",
  "currency": [
    "XCD"
  ],
  "callingCode": [
    "1869"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "KN",
    "ccn3": "659",
    "cca3": "KNA",
    "cioc": "SKN"
  }
}
},{}],187:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Saint Lucia",
    "official": "Saint Lucia",
    "native": {
      "eng": {
        "official": "Saint Lucia",
        "common": "Saint Lucia"
      }
    }
  },
  "altSpellings": [
    "LC"
  ],
  "area": 616,
  "borders": [],
  "capital": "Castries",
  "demonym": "Saint Lucian",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    13.88333333,
    -60.96666666
  ],
  "nativeName": "Saint Lucia",
  "population": 184000,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": [
    "UTC−04:00"
  ],
  "tld": [
    ".lc"
  ],
  "translations": {
    "deu": {
      "official": "St. Lucia",
      "common": "Saint Lucia"
    },
    "fra": {
      "official": "Sainte-Lucie",
      "common": "Sainte-Lucie"
    },
    "hrv": {
      "official": "Sveta Lucija",
      "common": "Sveta Lucija"
    },
    "ita": {
      "official": "Santa Lucia",
      "common": "Santa Lucia"
    },
    "jpn": {
      "official": "セントルシア",
      "common": "セントルシア"
    },
    "nld": {
      "official": "Saint Lucia",
      "common": "Saint Lucia"
    },
    "por": {
      "official": "Santa Lúcia",
      "common": "Santa Lúcia"
    },
    "rus": {
      "official": "Сент-Люсия",
      "common": "Сент-Люсия"
    },
    "spa": {
      "official": "Santa Lucía",
      "common": "Santa Lucía"
    },
    "fin": {
      "official": "Saint Lucia",
      "common": "Saint Lucia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/saint_lucia",
  "currency": [
    "XCD"
  ],
  "callingCode": [
    "1758"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "LC",
    "ccn3": "662",
    "cca3": "LCA",
    "cioc": "LCA"
  }
}
},{}],188:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Saint Martin",
    "official": "Saint Martin",
    "native": {
      "fra": {
        "official": "Saint-Martin",
        "common": "Saint-Martin"
      }
    }
  },
  "tld": [
    ".fr",
    ".gp"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "590"
  ],
  "capital": "Marigot",
  "altSpellings": [
    "MF",
    "Collectivity of Saint Martin",
    "Collectivité de Saint-Martin",
    "Saint Martin (French part)"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "St. Martin",
      "common": "Saint Martin"
    },
    "fra": {
      "official": "Saint-Martin",
      "common": "Saint-Martin"
    },
    "hrv": {
      "official": "Saint Martin",
      "common": "Sveti Martin"
    },
    "ita": {
      "official": "saint Martin",
      "common": "Saint Martin"
    },
    "jpn": {
      "official": "サンマルタン島",
      "common": "サン・マルタン（フランス領）"
    },
    "nld": {
      "official": "Saint Martin",
      "common": "Saint-Martin"
    },
    "por": {
      "official": "saint Martin",
      "common": "São Martinho"
    },
    "rus": {
      "official": "Сен-Мартен",
      "common": "Сен-Мартен"
    },
    "spa": {
      "official": "Saint Martin",
      "common": "Saint Martin"
    },
    "fin": {
      "official": "Saint-Martin",
      "common": "Saint-Martin"
    }
  },
  "latlng": [
    18.08333333,
    -63.95
  ],
  "demonym": "Saint Martin Islander",
  "landlocked": false,
  "borders": [
    "SXM"
  ],
  "area": 53,
  "codes": {
    "cca2": "MF",
    "ccn3": "663",
    "cca3": "MAF",
    "cioc": ""
  }
}
},{}],189:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Saint Pierre and Miquelon",
    "official": "Saint Pierre and Miquelon",
    "native": {
      "fra": {
        "official": "Collectivité territoriale de Saint-Pierre-et-Miquelon",
        "common": "Saint-Pierre-et-Miquelon"
      }
    }
  },
  "altSpellings": [
    "PM",
    "Collectivité territoriale de Saint-Pierre-et-Miquelon"
  ],
  "area": 242,
  "borders": [],
  "capital": "Saint-Pierre",
  "demonym": "French",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    46.83333333,
    -56.33333333
  ],
  "nativeName": "Saint-Pierre-et-Miquelon",
  "population": 6081,
  "region": "Americas",
  "subregion": "Northern America",
  "timezones": null,
  "tld": [
    ".pm"
  ],
  "translations": {
    "deu": {
      "official": "St. Pierre und Miquelon",
      "common": "Saint-Pierre und Miquelon"
    },
    "fra": {
      "official": "Saint-Pierre-et-Miquelon",
      "common": "Saint-Pierre-et-Miquelon"
    },
    "hrv": {
      "official": "Saint Pierre i Miquelon",
      "common": "Sveti Petar i Mikelon"
    },
    "ita": {
      "official": "Saint Pierre e Miquelon",
      "common": "Saint-Pierre e Miquelon"
    },
    "jpn": {
      "official": "サンピエール島·ミクロン島",
      "common": "サンピエール島・ミクロン島"
    },
    "nld": {
      "official": "Saint-Pierre en Miquelon",
      "common": "Saint Pierre en Miquelon"
    },
    "por": {
      "official": "Saint Pierre e Miquelon",
      "common": "Saint-Pierre e Miquelon"
    },
    "rus": {
      "official": "Сен-Пьер и Микелон",
      "common": "Сен-Пьер и Микелон"
    },
    "spa": {
      "official": "San Pedro y Miquelón",
      "common": "San Pedro y Miquelón"
    },
    "fin": {
      "official": "Saint-Pierre ja Miquelon",
      "common": "Saint-Pierre ja Miquelon"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/saint_pierre_and_miquelon",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "508"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "PM",
    "ccn3": "666",
    "cca3": "SPM",
    "cioc": ""
  }
}
},{}],190:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Saint Vincent and the Grenadines",
    "official": "Saint Vincent and the Grenadines",
    "native": {
      "eng": {
        "official": "Saint Vincent and the Grenadines",
        "common": "Saint Vincent and the Grenadines"
      }
    }
  },
  "altSpellings": [
    "VC"
  ],
  "area": 389,
  "borders": [],
  "capital": "Kingstown",
  "demonym": "Saint Vincentian",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    13.25,
    -61.2
  ],
  "nativeName": "Saint Vincent and the Grenadines",
  "population": 109000,
  "region": "Americas",
  "subregion": "Caribbean",
  "timezones": [
    "UTC−04:00"
  ],
  "tld": [
    ".vc"
  ],
  "translations": {
    "deu": {
      "official": "St. Vincent und die Grenadinen",
      "common": "Saint Vincent und die Grenadinen"
    },
    "fra": {
      "official": "Saint-Vincent-et-les Grenadines",
      "common": "Saint-Vincent-et-les-Grenadines"
    },
    "hrv": {
      "official": "Sveti Vincent i Grenadini",
      "common": "Sveti Vincent i Grenadini"
    },
    "ita": {
      "official": "Saint Vincent e Grenadine",
      "common": "Saint Vincent e Grenadine"
    },
    "jpn": {
      "official": "セントビンセントおよびグレナディーン諸島",
      "common": "セントビンセントおよびグレナディーン諸島"
    },
    "nld": {
      "official": "Saint Vincent en de Grenadines",
      "common": "Saint Vincent en de Grenadines"
    },
    "por": {
      "official": "São Vicente e Granadinas",
      "common": "São Vincente e Granadinas"
    },
    "rus": {
      "official": "Сент-Винсент и Гренадины",
      "common": "Сент-Винсент и Гренадины"
    },
    "spa": {
      "official": "San Vicente y las Granadinas",
      "common": "San Vicente y Granadinas"
    },
    "fin": {
      "official": "Saint Vincent ja Grenadiinit",
      "common": "Saint Vincent ja Grenadiinit"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/saint_vincent_and_the_grenadines",
  "currency": [
    "XCD"
  ],
  "callingCode": [
    "1784"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "VC",
    "ccn3": "670",
    "cca3": "VCT",
    "cioc": "VIN"
  }
}
},{}],191:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Samoa",
    "official": "Independent State of Samoa",
    "native": {
      "eng": {
        "official": "Independent State of Samoa",
        "common": "Samoa"
      },
      "smo": {
        "official": "Malo Saʻoloto Tutoʻatasi o Sāmoa",
        "common": "Sāmoa"
      }
    }
  },
  "altSpellings": [
    "WS",
    "Independent State of Samoa",
    "Malo Saʻoloto Tutoʻatasi o Sāmoa"
  ],
  "area": 2842,
  "borders": [],
  "capital": "Apia",
  "demonym": "Samoan",
  "languages": {
    "eng": "English",
    "smo": "Samoan"
  },
  "latlng": [
    -13.58333333,
    -172.33333333
  ],
  "nativeName": "Samoa",
  "population": 187820,
  "region": "Oceania",
  "subregion": "Polynesia",
  "timezones": [
    "UTC+13:00"
  ],
  "tld": [
    ".ws"
  ],
  "translations": {
    "deu": {
      "official": "Unabhängige Staat Samoa",
      "common": "Samoa"
    },
    "fra": {
      "official": "Samoa",
      "common": "Samoa"
    },
    "hrv": {
      "official": "Nezavisna Država Samoa",
      "common": "Samoa"
    },
    "ita": {
      "official": "Stato indipendente di Samoa",
      "common": "Samoa"
    },
    "jpn": {
      "official": "サモア独立国",
      "common": "サモア"
    },
    "nld": {
      "official": "Onafhankelijke Staat Samoa",
      "common": "Samoa"
    },
    "por": {
      "official": "Estado Independente de Samoa",
      "common": "Samoa"
    },
    "rus": {
      "official": "Независимое Государство Самоа",
      "common": "Самоа"
    },
    "spa": {
      "official": "Estado Independiente de Samoa",
      "common": "Samoa"
    },
    "fin": {
      "official": "Samoan itsenäinen valtio",
      "common": "Samoa"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/samoa",
  "currency": [
    "WST"
  ],
  "callingCode": [
    "685"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "WS",
    "ccn3": "882",
    "cca3": "WSM",
    "cioc": "SAM"
  }
}
},{}],192:[function(require,module,exports){
module.exports={
  "name": {
    "common": "San Marino",
    "official": "Most Serene Republic of San Marino",
    "native": {
      "ita": {
        "official": "Serenissima Repubblica di San Marino",
        "common": "San Marino"
      }
    }
  },
  "altSpellings": [
    "SM",
    "Republic of San Marino",
    "Repubblica di San Marino"
  ],
  "area": 61,
  "borders": [
    "ITA"
  ],
  "capital": "City of San Marino",
  "demonym": "Sammarinese",
  "languages": {
    "ita": "Italian"
  },
  "latlng": [
    43.76666666,
    12.41666666
  ],
  "nativeName": "San Marino",
  "population": 32743,
  "region": "Europe",
  "subregion": "Southern Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".sm"
  ],
  "translations": {
    "deu": {
      "official": "Republik San Marino",
      "common": "San Marino"
    },
    "fra": {
      "official": "République de Saint-Marin",
      "common": "Saint-Marin"
    },
    "hrv": {
      "official": "Većina Serene Republika San Marino",
      "common": "San Marino"
    },
    "ita": {
      "official": "Serenissima Repubblica di San Marino",
      "common": "San Marino"
    },
    "jpn": {
      "official": "サンマリノのほとんどセリーヌ共和国",
      "common": "サンマリノ"
    },
    "nld": {
      "official": "Meest Serene Republiek San Marino",
      "common": "San Marino"
    },
    "por": {
      "official": "Sereníssima República de San Marino",
      "common": "San Marino"
    },
    "rus": {
      "official": "Большинство Serene Республика Сан-Марино",
      "common": "Сан-Марино"
    },
    "spa": {
      "official": "Serenísima República de San Marino",
      "common": "San Marino"
    },
    "fin": {
      "official": "San Marinon seesteinen tasavalta",
      "common": "San Marino"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/san_marino",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "378"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "SM",
    "ccn3": "674",
    "cca3": "SMR",
    "cioc": "SMR"
  }
}
},{}],193:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Saudi Arabia",
    "official": "Kingdom of Saudi Arabia",
    "native": {
      "ara": {
        "official": "المملكة العربية السعودية",
        "common": "العربية السعودية"
      }
    }
  },
  "altSpellings": [
    "Saudi",
    "SA",
    "Kingdom of Saudi Arabia",
    "Al-Mamlakah al-‘Arabiyyah as-Su‘ūdiyyah"
  ],
  "area": 2149690,
  "borders": [
    "IRQ",
    "JOR",
    "KWT",
    "OMN",
    "QAT",
    "ARE",
    "YEM"
  ],
  "capital": "Riyadh",
  "demonym": "Saudi Arabian",
  "languages": {
    "ara": "Arabic"
  },
  "latlng": [
    25,
    45
  ],
  "nativeName": "العربية السعودية",
  "population": 30770375,
  "region": "Asia",
  "subregion": "Western Asia",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".sa",
    ".السعودية"
  ],
  "translations": {
    "deu": {
      "official": "Königreich Saudi-Arabien",
      "common": "Saudi-Arabien"
    },
    "fra": {
      "official": "Royaume d'Arabie Saoudite",
      "common": "Arabie Saoudite"
    },
    "hrv": {
      "official": "Kraljevina Saudijska Arabija",
      "common": "Saudijska Arabija"
    },
    "ita": {
      "official": "Arabia Saudita",
      "common": "Arabia Saudita"
    },
    "jpn": {
      "official": "サウジアラビア王国",
      "common": "サウジアラビア"
    },
    "nld": {
      "official": "Koninkrijk van Saoedi-Arabië",
      "common": "Saoedi-Arabië"
    },
    "por": {
      "official": "Reino da Arábia Saudita",
      "common": "Arábia Saudita"
    },
    "rus": {
      "official": "Королевство Саудовская Аравия",
      "common": "Саудовская Аравия"
    },
    "spa": {
      "official": "Reino de Arabia Saudita",
      "common": "Arabia Saudí"
    },
    "fin": {
      "official": "Saudi-Arabian kuningaskunta",
      "common": "Saudi-Arabia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/saudi_arabia",
  "currency": [
    "SAR"
  ],
  "callingCode": [
    "966"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "SA",
    "ccn3": "682",
    "cca3": "SAU",
    "cioc": "KSA"
  }
}
},{}],194:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Senegal",
    "official": "Republic of Senegal",
    "native": {
      "fra": {
        "official": "République du Sénégal",
        "common": "Sénégal"
      }
    }
  },
  "altSpellings": [
    "SN",
    "Republic of Senegal",
    "République du Sénégal"
  ],
  "area": 196722,
  "borders": [
    "GMB",
    "GIN",
    "GNB",
    "MLI",
    "MRT"
  ],
  "capital": "Dakar",
  "demonym": "Senegalese",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    14,
    -14
  ],
  "nativeName": "Sénégal",
  "population": 13508715,
  "region": "Africa",
  "subregion": "Western Africa",
  "timezones": [
    "UTC"
  ],
  "tld": [
    ".sn"
  ],
  "translations": {
    "deu": {
      "official": "Republik Senegal",
      "common": "Senegal"
    },
    "fra": {
      "official": "République du Sénégal",
      "common": "Sénégal"
    },
    "hrv": {
      "official": "Republika Senegal",
      "common": "Senegal"
    },
    "ita": {
      "official": "Repubblica del Senegal",
      "common": "Senegal"
    },
    "jpn": {
      "official": "セネガル共和国",
      "common": "セネガル"
    },
    "nld": {
      "official": "Republiek Senegal",
      "common": "Senegal"
    },
    "por": {
      "official": "República do Senegal",
      "common": "Senegal"
    },
    "rus": {
      "official": "Республика Сенегал",
      "common": "Сенегал"
    },
    "spa": {
      "official": "República de Senegal",
      "common": "Senegal"
    },
    "fin": {
      "official": "Senegalin tasavalta",
      "common": "Senegal"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/senegal",
  "currency": [
    "XOF"
  ],
  "callingCode": [
    "221"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "SN",
    "ccn3": "686",
    "cca3": "SEN",
    "cioc": "SEN"
  }
}
},{}],195:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Serbia",
    "official": "Republic of Serbia",
    "native": {
      "srp": {
        "official": "Република Србија",
        "common": "Србија"
      }
    }
  },
  "tld": [
    ".rs",
    ".срб"
  ],
  "currency": [
    "RSD"
  ],
  "callingCode": [
    "381"
  ],
  "capital": "Belgrade",
  "altSpellings": [
    "RS",
    "Srbija",
    "Republic of Serbia",
    "Република Србија",
    "Republika Srbija"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "srp": "Serbian"
  },
  "translations": {
    "deu": {
      "official": "Republik Serbien",
      "common": "Serbien"
    },
    "fra": {
      "official": "République de Serbie",
      "common": "Serbie"
    },
    "hrv": {
      "official": "Republika Srbija",
      "common": "Srbija"
    },
    "ita": {
      "official": "Repubblica di Serbia",
      "common": "Serbia"
    },
    "jpn": {
      "official": "セルビア共和国",
      "common": "セルビア"
    },
    "nld": {
      "official": "Republiek Servië",
      "common": "Servië"
    },
    "por": {
      "official": "República da Sérvia",
      "common": "Sérvia"
    },
    "rus": {
      "official": "Республика Сербия",
      "common": "Сербия"
    },
    "spa": {
      "official": "República de Serbia",
      "common": "Serbia"
    },
    "fin": {
      "official": "Serbian tasavalta",
      "common": "Serbia"
    }
  },
  "latlng": [
    44,
    21
  ],
  "demonym": "Serbian",
  "landlocked": true,
  "borders": [
    "BIH",
    "BGR",
    "HRV",
    "HUN",
    "KOS",
    "MKD",
    "MNE",
    "ROU"
  ],
  "area": 88361,
  "codes": {
    "cca2": "RS",
    "ccn3": "688",
    "cca3": "SRB",
    "cioc": "SRB"
  }
}
},{}],196:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Seychelles",
    "official": "Republic of Seychelles",
    "native": {
      "crs": {
        "official": "Repiblik Sesel",
        "common": "Sesel"
      },
      "eng": {
        "official": "Republic of Seychelles",
        "common": "Seychelles"
      },
      "fra": {
        "official": "République des Seychelles",
        "common": "Seychelles"
      }
    }
  },
  "altSpellings": [
    "SC",
    "Republic of Seychelles",
    "Repiblik Sesel",
    "République des Seychelles"
  ],
  "area": 452,
  "borders": [],
  "capital": "Victoria",
  "demonym": "Seychellois",
  "languages": {
    "crs": "Seychellois Creole",
    "eng": "English",
    "fra": "French"
  },
  "latlng": [
    -4.58333333,
    55.66666666
  ],
  "nativeName": "Seychelles",
  "population": 89949,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": [
    "UTC+04:00"
  ],
  "tld": [
    ".sc"
  ],
  "translations": {
    "deu": {
      "official": "Republik der Seychellen",
      "common": "Seychellen"
    },
    "fra": {
      "official": "République des Seychelles",
      "common": "Seychelles"
    },
    "hrv": {
      "official": "Republika Sejšeli",
      "common": "Sejšeli"
    },
    "ita": {
      "official": "Repubblica delle Seychelles",
      "common": "Seychelles"
    },
    "jpn": {
      "official": "セイシェル共和国",
      "common": "セーシェル"
    },
    "nld": {
      "official": "Republiek der Seychellen",
      "common": "Seychellen"
    },
    "por": {
      "official": "República das Seychelles",
      "common": "Seicheles"
    },
    "rus": {
      "official": "Республика Сейшельские Острова",
      "common": "Сейшельские Острова"
    },
    "spa": {
      "official": "República de las Seychelles",
      "common": "Seychelles"
    },
    "fin": {
      "official": "Seychellien tasavalta",
      "common": "Seychellit"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/seychelles",
  "currency": [
    "SCR"
  ],
  "callingCode": [
    "248"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "SC",
    "ccn3": "690",
    "cca3": "SYC",
    "cioc": "SEY"
  }
}
},{}],197:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Sierra Leone",
    "official": "Republic of Sierra Leone",
    "native": {
      "eng": {
        "official": "Republic of Sierra Leone",
        "common": "Sierra Leone"
      }
    }
  },
  "altSpellings": [
    "SL",
    "Republic of Sierra Leone"
  ],
  "area": 71740,
  "borders": [
    "GIN",
    "LBR"
  ],
  "capital": "Freetown",
  "demonym": "Sierra Leonean",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    8.5,
    -11.5
  ],
  "nativeName": "Sierra Leone",
  "population": 6205000,
  "region": "Africa",
  "subregion": "Western Africa",
  "timezones": [
    "UTC"
  ],
  "tld": [
    ".sl"
  ],
  "translations": {
    "deu": {
      "official": "Republik Sierra Leone",
      "common": "Sierra Leone"
    },
    "fra": {
      "official": "République de Sierra Leone",
      "common": "Sierra Leone"
    },
    "hrv": {
      "official": "Republika Sijera Leone",
      "common": "Sijera Leone"
    },
    "ita": {
      "official": "Repubblica della Sierra Leone",
      "common": "Sierra Leone"
    },
    "jpn": {
      "official": "シエラレオネ共和国",
      "common": "シエラレオネ"
    },
    "nld": {
      "official": "Republiek Sierra Leone",
      "common": "Sierra Leone"
    },
    "por": {
      "official": "República da Serra Leoa",
      "common": "Serra Leoa"
    },
    "rus": {
      "official": "Республика Сьерра-Леоне",
      "common": "Сьерра-Леоне"
    },
    "spa": {
      "official": "República de Sierra Leona",
      "common": "Sierra Leone"
    },
    "fin": {
      "official": "Sierra Leonen tasavalta",
      "common": "Sierra Leone"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/sierra_leone",
  "currency": [
    "SLL"
  ],
  "callingCode": [
    "232"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "SL",
    "ccn3": "694",
    "cca3": "SLE",
    "cioc": "SLE"
  }
}
},{}],198:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Singapore",
    "official": "Republic of Singapore",
    "native": {
      "cmn": {
        "official": "新加坡共和国",
        "common": "新加坡"
      },
      "eng": {
        "official": "Republic of Singapore",
        "common": "Singapore"
      },
      "msa": {
        "official": "Republik Singapura",
        "common": "Singapura"
      },
      "tam": {
        "official": "சிங்கப்பூர் குடியரசு",
        "common": "சிங்கப்பூர்"
      }
    }
  },
  "altSpellings": [
    "SG",
    "Singapura",
    "Republik Singapura",
    "新加坡共和国"
  ],
  "area": 710,
  "borders": [],
  "capital": "Singapore",
  "demonym": "Singaporean",
  "languages": {
    "cmn": "Mandarin",
    "eng": "English",
    "msa": "Malay",
    "tam": "Tamil"
  },
  "latlng": [
    1.36666666,
    103.8
  ],
  "nativeName": "Singapore",
  "population": 5469700,
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "timezones": [
    "UTC+08:00"
  ],
  "tld": [
    ".sg",
    ".新加坡",
    ".சிங்கப்பூர்"
  ],
  "translations": {
    "deu": {
      "official": "Republik Singapur",
      "common": "Singapur"
    },
    "fra": {
      "official": "République de Singapour",
      "common": "Singapour"
    },
    "hrv": {
      "official": "Republika Singapur",
      "common": "Singapur"
    },
    "ita": {
      "official": "Repubblica di Singapore",
      "common": "Singapore"
    },
    "jpn": {
      "official": "シンガポール共和国",
      "common": "シンガポール"
    },
    "nld": {
      "official": "Republiek Singapore",
      "common": "Singapore"
    },
    "por": {
      "official": "República de Singapura",
      "common": "Singapura"
    },
    "rus": {
      "official": "Республика Сингапур",
      "common": "Сингапур"
    },
    "spa": {
      "official": "República de Singapur",
      "common": "Singapur"
    },
    "fin": {
      "official": "Singaporen tasavalta",
      "common": "Singapore"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/singapore",
  "currency": [
    "SGD"
  ],
  "callingCode": [
    "65"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "SG",
    "ccn3": "702",
    "cca3": "SGP",
    "cioc": "SIN"
  }
}
},{}],199:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Sint Maarten",
    "official": "Sint Maarten",
    "native": {
      "eng": {
        "official": "Sint Maarten",
        "common": "Sint Maarten"
      },
      "fra": {
        "official": "Saint-Martin",
        "common": "Saint-Martin"
      },
      "nld": {
        "official": "Sint Maarten",
        "common": "Sint Maarten"
      }
    }
  },
  "tld": [
    ".sx"
  ],
  "currency": [
    "ANG"
  ],
  "callingCode": [
    "1721"
  ],
  "capital": "Philipsburg",
  "altSpellings": [
    "SX",
    "Sint Maarten (Dutch part)"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English",
    "fra": "French",
    "nld": "Dutch"
  },
  "translations": {
    "deu": {
      "official": "Sint Maarten",
      "common": "Sint Maarten"
    },
    "fra": {
      "official": "Sint Maarten",
      "common": "Saint-Martin"
    },
    "ita": {
      "official": "Sint Maarten",
      "common": "Sint Maarten"
    },
    "jpn": {
      "official": "シントマールテン島",
      "common": "シント・マールテン"
    },
    "nld": {
      "official": "Sint Maarten",
      "common": "Sint Maarten"
    },
    "por": {
      "official": "Sint Maarten",
      "common": "São Martinho"
    },
    "rus": {
      "official": "Синт-Маартен",
      "common": "Синт-Мартен"
    },
    "spa": {
      "official": "Sint Maarten",
      "common": "Sint Maarten"
    },
    "fin": {
      "official": "Sint Maarten",
      "common": "Sint Maarten"
    }
  },
  "latlng": [
    18.033333,
    -63.05
  ],
  "demonym": "St. Maartener",
  "landlocked": false,
  "borders": [
    "MAF"
  ],
  "area": 34,
  "codes": {
    "cca2": "SX",
    "ccn3": "534",
    "cca3": "SXM",
    "cioc": ""
  }
}
},{}],200:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Slovakia",
    "official": "Slovak Republic",
    "native": {
      "slk": {
        "official": "Slovenská republika",
        "common": "Slovensko"
      }
    }
  },
  "altSpellings": [
    "SK",
    "Slovak Republic",
    "Slovenská republika"
  ],
  "area": 49037,
  "borders": [
    "AUT",
    "CZE",
    "HUN",
    "POL",
    "UKR"
  ],
  "capital": "Bratislava",
  "demonym": "Slovak",
  "languages": {
    "slk": "Slovak"
  },
  "latlng": [
    48.66666666,
    19.5
  ],
  "nativeName": "Slovensko",
  "population": 5415949,
  "region": "Europe",
  "subregion": "Eastern Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".sk"
  ],
  "translations": {
    "deu": {
      "official": "Slowakische Republik",
      "common": "Slowakei"
    },
    "fra": {
      "official": "République slovaque",
      "common": "Slovaquie"
    },
    "hrv": {
      "official": "slovačka",
      "common": "Slovačka"
    },
    "ita": {
      "official": "Repubblica slovacca",
      "common": "Slovacchia"
    },
    "jpn": {
      "official": "スロバキア共和国",
      "common": "スロバキア"
    },
    "nld": {
      "official": "Slowaakse Republiek",
      "common": "Slowakije"
    },
    "por": {
      "official": "República Eslovaca",
      "common": "Eslováquia"
    },
    "rus": {
      "official": "Словацкая Республика",
      "common": "Словакия"
    },
    "spa": {
      "official": "República Eslovaca",
      "common": "República Eslovaca"
    },
    "fin": {
      "official": "Slovakian tasavalta",
      "common": "Slovakia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/slovakia",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "421"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "SK",
    "ccn3": "703",
    "cca3": "SVK",
    "cioc": "SVK"
  }
}
},{}],201:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Slovenia",
    "official": "Republic of Slovenia",
    "native": {
      "slv": {
        "official": "Republika Slovenija",
        "common": "Slovenija"
      }
    }
  },
  "altSpellings": [
    "SI",
    "Republic of Slovenia",
    "Republika Slovenija"
  ],
  "area": 20273,
  "borders": [
    "AUT",
    "HRV",
    "ITA",
    "HUN"
  ],
  "capital": "Ljubljana",
  "demonym": "Slovene",
  "languages": {
    "slv": "Slovene"
  },
  "latlng": [
    46.11666666,
    14.81666666
  ],
  "nativeName": "Slovenija",
  "population": 2064966,
  "region": "Europe",
  "subregion": "Southern Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".si"
  ],
  "translations": {
    "deu": {
      "official": "Republik Slowenien",
      "common": "Slowenien"
    },
    "fra": {
      "official": "République de Slovénie",
      "common": "Slovénie"
    },
    "hrv": {
      "official": "Republika Slovenija",
      "common": "Slovenija"
    },
    "ita": {
      "official": "Repubblica di Slovenia",
      "common": "Slovenia"
    },
    "jpn": {
      "official": "スロベニア共和国",
      "common": "スロベニア"
    },
    "nld": {
      "official": "Republiek Slovenië",
      "common": "Slovenië"
    },
    "por": {
      "official": "República da Eslovénia",
      "common": "Eslovénia"
    },
    "rus": {
      "official": "Республика Словения",
      "common": "Словения"
    },
    "spa": {
      "official": "República de Eslovenia",
      "common": "Eslovenia"
    },
    "fin": {
      "official": "Slovenian tasavalta",
      "common": "Slovenia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/slovenia",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "386"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "SI",
    "ccn3": "705",
    "cca3": "SVN",
    "cioc": "SLO"
  }
}
},{}],202:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Solomon Islands",
    "official": "Solomon Islands",
    "native": {
      "eng": {
        "official": "Solomon Islands",
        "common": "Solomon Islands"
      }
    }
  },
  "altSpellings": [
    "SB"
  ],
  "area": 28896,
  "borders": [],
  "capital": "Honiara",
  "demonym": "Solomon Islander",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    -8,
    159
  ],
  "nativeName": "Solomon Islands",
  "population": 581344,
  "region": "Oceania",
  "subregion": "Melanesia",
  "timezones": [
    "UTC+11:00"
  ],
  "tld": [
    ".sb"
  ],
  "translations": {
    "deu": {
      "official": "Salomon-Inseln",
      "common": "Salomonen"
    },
    "fra": {
      "official": "Îles Salomon",
      "common": "Îles Salomon"
    },
    "hrv": {
      "official": "Solomonski Otoci",
      "common": "Solomonski Otoci"
    },
    "ita": {
      "official": "Isole Salomone",
      "common": "Isole Salomone"
    },
    "jpn": {
      "official": "ソロモン諸島",
      "common": "ソロモン諸島"
    },
    "nld": {
      "official": "Solomon eilanden",
      "common": "Salomonseilanden"
    },
    "por": {
      "official": "Ilhas Salomão",
      "common": "Ilhas Salomão"
    },
    "rus": {
      "official": "Соломоновы острова",
      "common": "Соломоновы Острова"
    },
    "spa": {
      "official": "islas Salomón",
      "common": "Islas Salomón"
    },
    "fin": {
      "official": "Salomonsaaret",
      "common": "Salomonsaaret"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/solomon_islands",
  "currency": [
    "SBD"
  ],
  "callingCode": [
    "677"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "SB",
    "ccn3": "090",
    "cca3": "SLB",
    "cioc": "SOL"
  }
}
},{}],203:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Somalia",
    "official": "Federal Republic of Somalia",
    "native": {
      "ara": {
        "official": "جمهورية الصومال‎‎",
        "common": "الصومال‎‎"
      },
      "som": {
        "official": "Jamhuuriyadda Federaalka Soomaaliya",
        "common": "Soomaaliya"
      }
    }
  },
  "altSpellings": [
    "SO",
    "aṣ-Ṣūmāl",
    "Federal Republic of Somalia",
    "Jamhuuriyadda Federaalka Soomaaliya",
    "Jumhūriyyat aṣ-Ṣūmāl al-Fiderāliyya"
  ],
  "area": 637657,
  "borders": [
    "DJI",
    "ETH",
    "KEN"
  ],
  "capital": "Mogadishu",
  "demonym": "Somali",
  "languages": {
    "ara": "Arabic",
    "som": "Somali"
  },
  "latlng": [
    10,
    49
  ],
  "nativeName": "Soomaaliya",
  "population": 10806000,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".so"
  ],
  "translations": {
    "deu": {
      "official": "Bundesrepublik Somalia",
      "common": "Somalia"
    },
    "fra": {
      "official": "République fédérale de Somalie",
      "common": "Somalie"
    },
    "hrv": {
      "official": "Savezna Republika Somaliji",
      "common": "Somalija"
    },
    "ita": {
      "official": "Repubblica federale di Somalia",
      "common": "Somalia"
    },
    "jpn": {
      "official": "ソマリア連邦共和国",
      "common": "ソマリア"
    },
    "nld": {
      "official": "Federale Republiek Somalië",
      "common": "Somalië"
    },
    "por": {
      "official": "República Federal da Somália",
      "common": "Somália"
    },
    "rus": {
      "official": "Федеративная Республика Сомали",
      "common": "Сомали"
    },
    "spa": {
      "official": "República Federal de Somalia",
      "common": "Somalia"
    },
    "fin": {
      "official": "Somalian liittotasavalta",
      "common": "Somalia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/somalia",
  "currency": [
    "SOS"
  ],
  "callingCode": [
    "252"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "SO",
    "ccn3": "706",
    "cca3": "SOM",
    "cioc": "SOM"
  }
}
},{}],204:[function(require,module,exports){
module.exports={
  "name": {
    "common": "South Africa",
    "official": "Republic of South Africa",
    "native": {
      "afr": {
        "official": "Republiek van Suid-Afrika",
        "common": "South Africa"
      },
      "eng": {
        "official": "Republic of South Africa",
        "common": "South Africa"
      },
      "nbl": {
        "official": "IRiphabliki yeSewula Afrika",
        "common": "Sewula Afrika"
      },
      "nso": {
        "official": "Rephaboliki ya Afrika-Borwa ",
        "common": "Afrika-Borwa"
      },
      "sot": {
        "official": "Rephaboliki ya Afrika Borwa",
        "common": "Afrika Borwa"
      },
      "ssw": {
        "official": "IRiphabhulikhi yeNingizimu Afrika",
        "common": "Ningizimu Afrika"
      },
      "tsn": {
        "official": "Rephaboliki ya Aforika Borwa",
        "common": "Aforika Borwa"
      },
      "tso": {
        "official": "Riphabliki ra Afrika Dzonga",
        "common": "Afrika Dzonga"
      },
      "ven": {
        "official": "Riphabuḽiki ya Afurika Tshipembe",
        "common": "Afurika Tshipembe"
      },
      "xho": {
        "official": "IRiphabliki yaseMzantsi Afrika",
        "common": "Mzantsi Afrika"
      },
      "zul": {
        "official": "IRiphabliki yaseNingizimu Afrika",
        "common": "Ningizimu Afrika"
      }
    }
  },
  "altSpellings": [
    "ZA",
    "RSA",
    "Suid-Afrika",
    "Republic of South Africa"
  ],
  "area": 1221037,
  "borders": [
    "BWA",
    "LSO",
    "MOZ",
    "NAM",
    "SWZ",
    "ZWE"
  ],
  "capital": "Pretoria",
  "demonym": "South African",
  "languages": {
    "afr": "Afrikaans",
    "eng": "English",
    "nbl": "Southern Ndebele",
    "nso": "Northern Sotho",
    "sot": "Southern Sotho",
    "ssw": "Swazi",
    "tsn": "Tswana",
    "tso": "Tsonga",
    "ven": "Venda",
    "xho": "Xhosa",
    "zul": "Zulu"
  },
  "latlng": [
    -29,
    24
  ],
  "nativeName": "South Africa",
  "population": 54002000,
  "region": "Africa",
  "subregion": "Southern Africa",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".za"
  ],
  "translations": {
    "deu": {
      "official": "Republik Südafrika",
      "common": "Republik Südafrika"
    },
    "fra": {
      "official": "République d'Afrique du Sud",
      "common": "Afrique du Sud"
    },
    "hrv": {
      "official": "Južnoafrička Republika",
      "common": "Južnoafrička Republika"
    },
    "ita": {
      "official": "Repubblica del Sud Africa",
      "common": "Sud Africa"
    },
    "jpn": {
      "official": "南アフリカ共和国",
      "common": "南アフリカ"
    },
    "nld": {
      "official": "Zuid -Afrika",
      "common": "Zuid-Afrika"
    },
    "por": {
      "official": "República da África do Sul",
      "common": "África do Sul"
    },
    "rus": {
      "official": "Южно-Африканская Республика",
      "common": "Южно-Африканская Республика"
    },
    "spa": {
      "official": "República de Sudáfrica",
      "common": "República de Sudáfrica"
    },
    "fin": {
      "official": "Etelä-Afrikan tasavalta",
      "common": "Etelä-Afrikka"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/south_africa",
  "currency": [
    "ZAR"
  ],
  "callingCode": [
    "27"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "ZA",
    "ccn3": "710",
    "cca3": "ZAF",
    "cioc": "RSA"
  }
}
},{}],205:[function(require,module,exports){
module.exports={
  "name": {
    "common": "South Georgia",
    "official": "South Georgia and the South Sandwich Islands",
    "native": {
      "eng": {
        "official": "South Georgia and the South Sandwich Islands",
        "common": "South Georgia"
      }
    }
  },
  "tld": [
    ".gs"
  ],
  "currency": [
    "GBP"
  ],
  "callingCode": [
    "500"
  ],
  "capital": "King Edward Point",
  "altSpellings": [
    "GS",
    "South Georgia and the South Sandwich Islands"
  ],
  "region": "Americas",
  "subregion": "South America",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Südgeorgien und die Südlichen Sandwichinseln",
      "common": "Südgeorgien und die Südlichen Sandwichinseln"
    },
    "fra": {
      "official": "Géorgie du Sud et les îles Sandwich du Sud",
      "common": "Géorgie du Sud-et-les Îles Sandwich du Sud"
    },
    "hrv": {
      "official": "Južna Džordžija i Otoci Južni Sendvič",
      "common": "Južna Georgija i otočje Južni Sandwich"
    },
    "ita": {
      "official": "Georgia del Sud e isole Sandwich del Sud",
      "common": "Georgia del Sud e Isole Sandwich Meridionali"
    },
    "jpn": {
      "official": "サウスジョージア·サウスサンドウィッチ諸島",
      "common": "サウスジョージア・サウスサンドウィッチ諸島"
    },
    "nld": {
      "official": "Zuid-Georgië en de Zuidelijke Sandwich-eilanden",
      "common": "Zuid-Georgia en Zuidelijke Sandwicheilanden"
    },
    "por": {
      "official": "Geórgia do Sul e Sandwich do Sul",
      "common": "Ilhas Geórgia do Sul e Sandwich do Sul"
    },
    "rus": {
      "official": "Южная Георгия и Южные Сандвичевы острова",
      "common": "Южная Георгия и Южные Сандвичевы острова"
    },
    "spa": {
      "official": "Georgia del Sur y las Islas Sandwich del Sur",
      "common": "Islas Georgias del Sur y Sandwich del Sur"
    },
    "fin": {
      "official": "Etelä-Georgia ja Eteläiset Sandwichsaaret",
      "common": "Etelä-Georgia ja Eteläiset Sandwichsaaret"
    }
  },
  "latlng": [
    -54.5,
    -37
  ],
  "demonym": "South Georgian South Sandwich Islander",
  "landlocked": false,
  "borders": [],
  "area": 3903,
  "codes": {
    "cca2": "GS",
    "ccn3": "239",
    "cca3": "SGS",
    "cioc": ""
  }
}
},{}],206:[function(require,module,exports){
module.exports={
  "name": {
    "common": "South Korea",
    "official": "Republic of Korea",
    "native": {
      "kor": {
        "official": "한국",
        "common": "대한민국"
      }
    }
  },
  "tld": [
    ".kr",
    ".한국"
  ],
  "currency": [
    "KRW"
  ],
  "callingCode": [
    "82"
  ],
  "capital": "Seoul",
  "altSpellings": [
    "KR",
    "Korea, Republic of",
    "Republic of Korea"
  ],
  "region": "Asia",
  "subregion": "Eastern Asia",
  "languages": {
    "kor": "Korean"
  },
  "translations": {
    "deu": {
      "official": "Republik Korea",
      "common": "Südkorea"
    },
    "fra": {
      "official": "République de Corée",
      "common": "Corée du Sud"
    },
    "hrv": {
      "official": "Republika Koreja",
      "common": "Južna Koreja"
    },
    "ita": {
      "official": "Repubblica di Corea",
      "common": "Corea del Sud"
    },
    "jpn": {
      "official": "大韓民国",
      "common": "大韓民国"
    },
    "nld": {
      "official": "Republiek Korea",
      "common": "Zuid-Korea"
    },
    "por": {
      "official": "República da Coreia",
      "common": "Coreia do Sul"
    },
    "rus": {
      "official": "Республика Корея",
      "common": "Южная Корея"
    },
    "spa": {
      "official": "República de Corea",
      "common": "Corea del Sur"
    },
    "fin": {
      "official": "Korean tasavalta",
      "common": "Etelä-Korea"
    }
  },
  "latlng": [
    37,
    127.5
  ],
  "demonym": "South Korean",
  "landlocked": false,
  "borders": [
    "PRK"
  ],
  "area": 100210,
  "codes": {
    "cca2": "KR",
    "ccn3": "410",
    "cca3": "KOR",
    "cioc": "KOR"
  }
}
},{}],207:[function(require,module,exports){
module.exports={
  "name": {
    "common": "South Sudan",
    "official": "Republic of South Sudan",
    "native": {
      "eng": {
        "official": "Republic of South Sudan",
        "common": "South Sudan"
      }
    }
  },
  "tld": [
    ".ss"
  ],
  "currency": [
    "SSP"
  ],
  "callingCode": [
    "211"
  ],
  "capital": "Juba",
  "altSpellings": [
    "SS"
  ],
  "region": "Africa",
  "subregion": "Middle Africa",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Republik Südsudan",
      "common": "Südsudan"
    },
    "fra": {
      "official": "République du Soudan du Sud",
      "common": "Soudan du Sud"
    },
    "hrv": {
      "official": "Republika Južni Sudan",
      "common": "Južni Sudan"
    },
    "ita": {
      "official": "Repubblica del Sudan del Sud",
      "common": "Sudan del sud"
    },
    "jpn": {
      "official": "南スーダン共和国",
      "common": "南スーダン"
    },
    "nld": {
      "official": "Republiek Zuid-Soedan",
      "common": "Zuid-Soedan"
    },
    "por": {
      "official": "República do Sudão do Sul",
      "common": "Sudão do Sul"
    },
    "rus": {
      "official": "Республика Южный Судан",
      "common": "Южный Судан"
    },
    "spa": {
      "official": "República de Sudán del Sur",
      "common": "Sudán del Sur"
    },
    "fin": {
      "official": "Etelä-Sudanin tasavalta",
      "common": "Etelä-Sudan"
    }
  },
  "latlng": [
    7,
    30
  ],
  "demonym": "South Sudanese",
  "landlocked": true,
  "borders": [
    "CAF",
    "COD",
    "ETH",
    "KEN",
    "SDN",
    "UGA"
  ],
  "area": 619745,
  "codes": {
    "cca2": "SS",
    "ccn3": "728",
    "cca3": "SSD",
    "cioc": ""
  }
}
},{}],208:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Spain",
    "official": "Kingdom of Spain",
    "native": {
      "cat": {
        "official": "Regne d'Espanya",
        "common": "Espanya"
      },
      "eus": {
        "official": "Espainiako Erresuma",
        "common": "Espainia"
      },
      "glg": {
        "official": "Reino de España",
        "common": ""
      },
      "oci": {
        "official": "Reialme d'Espanha",
        "common": "Espanha"
      },
      "spa": {
        "official": "Reino de España",
        "common": "España"
      }
    }
  },
  "altSpellings": [
    "ES",
    "Kingdom of Spain",
    "Reino de España"
  ],
  "area": 505992,
  "borders": [
    "AND",
    "FRA",
    "GIB",
    "PRT",
    "MAR"
  ],
  "capital": "Madrid",
  "demonym": "Spanish",
  "languages": {
    "cat": "Catalan",
    "eus": "Basque",
    "glg": "Galician",
    "oci": "Occitan",
    "spa": "Spanish"
  },
  "latlng": [
    40,
    -4
  ],
  "nativeName": "South Sudan",
  "population": 11384393,
  "region": "Europe",
  "subregion": "Southern Europe",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".es"
  ],
  "translations": {
    "deu": {
      "official": "Königreich Spanien",
      "common": "Spanien"
    },
    "fra": {
      "official": "Royaume d'Espagne",
      "common": "Espagne"
    },
    "hrv": {
      "official": "Kraljevina Španjolska",
      "common": "Španjolska"
    },
    "ita": {
      "official": "Regno di Spagna",
      "common": "Spagna"
    },
    "jpn": {
      "official": "スペイン王国",
      "common": "スペイン"
    },
    "nld": {
      "official": "Koninkrijk Spanje",
      "common": "Spanje"
    },
    "por": {
      "official": "Reino de Espanha",
      "common": "Espanha"
    },
    "rus": {
      "official": "Королевство Испания",
      "common": "Испания"
    },
    "spa": {
      "official": "Reino de España",
      "common": "España"
    },
    "fin": {
      "official": "Espanjan kuningaskunta",
      "common": "Espanja"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/spain",
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "34"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "ES",
    "ccn3": "724",
    "cca3": "ESP",
    "cioc": "ESP"
  }
}
},{}],209:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Sri Lanka",
    "official": "Democratic Socialist Republic of Sri Lanka",
    "native": {
      "sin": {
        "official": "ශ්‍රී ලංකා ප්‍රජාතාන්ත්‍රික සමාජවාදී ජනරජය",
        "common": "ශ්‍රී ලංකාව"
      },
      "tam": {
        "official": "இலங்கை சனநாயக சோசலிசக் குடியரசு",
        "common": "இலங்கை"
      }
    }
  },
  "altSpellings": [
    "LK",
    "ilaṅkai",
    "Democratic Socialist Republic of Sri Lanka"
  ],
  "area": 65610,
  "borders": [
    "IND"
  ],
  "capital": "Colombo",
  "demonym": "Sri Lankan",
  "languages": {
    "sin": "Sinhala",
    "tam": "Tamil"
  },
  "latlng": [
    7,
    81
  ],
  "nativeName": "śrī laṃkāva",
  "population": 20277597,
  "region": "Asia",
  "subregion": "Southern Asia",
  "timezones": [
    "UTC+05:30"
  ],
  "tld": [
    ".lk",
    ".இலங்கை",
    ".ලංකා"
  ],
  "translations": {
    "deu": {
      "official": "Demokratische Sozialistische Republik Sri Lanka",
      "common": "Sri Lanka"
    },
    "fra": {
      "official": "République démocratique socialiste du Sri Lanka",
      "common": "Sri Lanka"
    },
    "hrv": {
      "official": "Demokratska Socijalističke Republike Šri Lanke",
      "common": "Šri Lanka"
    },
    "ita": {
      "official": "Repubblica democratica socialista dello Sri Lanka",
      "common": "Sri Lanka"
    },
    "jpn": {
      "official": "スリランカ民主社会主義共和国",
      "common": "スリランカ"
    },
    "nld": {
      "official": "Democratische Socialistische Republiek Sri Lanka",
      "common": "Sri Lanka"
    },
    "por": {
      "official": "República Democrática Socialista do Sri Lanka",
      "common": "Sri Lanka"
    },
    "rus": {
      "official": "Демократическая Социалистическая Республика Шри-Ланка",
      "common": "Шри-Ланка"
    },
    "spa": {
      "official": "República Democrática Socialista de Sri Lanka",
      "common": "Sri Lanka"
    },
    "fin": {
      "official": "Sri Lankan demokraattinen sosialistinen tasavalta",
      "common": "Sri Lanka"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/sri_lanka",
  "currency": [
    "LKR"
  ],
  "callingCode": [
    "94"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "LK",
    "ccn3": "144",
    "cca3": "LKA",
    "cioc": "SRI"
  }
}
},{}],210:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Sudan",
    "official": "Republic of the Sudan",
    "native": {
      "ara": {
        "official": "جمهورية السودان",
        "common": "السودان"
      },
      "eng": {
        "official": "Republic of the Sudan",
        "common": "Sudan"
      }
    }
  },
  "altSpellings": [
    "SD",
    "Republic of the Sudan",
    "Jumhūrīyat as-Sūdān"
  ],
  "area": 1886068,
  "borders": [
    "CAF",
    "TCD",
    "EGY",
    "ERI",
    "ETH",
    "LBY",
    "SSD"
  ],
  "capital": "Khartoum",
  "demonym": "Sudanese",
  "languages": {
    "ara": "Arabic",
    "eng": "English"
  },
  "latlng": [
    15,
    30
  ],
  "nativeName": "السودان",
  "population": 37289406,
  "region": "Africa",
  "subregion": "Northern Africa",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".sd"
  ],
  "translations": {
    "deu": {
      "official": "Republik Sudan",
      "common": "Sudan"
    },
    "fra": {
      "official": "République du Soudan",
      "common": "Soudan"
    },
    "hrv": {
      "official": "Republika Sudan",
      "common": "Sudan"
    },
    "ita": {
      "official": "Repubblica del Sudan",
      "common": "Sudan"
    },
    "jpn": {
      "official": "スーダン共和国",
      "common": "スーダン"
    },
    "nld": {
      "official": "Republiek Soedan",
      "common": "Soedan"
    },
    "por": {
      "official": "República do Sudão",
      "common": "Sudão"
    },
    "rus": {
      "official": "Республика Судан",
      "common": "Судан"
    },
    "spa": {
      "official": "República de Sudán",
      "common": "Sudán"
    },
    "fin": {
      "official": "Sudanin tasavalta",
      "common": "Sudan"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/sudan",
  "currency": [
    "SDG"
  ],
  "callingCode": [
    "249"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "SD",
    "ccn3": "729",
    "cca3": "SDN",
    "cioc": "SUD"
  }
}
},{}],211:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Suriname",
    "official": "Republic of Suriname",
    "native": {
      "nld": {
        "official": "Republiek Suriname",
        "common": "Suriname"
      }
    }
  },
  "altSpellings": [
    "SR",
    "Sarnam",
    "Sranangron",
    "Republic of Suriname",
    "Republiek Suriname"
  ],
  "area": 163820,
  "borders": [
    "BRA",
    "GUF",
    "GUY"
  ],
  "capital": "Paramaribo",
  "demonym": "Surinamer",
  "languages": {
    "nld": "Dutch"
  },
  "latlng": [
    4,
    -56
  ],
  "nativeName": "Suriname",
  "population": 534189,
  "region": "Americas",
  "subregion": "South America",
  "timezones": [
    "UTC−03:00"
  ],
  "tld": [
    ".sr"
  ],
  "translations": {
    "deu": {
      "official": "Republik Suriname",
      "common": "Suriname"
    },
    "fra": {
      "official": "République du Suriname",
      "common": "Surinam"
    },
    "hrv": {
      "official": "Republika Surinam",
      "common": "Surinam"
    },
    "ita": {
      "official": "Repubblica del Suriname",
      "common": "Suriname"
    },
    "jpn": {
      "official": "スリナム共和国",
      "common": "スリナム"
    },
    "nld": {
      "official": "Republiek Suriname",
      "common": "Suriname"
    },
    "por": {
      "official": "República do Suriname",
      "common": "Suriname"
    },
    "rus": {
      "official": "Республика Суринам",
      "common": "Суринам"
    },
    "spa": {
      "official": "República de Suriname",
      "common": "Surinam"
    },
    "fin": {
      "official": "Surinamen tasavalta",
      "common": "Suriname"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/suriname",
  "currency": [
    "SRD"
  ],
  "callingCode": [
    "597"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "SR",
    "ccn3": "740",
    "cca3": "SUR",
    "cioc": "SUR"
  }
}
},{}],212:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Svalbard and Jan Mayen",
    "official": "Svalbard og Jan Mayen",
    "native": {
      "nor": {
        "official": "Svalbard og Jan Mayen",
        "common": "Svalbard og Jan Mayen"
      }
    }
  },
  "tld": [
    ".sj"
  ],
  "currency": [
    "NOK"
  ],
  "callingCode": [
    "4779"
  ],
  "capital": "Longyearbyen",
  "altSpellings": [
    "SJ",
    "Svalbard and Jan Mayen Islands"
  ],
  "region": "Europe",
  "subregion": "Northern Europe",
  "languages": {
    "nor": "Norwegian"
  },
  "translations": {
    "deu": {
      "official": "Inselgruppe Spitzbergen",
      "common": "Spitzbergen"
    },
    "fra": {
      "official": "Jan Mayen Svalbard",
      "common": "Svalbard et Jan Mayen"
    },
    "hrv": {
      "official": "Svalbard og Jan Mayen",
      "common": "Svalbard i Jan Mayen"
    },
    "ita": {
      "official": "Svalbard og Jan Mayen",
      "common": "Svalbard e Jan Mayen"
    },
    "jpn": {
      "official": "スバールバル諸島OGヤンマイエン",
      "common": "スヴァールバル諸島およびヤンマイエン島"
    },
    "nld": {
      "official": "Svalbard og Jan Mayen",
      "common": "Svalbard en Jan Mayen"
    },
    "por": {
      "official": "Svalbard og Jan Mayen",
      "common": "Ilhas Svalbard e Jan Mayen"
    },
    "rus": {
      "official": "Свальбарда ог Ян-Майен",
      "common": "Шпицберген и Ян-Майен"
    },
    "spa": {
      "official": "Svalbard og Jan Mayen",
      "common": "Islas Svalbard y Jan Mayen"
    },
    "fin": {
      "official": "Huippuvuoret",
      "common": "Huippuvuoret"
    }
  },
  "latlng": [
    78,
    20
  ],
  "demonym": "Norwegian",
  "landlocked": false,
  "borders": [],
  "area": -1,
  "codes": {
    "cca2": "SJ",
    "ccn3": "744",
    "cca3": "SJM",
    "cioc": ""
  }
}
},{}],213:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Swaziland",
    "official": "Kingdom of Swaziland",
    "native": {
      "eng": {
        "official": "Kingdom of Swaziland",
        "common": "Swaziland"
      },
      "ssw": {
        "official": "Kingdom of Swaziland",
        "common": "Swaziland"
      }
    }
  },
  "altSpellings": [
    "SZ",
    "weSwatini",
    "Swatini",
    "Ngwane",
    "Kingdom of Swaziland",
    "Umbuso waseSwatini"
  ],
  "area": 17364,
  "borders": [
    "MOZ",
    "ZAF"
  ],
  "capital": "Lobamba",
  "demonym": "Swazi",
  "languages": {
    "eng": "English",
    "ssw": "Swazi"
  },
  "latlng": [
    -26.5,
    31.5
  ],
  "nativeName": "Swaziland",
  "population": 1106189,
  "region": "Africa",
  "subregion": "Southern Africa",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".sz"
  ],
  "translations": {
    "deu": {
      "official": "Königreich Swasiland",
      "common": "Swasiland"
    },
    "fra": {
      "official": "Royaume du Swaziland",
      "common": "Swaziland"
    },
    "hrv": {
      "official": "Kraljevina Svazi",
      "common": "Svazi"
    },
    "ita": {
      "official": "Regno dello Swaziland",
      "common": "Swaziland"
    },
    "jpn": {
      "official": "スワジランド王国",
      "common": "スワジランド"
    },
    "nld": {
      "official": "Koninkrijk Swaziland",
      "common": "Swaziland"
    },
    "por": {
      "official": "Reino da Suazilândia",
      "common": "Suazilândia"
    },
    "rus": {
      "official": "Королевство Свазиленд",
      "common": "Свазиленд"
    },
    "spa": {
      "official": "Reino de Swazilandia",
      "common": "Suazilandia"
    },
    "fin": {
      "official": "Swazimaan kuningaskunta",
      "common": "Swazimaa"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/swaziland",
  "currency": [
    "SZL"
  ],
  "callingCode": [
    "268"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "SZ",
    "ccn3": "748",
    "cca3": "SWZ",
    "cioc": "SWZ"
  }
}
},{}],214:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Sweden",
    "official": "Kingdom of Sweden",
    "native": {
      "swe": {
        "official": "Konungariket Sverige",
        "common": "Sverige"
      }
    }
  },
  "altSpellings": [
    "SE",
    "Kingdom of Sweden",
    "Konungariket Sverige"
  ],
  "area": 450295,
  "borders": [
    "FIN",
    "NOR"
  ],
  "capital": "Stockholm",
  "demonym": "Swedish",
  "languages": {
    "swe": "Swedish"
  },
  "latlng": [
    62,
    15
  ],
  "nativeName": "Sverige",
  "population": 9737521,
  "region": "Europe",
  "subregion": "Northern Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".se"
  ],
  "translations": {
    "deu": {
      "official": "Königreich Schweden",
      "common": "Schweden"
    },
    "fra": {
      "official": "Royaume de Suède",
      "common": "Suède"
    },
    "hrv": {
      "official": "Kraljevina Švedska",
      "common": "Švedska"
    },
    "ita": {
      "official": "Regno di Svezia",
      "common": "Svezia"
    },
    "jpn": {
      "official": "スウェーデン王国",
      "common": "スウェーデン"
    },
    "nld": {
      "official": "Koninkrijk Zweden",
      "common": "Zweden"
    },
    "por": {
      "official": "Reino da Suécia",
      "common": "Suécia"
    },
    "rus": {
      "official": "Королевство Швеция",
      "common": "Швеция"
    },
    "spa": {
      "official": "Reino de Suecia",
      "common": "Suecia"
    },
    "fin": {
      "official": "Ruotsin kuningaskunta",
      "common": "Ruotsi"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/sweden",
  "currency": [
    "SEK"
  ],
  "callingCode": [
    "46"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "SE",
    "ccn3": "752",
    "cca3": "SWE",
    "cioc": "SWE"
  }
}
},{}],215:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Switzerland",
    "official": "Swiss Confederation",
    "native": {
      "fra": {
        "official": "Confédération suisse",
        "common": "Suisse"
      },
      "gsw": {
        "official": "Schweizerische Eidgenossenschaft",
        "common": "Schweiz"
      },
      "ita": {
        "official": "Confederazione Svizzera",
        "common": "Svizzera"
      },
      "roh": {
        "official": "Confederaziun svizra",
        "common": "Svizra"
      }
    }
  },
  "altSpellings": [
    "CH",
    "Swiss Confederation",
    "Schweiz",
    "Suisse",
    "Svizzera",
    "Svizra"
  ],
  "area": 41284,
  "borders": [
    "AUT",
    "FRA",
    "ITA",
    "LIE",
    "DEU"
  ],
  "capital": "Bern",
  "demonym": "Swiss",
  "languages": {
    "fra": "French",
    "gsw": "Swiss German",
    "ita": "Italian",
    "roh": "Romansh"
  },
  "latlng": [
    47,
    8
  ],
  "nativeName": "Schweiz",
  "population": 8183800,
  "region": "Europe",
  "subregion": "Western Europe",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".ch"
  ],
  "translations": {
    "deu": {
      "official": "Schweizerische Eidgenossenschaft",
      "common": "Schweiz"
    },
    "fra": {
      "official": "Confédération suisse",
      "common": "Suisse"
    },
    "hrv": {
      "official": "švicarska Konfederacija",
      "common": "Švicarska"
    },
    "ita": {
      "official": "Confederazione svizzera",
      "common": "Svizzera"
    },
    "jpn": {
      "official": "スイス連邦",
      "common": "スイス"
    },
    "nld": {
      "official": "Zwitserse Confederatie",
      "common": "Zwitserland"
    },
    "por": {
      "official": "Confederação Suíça",
      "common": "Suíça"
    },
    "rus": {
      "official": "Швейцарская Конфедерация",
      "common": "Швейцария"
    },
    "spa": {
      "official": "Confederación Suiza",
      "common": "Suiza"
    },
    "fin": {
      "official": "Sveitsin valaliitto",
      "common": "Sveitsi"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/switzerland",
  "currency": [
    "CHE",
    "CHF",
    "CHW"
  ],
  "callingCode": [
    "41"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "CH",
    "ccn3": "756",
    "cca3": "CHE",
    "cioc": "SUI"
  }
}
},{}],216:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Syria",
    "official": "Syrian Arab Republic",
    "native": {
      "ara": {
        "official": "الجمهورية العربية السورية",
        "common": "سوريا"
      }
    }
  },
  "altSpellings": [
    "SY",
    "Syrian Arab Republic",
    "Al-Jumhūrīyah Al-ʻArabīyah As-Sūrīyah"
  ],
  "area": 185180,
  "borders": [
    "IRQ",
    "ISR",
    "JOR",
    "LBN",
    "TUR"
  ],
  "capital": "Damascus",
  "demonym": "Syrian",
  "languages": {
    "ara": "Arabic"
  },
  "latlng": [
    35,
    38
  ],
  "nativeName": "سوريا",
  "population": 22964324,
  "region": "Asia",
  "subregion": "Western Asia",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".sy",
    "سوريا."
  ],
  "translations": {
    "deu": {
      "official": "Arabische Republik Syrien",
      "common": "Syrien"
    },
    "fra": {
      "official": "République arabe syrienne",
      "common": "Syrie"
    },
    "hrv": {
      "official": "Sirijska Arapska Republika",
      "common": "Sirija"
    },
    "ita": {
      "official": "Repubblica araba siriana",
      "common": "Siria"
    },
    "jpn": {
      "official": "シリアアラブ共和国",
      "common": "シリア・アラブ共和国"
    },
    "nld": {
      "official": "Syrische Arabische Republiek",
      "common": "Syrië"
    },
    "por": {
      "official": "República Árabe Síria",
      "common": "Síria"
    },
    "rus": {
      "official": "Сирийская Арабская Республика",
      "common": "Сирия"
    },
    "spa": {
      "official": "República Árabe Siria",
      "common": "Siria"
    },
    "fin": {
      "official": "Syyrian arabitasavalta",
      "common": "Syyria"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/syria",
  "currency": [
    "SYP"
  ],
  "callingCode": [
    "963"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "SY",
    "ccn3": "760",
    "cca3": "SYR",
    "cioc": "SYR"
  }
}
},{}],217:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Taiwan",
    "official": "Republic of China (Taiwan)",
    "native": {
      "cmn": {
        "official": "中华民国",
        "common": "臺灣"
      }
    }
  },
  "altSpellings": [
    "TW",
    "Táiwān",
    "Republic of China",
    "中華民國",
    "Zhōnghuá Mínguó",
    "Chinese Taipei for IOC",
    "Taiwan, Province of China"
  ],
  "area": 36193,
  "borders": [],
  "capital": "Taipei",
  "demonym": "Taiwanese",
  "languages": {
    "cmn": "Mandarin"
  },
  "latlng": [
    23.5,
    121
  ],
  "nativeName": "臺灣",
  "population": 23424615,
  "region": "Asia",
  "subregion": "Eastern Asia",
  "timezones": [
    "UTC+08:00"
  ],
  "tld": [
    ".tw",
    ".台湾",
    ".台灣"
  ],
  "translations": {
    "deu": {
      "official": "Republik China (Taiwan)",
      "common": "Taiwan"
    },
    "fra": {
      "official": "République de Chine (Taïwan)",
      "common": "Taïwan"
    },
    "hrv": {
      "official": "Republika Kina",
      "common": "Tajvan"
    },
    "ita": {
      "official": "Repubblica cinese (Taiwan)",
      "common": "Taiwan"
    },
    "jpn": {
      "official": "中華民国",
      "common": "台湾（台湾省/中華民国）"
    },
    "nld": {
      "official": "Republiek China (Taiwan)",
      "common": "Taiwan"
    },
    "por": {
      "official": "República da China",
      "common": "Ilha Formosa"
    },
    "rus": {
      "official": "Китайская Республика",
      "common": "Тайвань"
    },
    "spa": {
      "official": "República de China en Taiwán",
      "common": "Taiwán"
    },
    "fin": {
      "official": "Kiinan tasavalta",
      "common": "Taiwan"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/taiwan",
  "currency": [
    "TWD"
  ],
  "callingCode": [
    "886"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "TW",
    "ccn3": "158",
    "cca3": "TWN",
    "cioc": "TPE"
  }
}
},{}],218:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Tajikistan",
    "official": "Republic of Tajikistan",
    "native": {
      "rus": {
        "official": "Республика Таджикистан",
        "common": "Таджикистан"
      },
      "tgk": {
        "official": "Ҷумҳурии Тоҷикистон",
        "common": "Тоҷикистон"
      }
    }
  },
  "altSpellings": [
    "TJ",
    "Toçikiston",
    "Republic of Tajikistan",
    "Ҷумҳурии Тоҷикистон",
    "Çumhuriyi Toçikiston"
  ],
  "area": 143100,
  "borders": [
    "AFG",
    "CHN",
    "KGZ",
    "UZB"
  ],
  "capital": "Dushanbe",
  "demonym": "Tadzhik",
  "languages": {
    "rus": "Russian",
    "tgk": "Tajik"
  },
  "latlng": [
    39,
    71
  ],
  "nativeName": "Тоҷикистон",
  "population": 8161000,
  "region": "Asia",
  "subregion": "Central Asia",
  "timezones": [
    "UTC+05:00"
  ],
  "tld": [
    ".tj"
  ],
  "translations": {
    "deu": {
      "official": "Republik Tadschikistan",
      "common": "Tadschikistan"
    },
    "fra": {
      "official": "République du Tadjikistan",
      "common": "Tadjikistan"
    },
    "hrv": {
      "official": "Republika Tadžikistan",
      "common": "Tađikistan"
    },
    "ita": {
      "official": "Repubblica del Tajikistan",
      "common": "Tagikistan"
    },
    "jpn": {
      "official": "タジキスタン共和国",
      "common": "タジキスタン"
    },
    "nld": {
      "official": "Tadzjikistan",
      "common": "Tadzjikistan"
    },
    "por": {
      "official": "República do Tajiquistão",
      "common": "Tajiquistão"
    },
    "rus": {
      "official": "Республика Таджикистан",
      "common": "Таджикистан"
    },
    "spa": {
      "official": "República de Tayikistán",
      "common": "Tayikistán"
    },
    "fin": {
      "official": "Tadžikistanin tasavalta",
      "common": "Tadžikistan"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/tajikistan",
  "currency": [
    "TJS"
  ],
  "callingCode": [
    "992"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "TJ",
    "ccn3": "762",
    "cca3": "TJK",
    "cioc": "TJK"
  }
}
},{}],219:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Tanzania",
    "official": "United Republic of Tanzania",
    "native": {
      "eng": {
        "official": "United Republic of Tanzania",
        "common": "Tanzania"
      },
      "swa": {
        "official": "Jamhuri ya Muungano wa Tanzania",
        "common": "Tanzania"
      }
    }
  },
  "altSpellings": [
    "TZ",
    "Tanzania, United Republic of",
    "United Republic of Tanzania",
    "Jamhuri ya Muungano wa Tanzania"
  ],
  "area": 945087,
  "borders": [
    "BDI",
    "COD",
    "KEN",
    "MWI",
    "MOZ",
    "RWA",
    "UGA",
    "ZMB"
  ],
  "capital": "Dodoma",
  "demonym": "Tanzanian",
  "languages": {
    "eng": "English",
    "swa": "Swahili"
  },
  "latlng": [
    -6,
    35
  ],
  "nativeName": "Tanzania",
  "population": 47421786,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".tz"
  ],
  "translations": {
    "deu": {
      "official": "Vereinigte Republik Tansania",
      "common": "Tansania"
    },
    "fra": {
      "official": "République -Unie de Tanzanie",
      "common": "Tanzanie"
    },
    "hrv": {
      "official": "Ujedinjena Republika Tanzanija",
      "common": "Tanzanija"
    },
    "ita": {
      "official": "Repubblica Unita di Tanzania",
      "common": "Tanzania"
    },
    "jpn": {
      "official": "タンザニア連合共和国",
      "common": "タンザニア"
    },
    "nld": {
      "official": "Verenigde Republiek Tanzania",
      "common": "Tanzania"
    },
    "por": {
      "official": "República Unida da Tanzânia",
      "common": "Tanzânia"
    },
    "rus": {
      "official": "Объединенная Республика Танзания",
      "common": "Танзания"
    },
    "spa": {
      "official": "República Unida de Tanzania",
      "common": "Tanzania"
    },
    "fin": {
      "official": "Tansanian yhdistynyt tasavalta",
      "common": "Tansania"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/tanzania",
  "currency": [
    "TZS"
  ],
  "callingCode": [
    "255"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "TZ",
    "ccn3": "834",
    "cca3": "TZA",
    "cioc": "TAN"
  }
}
},{}],220:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Thailand",
    "official": "Kingdom of Thailand",
    "native": {
      "tha": {
        "official": "ราชอาณาจักรไทย",
        "common": "ประเทศไทย"
      }
    }
  },
  "altSpellings": [
    "TH",
    "Prathet",
    "Thai",
    "Kingdom of Thailand",
    "ราชอาณาจักรไทย",
    "Ratcha Anachak Thai"
  ],
  "area": 513120,
  "borders": [
    "MMR",
    "KHM",
    "LAO",
    "MYS"
  ],
  "capital": "Bangkok",
  "demonym": "Thai",
  "languages": {
    "tha": "Thai"
  },
  "latlng": [
    15,
    100
  ],
  "nativeName": "ประเทศไทย",
  "population": 64871000,
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "timezones": [
    "UTC+07:00"
  ],
  "tld": [
    ".th",
    ".ไทย"
  ],
  "translations": {
    "deu": {
      "official": "Königreich Thailand",
      "common": "Thailand"
    },
    "fra": {
      "official": "Royaume de Thaïlande",
      "common": "Thaïlande"
    },
    "hrv": {
      "official": "Kraljevina Tajland",
      "common": "Tajland"
    },
    "ita": {
      "official": "Regno di Thailandia",
      "common": "Tailandia"
    },
    "jpn": {
      "official": "タイ王国",
      "common": "タイ"
    },
    "nld": {
      "official": "Koninkrijk Thailand",
      "common": "Thailand"
    },
    "por": {
      "official": "Reino da Tailândia",
      "common": "Tailândia"
    },
    "rus": {
      "official": "Королевство Таиланд",
      "common": "Таиланд"
    },
    "spa": {
      "official": "Reino de Tailandia",
      "common": "Tailandia"
    },
    "fin": {
      "official": "Thaimaan kuningaskunta",
      "common": "Thaimaa"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/thailand",
  "currency": [
    "THB"
  ],
  "callingCode": [
    "66"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "TH",
    "ccn3": "764",
    "cca3": "THA",
    "cioc": "THA"
  }
}
},{}],221:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Timor-Leste",
    "official": "Democratic Republic of Timor-Leste",
    "native": {
      "por": {
        "official": "República Democrática de Timor-Leste",
        "common": "Timor-Leste"
      },
      "tet": {
        "official": "Repúblika Demokrátika Timór-Leste",
        "common": "Timór-Leste"
      }
    }
  },
  "tld": [
    ".tl"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "670"
  ],
  "capital": "Dili",
  "altSpellings": [
    "TL",
    "East Timor",
    "Democratic Republic of Timor-Leste",
    "República Democrática de Timor-Leste",
    "Repúblika Demokrátika Timór-Leste",
    "Timór Lorosa'e",
    "Timor Lorosae"
  ],
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "languages": {
    "por": "Portuguese",
    "tet": "Tetum"
  },
  "translations": {
    "deu": {
      "official": "Demokratische Republik Timor-Leste",
      "common": "Timor-Leste"
    },
    "fra": {
      "official": "République démocratique du Timor oriental",
      "common": "Timor oriental"
    },
    "hrv": {
      "official": "Demokratska Republika Timor-Leste",
      "common": "Istočni Timor"
    },
    "ita": {
      "official": "Repubblica Democratica di Timor Est",
      "common": "Timor Est"
    },
    "jpn": {
      "official": "東ティモール民主共和国",
      "common": "東ティモール"
    },
    "nld": {
      "official": "Democratische Republiek Oost-Timor",
      "common": "Oost-Timor"
    },
    "por": {
      "official": "República Democrática de Timor-Leste",
      "common": "Timor-Leste"
    },
    "rus": {
      "official": "Демократическая Республика Тимор -Лешти",
      "common": "Восточный Тимор"
    },
    "spa": {
      "official": "República Democrática de Timor-Leste",
      "common": "Timor Oriental"
    },
    "fin": {
      "official": "Itä-Timorin demokraattinen tasavalta",
      "common": "Itä-Timor"
    }
  },
  "latlng": [
    -8.83333333,
    125.91666666
  ],
  "demonym": "East Timorese",
  "landlocked": false,
  "borders": [
    "IDN"
  ],
  "area": 14874,
  "codes": {
    "cca2": "TL",
    "ccn3": "626",
    "cca3": "TLS",
    "cioc": "TLS"
  }
}
},{}],222:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Togo",
    "official": "Togolese Republic",
    "native": {
      "fra": {
        "official": "République togolaise",
        "common": "Togo"
      }
    }
  },
  "tld": [
    ".tg"
  ],
  "currency": [
    "XOF"
  ],
  "callingCode": [
    "228"
  ],
  "capital": "Lomé",
  "altSpellings": [
    "TG",
    "Togolese",
    "Togolese Republic",
    "République Togolaise"
  ],
  "region": "Africa",
  "subregion": "Western Africa",
  "languages": {
    "fra": "French"
  },
  "translations": {
    "deu": {
      "official": "Republik Togo",
      "common": "Togo"
    },
    "fra": {
      "official": "République togolaise",
      "common": "Togo"
    },
    "hrv": {
      "official": "Togolese Republika",
      "common": "Togo"
    },
    "ita": {
      "official": "Repubblica del Togo",
      "common": "Togo"
    },
    "jpn": {
      "official": "トーゴ共和国",
      "common": "トーゴ"
    },
    "nld": {
      "official": "Republiek Togo",
      "common": "Togo"
    },
    "por": {
      "official": "República do Togo",
      "common": "Togo"
    },
    "rus": {
      "official": "Того Республика",
      "common": "Того"
    },
    "spa": {
      "official": "República de Togo",
      "common": "Togo"
    },
    "fin": {
      "official": "Togon tasavalta",
      "common": "Togo"
    }
  },
  "latlng": [
    8,
    1.16666666
  ],
  "demonym": "Togolese",
  "landlocked": false,
  "borders": [
    "BEN",
    "BFA",
    "GHA"
  ],
  "area": 56785,
  "codes": {
    "cca2": "TG",
    "ccn3": "768",
    "cca3": "TGO",
    "cioc": "TOG"
  }
}
},{}],223:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Tokelau",
    "official": "Tokelau",
    "native": {
      "eng": {
        "official": "Tokelau",
        "common": "Tokelau"
      },
      "smo": {
        "official": "Tokelau",
        "common": "Tokelau"
      },
      "tkl": {
        "official": "Tokelau",
        "common": "Tokelau"
      }
    }
  },
  "altSpellings": [
    "TK"
  ],
  "area": 12,
  "borders": [],
  "capital": "Fakaofo",
  "demonym": "Tokelauan",
  "languages": {
    "eng": "English",
    "smo": "Samoan",
    "tkl": "Tokelauan"
  },
  "latlng": [
    -9,
    -172
  ],
  "nativeName": "Tokelau",
  "population": 1411,
  "region": "Oceania",
  "subregion": "Polynesia",
  "timezones": null,
  "tld": [
    ".tk"
  ],
  "translations": {
    "deu": {
      "official": "Tokelau",
      "common": "Tokelau"
    },
    "fra": {
      "official": "Îles Tokelau",
      "common": "Tokelau"
    },
    "hrv": {
      "official": "Tokelau",
      "common": "Tokelau"
    },
    "ita": {
      "official": "Tokelau",
      "common": "Isole Tokelau"
    },
    "jpn": {
      "official": "トケラウ諸島",
      "common": "トケラウ"
    },
    "nld": {
      "official": "Tokelau",
      "common": "Tokelau"
    },
    "por": {
      "official": "Tokelau",
      "common": "Tokelau"
    },
    "rus": {
      "official": "Токелау",
      "common": "Токелау"
    },
    "spa": {
      "official": "Tokelau",
      "common": "Islas Tokelau"
    },
    "fin": {
      "official": "Tokelau",
      "common": "Tokelau"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/tokelau",
  "currency": [
    "NZD"
  ],
  "callingCode": [
    "690"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "TK",
    "ccn3": "772",
    "cca3": "TKL",
    "cioc": ""
  }
}
},{}],224:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Tonga",
    "official": "Kingdom of Tonga",
    "native": {
      "eng": {
        "official": "Kingdom of Tonga",
        "common": "Tonga"
      },
      "ton": {
        "official": "Kingdom of Tonga",
        "common": "Tonga"
      }
    }
  },
  "altSpellings": [
    "TO"
  ],
  "area": 747,
  "borders": [],
  "capital": "Nuku'alofa",
  "demonym": "Tongan",
  "languages": {
    "eng": "English",
    "ton": "Tongan"
  },
  "latlng": [
    -20,
    -175
  ],
  "nativeName": "Tonga",
  "population": 103252,
  "region": "Oceania",
  "subregion": "Polynesia",
  "timezones": [
    "UTC+13:00"
  ],
  "tld": [
    ".to"
  ],
  "translations": {
    "deu": {
      "official": "Königreich Tonga",
      "common": "Tonga"
    },
    "fra": {
      "official": "Royaume des Tonga",
      "common": "Tonga"
    },
    "hrv": {
      "official": "Kraljevina Tonga",
      "common": "Tonga"
    },
    "ita": {
      "official": "Regno di Tonga",
      "common": "Tonga"
    },
    "jpn": {
      "official": "トンガ王国",
      "common": "トンガ"
    },
    "nld": {
      "official": "Koninkrijk Tonga",
      "common": "Tonga"
    },
    "por": {
      "official": "Reino de Tonga",
      "common": "Tonga"
    },
    "rus": {
      "official": "Королевство Тонга",
      "common": "Тонга"
    },
    "spa": {
      "official": "Reino de Tonga",
      "common": "Tonga"
    },
    "fin": {
      "official": "Tongan kuningaskunta",
      "common": "Tonga"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/tonga",
  "currency": [
    "TOP"
  ],
  "callingCode": [
    "676"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "TO",
    "ccn3": "776",
    "cca3": "TON",
    "cioc": "TGA"
  }
}
},{}],225:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Trinidad and Tobago",
    "official": "Republic of Trinidad and Tobago",
    "native": {
      "eng": {
        "official": "Republic of Trinidad and Tobago",
        "common": "Trinidad and Tobago"
      }
    }
  },
  "tld": [
    ".tt"
  ],
  "currency": [
    "TTD"
  ],
  "callingCode": [
    "1868"
  ],
  "capital": "Port of Spain",
  "altSpellings": [
    "TT",
    "Republic of Trinidad and Tobago"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Republik Trinidad und Tobago",
      "common": "Trinidad und Tobago"
    },
    "fra": {
      "official": "République de Trinité-et-Tobago",
      "common": "Trinité-et-Tobago"
    },
    "hrv": {
      "official": "Republika Trinidad i Tobago",
      "common": "Trinidad i Tobago"
    },
    "ita": {
      "official": "Repubblica di Trinidad e Tobago",
      "common": "Trinidad e Tobago"
    },
    "jpn": {
      "official": "トリニダード·トバゴ共和国",
      "common": "トリニダード・トバゴ"
    },
    "nld": {
      "official": "Republiek Trinidad en Tobago",
      "common": "Trinidad en Tobago"
    },
    "por": {
      "official": "República de Trinidad e Tobago",
      "common": "Trinidade e Tobago"
    },
    "rus": {
      "official": "Республика Тринидад и Тобаго",
      "common": "Тринидад и Тобаго"
    },
    "spa": {
      "official": "República de Trinidad y Tobago",
      "common": "Trinidad y Tobago"
    },
    "fin": {
      "official": "Trinidadin ja Tobagon tasavalta",
      "common": "Trinidad ja Tobago"
    }
  },
  "latlng": [
    11,
    -61
  ],
  "demonym": "Trinidadian",
  "landlocked": false,
  "borders": [],
  "area": 5130,
  "codes": {
    "cca2": "TT",
    "ccn3": "780",
    "cca3": "TTO",
    "cioc": "TTO"
  }
}
},{}],226:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Tunisia",
    "official": "Tunisian Republic",
    "native": {
      "ara": {
        "official": "الجمهورية التونسية",
        "common": "تونس"
      }
    }
  },
  "altSpellings": [
    "TN",
    "Republic of Tunisia",
    "al-Jumhūriyyah at-Tūnisiyyah"
  ],
  "area": 163610,
  "borders": [
    "DZA",
    "LBY"
  ],
  "capital": "Tunis",
  "demonym": "Tunisian",
  "languages": {
    "ara": "Arabic"
  },
  "latlng": [
    34,
    9
  ],
  "nativeName": "تونس",
  "population": 10982754,
  "region": "Africa",
  "subregion": "Northern Africa",
  "timezones": [
    "UTC+01:00"
  ],
  "tld": [
    ".tn"
  ],
  "translations": {
    "deu": {
      "official": "Tunesische Republik",
      "common": "Tunesien"
    },
    "fra": {
      "official": "République tunisienne",
      "common": "Tunisie"
    },
    "hrv": {
      "official": "Tuniski Republika",
      "common": "Tunis"
    },
    "ita": {
      "official": "Repubblica tunisina",
      "common": "Tunisia"
    },
    "jpn": {
      "official": "チュニジア共和国",
      "common": "チュニジア"
    },
    "nld": {
      "official": "Republiek Tunesië",
      "common": "Tunesië"
    },
    "por": {
      "official": "República da Tunísia",
      "common": "Tunísia"
    },
    "rus": {
      "official": "Тунисской Республики",
      "common": "Тунис"
    },
    "spa": {
      "official": "República de Túnez",
      "common": "Túnez"
    },
    "fin": {
      "official": "Tunisian tasavalta",
      "common": "Tunisia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/tunisia",
  "currency": [
    "TND"
  ],
  "callingCode": [
    "216"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "TN",
    "ccn3": "788",
    "cca3": "TUN",
    "cioc": "TUN"
  }
}
},{}],227:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Turkey",
    "official": "Republic of Turkey",
    "native": {
      "tur": {
        "official": "Türkiye Cumhuriyeti",
        "common": "Türkiye"
      }
    }
  },
  "altSpellings": [
    "TR",
    "Turkiye",
    "Republic of Turkey",
    "Türkiye Cumhuriyeti"
  ],
  "area": 783562,
  "borders": [
    "ARM",
    "AZE",
    "BGR",
    "GEO",
    "GRC",
    "IRN",
    "IRQ",
    "SYR"
  ],
  "capital": "Ankara",
  "demonym": "Turkish",
  "languages": {
    "tur": "Turkish"
  },
  "latlng": [
    39,
    35
  ],
  "nativeName": "Türkiye",
  "population": 76667864,
  "region": "Asia",
  "subregion": "Western Asia",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".tr"
  ],
  "translations": {
    "deu": {
      "official": "Republik Türkei",
      "common": "Türkei"
    },
    "fra": {
      "official": "République de Turquie",
      "common": "Turquie"
    },
    "hrv": {
      "official": "Republika Turska",
      "common": "Turska"
    },
    "ita": {
      "official": "Repubblica di Turchia",
      "common": "Turchia"
    },
    "jpn": {
      "official": "トルコ共和国",
      "common": "トルコ"
    },
    "nld": {
      "official": "Republiek Turkije",
      "common": "Turkije"
    },
    "por": {
      "official": "República da Turquia",
      "common": "Turquia"
    },
    "rus": {
      "official": "Республика Турции",
      "common": "Турция"
    },
    "spa": {
      "official": "República de Turquía",
      "common": "Turquía"
    },
    "fin": {
      "official": "Turkin tasavalta",
      "common": "Turkki"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/turkey",
  "currency": [
    "TRY"
  ],
  "callingCode": [
    "90"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "TR",
    "ccn3": "792",
    "cca3": "TUR",
    "cioc": "TUR"
  }
}
},{}],228:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Turkmenistan",
    "official": "Turkmenistan",
    "native": {
      "rus": {
        "official": "Туркменистан",
        "common": "Туркмения"
      },
      "tuk": {
        "official": "Türkmenistan",
        "common": "Türkmenistan"
      }
    }
  },
  "altSpellings": [
    "TM"
  ],
  "area": 488100,
  "borders": [
    "AFG",
    "IRN",
    "KAZ",
    "UZB"
  ],
  "capital": "Ashgabat",
  "demonym": "Turkmen",
  "languages": {
    "rus": "Russian",
    "tuk": "Turkmen"
  },
  "latlng": [
    40,
    60
  ],
  "nativeName": "Türkmenistan",
  "population": 5838064,
  "region": "Asia",
  "subregion": "Central Asia",
  "timezones": [
    "UTC+05:00"
  ],
  "tld": [
    ".tm"
  ],
  "translations": {
    "deu": {
      "official": "Turkmenistan",
      "common": "Turkmenistan"
    },
    "fra": {
      "official": "Turkménistan",
      "common": "Turkménistan"
    },
    "hrv": {
      "official": "Turkmenistan",
      "common": "Turkmenistan"
    },
    "ita": {
      "official": "Turkmenistan",
      "common": "Turkmenistan"
    },
    "jpn": {
      "official": "トルクメニスタン",
      "common": "トルクメニスタン"
    },
    "nld": {
      "official": "Turkmenistan",
      "common": "Turkmenistan"
    },
    "por": {
      "official": "Turcomenistão",
      "common": "Turquemenistão"
    },
    "rus": {
      "official": "Туркменистан",
      "common": "Туркмения"
    },
    "spa": {
      "official": "Turkmenistán",
      "common": "Turkmenistán"
    },
    "fin": {
      "official": "Turkmenistan",
      "common": "Turkmenistan"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/turkmenistan",
  "currency": [
    "TMT"
  ],
  "callingCode": [
    "993"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "TM",
    "ccn3": "795",
    "cca3": "TKM",
    "cioc": "TKM"
  }
}
},{}],229:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Turks and Caicos Islands",
    "official": "Turks and Caicos Islands",
    "native": {
      "eng": {
        "official": "Turks and Caicos Islands",
        "common": "Turks and Caicos Islands"
      }
    }
  },
  "tld": [
    ".tc"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "1649"
  ],
  "capital": "Cockburn Town",
  "altSpellings": [
    "TC"
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Turks und Caicos Inseln",
      "common": "Turks-und Caicosinseln"
    },
    "fra": {
      "official": "Îles Turques et Caïques",
      "common": "Îles Turques-et-Caïques"
    },
    "hrv": {
      "official": "Otoci Turks i Caicos",
      "common": "Otoci Turks i Caicos"
    },
    "ita": {
      "official": "Turks e Caicos",
      "common": "Isole Turks e Caicos"
    },
    "jpn": {
      "official": "タークス·カイコス諸島",
      "common": "タークス・カイコス諸島"
    },
    "nld": {
      "official": "Turks-en Caicoseilanden",
      "common": "Turks-en Caicoseilanden"
    },
    "por": {
      "official": "Ilhas Turks e Caicos",
      "common": "Ilhas Turks e Caicos"
    },
    "rus": {
      "official": "Теркс и Кайкос острова",
      "common": "Теркс и Кайкос"
    },
    "spa": {
      "official": "Islas Turcas y Caicos",
      "common": "Islas Turks y Caicos"
    },
    "fin": {
      "official": "Turks-ja Caicossaaret",
      "common": "Turks-ja Caicossaaret"
    }
  },
  "latlng": [
    21.75,
    -71.58333333
  ],
  "demonym": "Turks and Caicos Islander",
  "landlocked": false,
  "borders": [],
  "area": 948,
  "codes": {
    "cca2": "TC",
    "ccn3": "796",
    "cca3": "TCA",
    "cioc": ""
  }
}
},{}],230:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Tuvalu",
    "official": "Tuvalu",
    "native": {
      "eng": {
        "official": "Tuvalu",
        "common": "Tuvalu"
      },
      "tvl": {
        "official": "Tuvalu",
        "common": "Tuvalu"
      }
    }
  },
  "altSpellings": [
    "TV"
  ],
  "area": 26,
  "borders": [],
  "capital": "Funafuti",
  "demonym": "Tuvaluan",
  "languages": {
    "eng": "English",
    "tvl": "Tuvaluan"
  },
  "latlng": [
    -8,
    178
  ],
  "nativeName": "Tuvalu",
  "population": 11323,
  "region": "Oceania",
  "subregion": "Polynesia",
  "timezones": [
    "UTC+12:00"
  ],
  "tld": [
    ".tv"
  ],
  "translations": {
    "deu": {
      "official": "Tuvalu",
      "common": "Tuvalu"
    },
    "fra": {
      "official": "Tuvalu",
      "common": "Tuvalu"
    },
    "hrv": {
      "official": "Tuvalu",
      "common": "Tuvalu"
    },
    "ita": {
      "official": "Tuvalu",
      "common": "Tuvalu"
    },
    "jpn": {
      "official": "ツバル",
      "common": "ツバル"
    },
    "nld": {
      "official": "Tuvalu",
      "common": "Tuvalu"
    },
    "por": {
      "official": "Tuvalu",
      "common": "Tuvalu"
    },
    "rus": {
      "official": "Тувалу",
      "common": "Тувалу"
    },
    "spa": {
      "official": "Tuvalu",
      "common": "Tuvalu"
    },
    "fin": {
      "official": "Tuvalu",
      "common": "Tuvalu"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/tuvalu",
  "currency": [
    "AUD"
  ],
  "callingCode": [
    "688"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "TV",
    "ccn3": "798",
    "cca3": "TUV",
    "cioc": "TUV"
  }
}
},{}],231:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Uganda",
    "official": "Republic of Uganda",
    "native": {
      "eng": {
        "official": "Republic of Uganda",
        "common": "Uganda"
      },
      "swa": {
        "official": "Republic of Uganda",
        "common": "Uganda"
      }
    }
  },
  "altSpellings": [
    "UG",
    "Republic of Uganda",
    "Jamhuri ya Uganda"
  ],
  "area": 241550,
  "borders": [
    "COD",
    "KEN",
    "RWA",
    "SSD",
    "TZA"
  ],
  "capital": "Kampala",
  "demonym": "Ugandan",
  "languages": {
    "eng": "English",
    "swa": "Swahili"
  },
  "latlng": [
    1,
    32
  ],
  "nativeName": "Uganda",
  "population": 34856813,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".ug"
  ],
  "translations": {
    "deu": {
      "official": "Republik Uganda",
      "common": "Uganda"
    },
    "fra": {
      "official": "République de l'Ouganda",
      "common": "Ouganda"
    },
    "hrv": {
      "official": "Republika Uganda",
      "common": "Uganda"
    },
    "ita": {
      "official": "Repubblica di Uganda",
      "common": "Uganda"
    },
    "jpn": {
      "official": "ウガンダ共和国",
      "common": "ウガンダ"
    },
    "nld": {
      "official": "Republiek Uganda",
      "common": "Oeganda"
    },
    "por": {
      "official": "República do Uganda",
      "common": "Uganda"
    },
    "rus": {
      "official": "Республика Уганда",
      "common": "Уганда"
    },
    "spa": {
      "official": "República de Uganda",
      "common": "Uganda"
    },
    "fin": {
      "official": "Ugandan tasavalta",
      "common": "Uganda"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/uganda",
  "currency": [
    "UGX"
  ],
  "callingCode": [
    "256"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "UG",
    "ccn3": "800",
    "cca3": "UGA",
    "cioc": "UGA"
  }
}
},{}],232:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Ukraine",
    "official": "Ukraine",
    "native": {
      "rus": {
        "official": "Украина",
        "common": "Украина"
      },
      "ukr": {
        "official": "Україна",
        "common": "Україна"
      }
    }
  },
  "altSpellings": [
    "UA",
    "Ukrayina"
  ],
  "area": 603500,
  "borders": [
    "BLR",
    "HUN",
    "MDA",
    "POL",
    "ROU",
    "RUS",
    "SVK"
  ],
  "capital": "Kiev",
  "demonym": "Ukrainian",
  "languages": {
    "rus": "Russian",
    "ukr": "Ukrainian"
  },
  "latlng": [
    49,
    32
  ],
  "nativeName": "Україна",
  "population": 42973696,
  "region": "Europe",
  "subregion": "Eastern Europe",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".ua",
    ".укр"
  ],
  "translations": {
    "deu": {
      "official": "Ukraine",
      "common": "Ukraine"
    },
    "fra": {
      "official": "Ukraine",
      "common": "Ukraine"
    },
    "hrv": {
      "official": "Ukrajina",
      "common": "Ukrajina"
    },
    "ita": {
      "official": "Ucraina",
      "common": "Ucraina"
    },
    "jpn": {
      "official": "ウクライナ",
      "common": "ウクライナ"
    },
    "nld": {
      "official": "Oekraïne",
      "common": "Oekraïne"
    },
    "por": {
      "official": "Ucrânia",
      "common": "Ucrânia"
    },
    "rus": {
      "official": "Украина",
      "common": "Украина"
    },
    "spa": {
      "official": "Ucrania",
      "common": "Ucrania"
    },
    "fin": {
      "official": "Ukraina",
      "common": "Ukraina"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/ukraine",
  "currency": [
    "UAH"
  ],
  "callingCode": [
    "380"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "UA",
    "ccn3": "804",
    "cca3": "UKR",
    "cioc": "UKR"
  }
}
},{}],233:[function(require,module,exports){
module.exports={
  "name": {
    "common": "United Arab Emirates",
    "official": "United Arab Emirates",
    "native": {
      "ara": {
        "official": "الإمارات العربية المتحدة",
        "common": "دولة الإمارات العربية المتحدة"
      }
    }
  },
  "altSpellings": [
    "AE",
    "UAE",
    "Emirates"
  ],
  "area": 83600,
  "borders": [
    "OMN",
    "SAU"
  ],
  "capital": "Abu Dhabi",
  "demonym": "Emirati",
  "languages": {
    "ara": "Arabic"
  },
  "latlng": [
    24,
    54
  ],
  "nativeName": "دولة الإمارات العربية المتحدة",
  "population": 9446000,
  "region": "Asia",
  "subregion": "Western Asia",
  "timezones": [
    "UTC+04"
  ],
  "tld": [
    ".ae",
    "امارات."
  ],
  "translations": {
    "deu": {
      "official": "Vereinigte Arabische Emirate",
      "common": "Vereinigte Arabische Emirate"
    },
    "fra": {
      "official": "Émirats arabes unis",
      "common": "Émirats arabes unis"
    },
    "hrv": {
      "official": "Ujedinjeni Arapski Emirati",
      "common": "Ujedinjeni Arapski Emirati"
    },
    "ita": {
      "official": "Emirati Arabi Uniti",
      "common": "Emirati Arabi Uniti"
    },
    "jpn": {
      "official": "アラブ首長国連邦",
      "common": "アラブ首長国連邦"
    },
    "nld": {
      "official": "Verenigde Arabische Emiraten",
      "common": "Verenigde Arabische Emiraten"
    },
    "por": {
      "official": "Emirados Árabes Unidos",
      "common": "Emirados Árabes Unidos"
    },
    "rus": {
      "official": "Объединенные Арабские Эмираты",
      "common": "Объединённые Арабские Эмираты"
    },
    "spa": {
      "official": "Emiratos Árabes Unidos",
      "common": "Emiratos Árabes Unidos"
    },
    "fin": {
      "official": "Yhdistyneet arabiemiirikunnat",
      "common": "Arabiemiraatit"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/united_arab_emirates",
  "currency": [
    "AED"
  ],
  "callingCode": [
    "971"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "AE",
    "ccn3": "784",
    "cca3": "ARE",
    "cioc": "UAE"
  }
}
},{}],234:[function(require,module,exports){
module.exports={
  "name": {
    "common": "United Kingdom",
    "official": "United Kingdom of Great Britain and Northern Ireland",
    "native": {
      "eng": {
        "official": "United Kingdom of Great Britain and Northern Ireland",
        "common": "United Kingdom"
      }
    }
  },
  "altSpellings": [
    "GB",
    "UK",
    "Great Britain"
  ],
  "area": 242900,
  "borders": [
    "IRL"
  ],
  "capital": "London",
  "demonym": "British",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    54,
    -2
  ],
  "nativeName": "United Kingdom",
  "population": 64105654,
  "region": "Europe",
  "subregion": "Northern Europe",
  "timezones": [
    "UTC−08:00",
    "UTC−05:00",
    "UTC−04:00",
    "UTC−03:00",
    "UTC−02:00",
    "UTC",
    "UTC+01:00",
    "UTC+02:00",
    "UTC+06:00"
  ],
  "tld": [
    ".uk"
  ],
  "translations": {
    "deu": {
      "official": "Vereinigtes Königreich Großbritannien und Nordirland",
      "common": "Vereinigtes Königreich"
    },
    "fra": {
      "official": "Royaume-Uni de Grande-Bretagne et d'Irlande du Nord",
      "common": "Royaume-Uni"
    },
    "hrv": {
      "official": "Ujedinjeno Kraljevstvo Velike Britanije i Sjeverne Irske",
      "common": "Ujedinjeno Kraljevstvo"
    },
    "ita": {
      "official": "Regno Unito di Gran Bretagna e Irlanda del Nord",
      "common": "Regno Unito"
    },
    "jpn": {
      "official": "グレート·ブリテンおよび北アイルランド連合王国",
      "common": "イギリス"
    },
    "nld": {
      "official": "Verenigd Koninkrijk van Groot-Brittannië en Noord-Ierland",
      "common": "Verenigd Koninkrijk"
    },
    "por": {
      "official": "Reino Unido da Grã-Bretanha e Irlanda do Norte",
      "common": "Reino Unido"
    },
    "rus": {
      "official": "Соединенное Королевство Великобритании и Северной Ирландии",
      "common": "Великобритания"
    },
    "spa": {
      "official": "Reino Unido de Gran Bretaña e Irlanda del Norte",
      "common": "Reino Unido"
    },
    "fin": {
      "official": "Ison-Britannian ja Pohjois-Irlannin yhdistynyt kuningaskunta",
      "common": "Yhdistynyt kuningaskunta"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/united_kingdom",
  "currency": [
    "GBP"
  ],
  "callingCode": [
    "44"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "GB",
    "ccn3": "826",
    "cca3": "GBR",
    "cioc": "GBR"
  }
}
},{}],235:[function(require,module,exports){
module.exports={
  "name": {
    "common": "United States",
    "official": "United States of America",
    "native": {
      "eng": {
        "official": "United States of America",
        "common": "United States"
      }
    }
  },
  "altSpellings": [
    "US",
    "USA",
    "United States of America"
  ],
  "area": 9372610,
  "borders": [
    "CAN",
    "MEX"
  ],
  "capital": "Washington D.C.",
  "demonym": "American",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    38,
    -97
  ],
  "nativeName": "United States",
  "population": 319259000,
  "region": "Americas",
  "subregion": "Northern America",
  "timezones": [
    "UTC−12:00",
    "UTC−11:00",
    "UTC−10:00",
    "UTC−09:00",
    "UTC−08:00",
    "UTC−07:00",
    "UTC−06:00",
    "UTC−05:00",
    "UTC−04:00",
    "UTC+10:00",
    "UTC+12:00"
  ],
  "tld": [
    ".us"
  ],
  "translations": {
    "deu": {
      "official": "Vereinigte Staaten von Amerika",
      "common": "Vereinigte Staaten von Amerika"
    },
    "fra": {
      "official": "Les états-unis d'Amérique",
      "common": "États-Unis"
    },
    "hrv": {
      "official": "Sjedinjene Države Amerike",
      "common": "Sjedinjene Američke Države"
    },
    "ita": {
      "official": "Stati Uniti d'America",
      "common": "Stati Uniti d'America"
    },
    "jpn": {
      "official": "アメリカ合衆国",
      "common": "アメリカ合衆国"
    },
    "nld": {
      "official": "Verenigde Staten van Amerika",
      "common": "Verenigde Staten"
    },
    "por": {
      "official": "Estados Unidos da América",
      "common": "Estados Unidos"
    },
    "rus": {
      "official": "Соединенные Штаты Америки",
      "common": "Соединённые Штаты Америки"
    },
    "spa": {
      "official": "Estados Unidos de América",
      "common": "Estados Unidos"
    },
    "fin": {
      "official": "Amerikan yhdysvallat",
      "common": "Yhdysvallat"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/united_states_of_america",
  "currency": [
    "USD",
    "USN",
    "USS"
  ],
  "callingCode": [
    "1"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "US",
    "ccn3": "840",
    "cca3": "USA",
    "cioc": "USA"
  }
}
},{}],236:[function(require,module,exports){
module.exports={
  "name": {
    "common": "United States Minor Outlying Islands",
    "official": "United States Minor Outlying Islands",
    "native": {
      "eng": {
        "official": "United States Minor Outlying Islands",
        "common": "United States Minor Outlying Islands"
      }
    }
  },
  "tld": [
    ".us"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [],
  "capital": "",
  "altSpellings": [
    "UM"
  ],
  "region": "Americas",
  "subregion": "Northern America",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "USA, kleinere ausgelagerte Inseln",
      "common": "Kleinere Inselbesitzungen der Vereinigten Staaten"
    },
    "fra": {
      "official": "Îles mineures éloignées des États-Unis",
      "common": "Îles mineures éloignées des États-Unis"
    },
    "hrv": {
      "official": "Mali udaljeni otoci SAD-a",
      "common": "Mali udaljeni otoci SAD-a"
    },
    "ita": {
      "official": "Stati Uniti Isole Minori",
      "common": "Isole minori esterne degli Stati Uniti d'America"
    },
    "jpn": {
      "official": "アメリカ合衆国外諸島",
      "common": "合衆国領有小離島"
    },
    "nld": {
      "official": "Kleine afgelegen eilanden van de Verenigde Staten",
      "common": "Kleine afgelegen eilanden van de Verenigde Staten"
    },
    "por": {
      "official": "Estados Unidos Ilhas Menores Distantes",
      "common": "Ilhas Menores Distantes dos Estados Unidos"
    },
    "rus": {
      "official": "Внешние малые острова США",
      "common": "Внешние малые острова США"
    },
    "spa": {
      "official": "Estados Unidos Islas menores alejadas de",
      "common": "Islas Ultramarinas Menores de Estados Unidos"
    },
    "fin": {
      "official": "Yhdysvaltain asumattomat saaret",
      "common": "Yhdysvaltain asumattomat saaret"
    }
  },
  "latlng": [],
  "demonym": "American",
  "landlocked": false,
  "borders": [],
  "area": 34.2,
  "codes": {
    "cca2": "UM",
    "ccn3": "581",
    "cca3": "UMI",
    "cioc": ""
  }
}
},{}],237:[function(require,module,exports){
module.exports={
  "name": {
    "common": "United States Virgin Islands",
    "official": "Virgin Islands of the United States",
    "native": {
      "eng": {
        "official": "Virgin Islands of the United States",
        "common": "United States Virgin Islands"
      }
    }
  },
  "tld": [
    ".vi"
  ],
  "currency": [
    "USD"
  ],
  "callingCode": [
    "1340"
  ],
  "capital": "Charlotte Amalie",
  "altSpellings": [
    "VI",
    "Virgin Islands, U.S."
  ],
  "region": "Americas",
  "subregion": "Caribbean",
  "languages": {
    "eng": "English"
  },
  "translations": {
    "deu": {
      "official": "Jungferninseln der Vereinigten Staaten",
      "common": "Amerikanische Jungferninseln"
    },
    "fra": {
      "official": "Îles Vierges des États-Unis",
      "common": "Îles Vierges des États-Unis"
    },
    "hrv": {
      "official": "Djevičanski Otoci SAD",
      "common": "Američki Djevičanski Otoci"
    },
    "ita": {
      "official": "Isole Vergini degli Stati Uniti",
      "common": "Isole Vergini americane"
    },
    "jpn": {
      "official": "米国のバージン諸島",
      "common": "アメリカ領ヴァージン諸島"
    },
    "nld": {
      "official": "Maagdeneilanden van de Verenigde Staten",
      "common": "Amerikaanse Maagdeneilanden"
    },
    "por": {
      "official": "Ilhas Virgens dos Estados Unidos",
      "common": "Ilhas Virgens dos Estados Unidos"
    },
    "rus": {
      "official": "Виргинские острова Соединенных Штатов",
      "common": "Виргинские Острова"
    },
    "spa": {
      "official": "Islas Vírgenes de los Estados Unidos",
      "common": "Islas Vírgenes de los Estados Unidos"
    },
    "fin": {
      "official": "Yhdysvaltain Neitsytsaaret",
      "common": "Neitsytsaaret"
    }
  },
  "latlng": [
    18.35,
    -64.933333
  ],
  "demonym": "Virgin Islander",
  "landlocked": false,
  "borders": [],
  "area": 347,
  "codes": {
    "cca2": "VI",
    "ccn3": "850",
    "cca3": "VIR",
    "cioc": "ISV"
  }
}
},{}],238:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Uruguay",
    "official": "Oriental Republic of Uruguay",
    "native": {
      "spa": {
        "official": "República Oriental del Uruguay",
        "common": "Uruguay"
      }
    }
  },
  "altSpellings": [
    "UY",
    "Oriental Republic of Uruguay",
    "República Oriental del Uruguay"
  ],
  "area": 181034,
  "borders": [
    "ARG",
    "BRA"
  ],
  "capital": "Montevideo",
  "demonym": "Uruguayan",
  "languages": {
    "spa": "Spanish"
  },
  "latlng": [
    -33,
    -56
  ],
  "nativeName": "Uruguay",
  "population": 3404189,
  "region": "Americas",
  "subregion": "South America",
  "timezones": [
    "UTC−03:00"
  ],
  "tld": [
    ".uy"
  ],
  "translations": {
    "deu": {
      "official": "Republik Östlich des Uruguay",
      "common": "Uruguay"
    },
    "fra": {
      "official": "République orientale de l'Uruguay",
      "common": "Uruguay"
    },
    "hrv": {
      "official": "Orijentalna Republika Urugvaj",
      "common": "Urugvaj"
    },
    "ita": {
      "official": "Repubblica Orientale dell'Uruguay",
      "common": "Uruguay"
    },
    "jpn": {
      "official": "ウルグアイ東方共和国",
      "common": "ウルグアイ"
    },
    "nld": {
      "official": "Oosterse Republiek Uruguay",
      "common": "Uruguay"
    },
    "por": {
      "official": "República Oriental do Uruguai",
      "common": "Uruguai"
    },
    "rus": {
      "official": "Восточной Республики Уругвай",
      "common": "Уругвай"
    },
    "spa": {
      "official": "República Oriental del Uruguay",
      "common": "Uruguay"
    },
    "fin": {
      "official": "Uruguayn itäinen tasavalta",
      "common": "Uruguay"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/uruguay",
  "currency": [
    "UYI",
    "UYU"
  ],
  "callingCode": [
    "598"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "UY",
    "ccn3": "858",
    "cca3": "URY",
    "cioc": "URU"
  }
}
},{}],239:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Uzbekistan",
    "official": "Republic of Uzbekistan",
    "native": {
      "rus": {
        "official": "Республика Узбекистан",
        "common": "Узбекистан"
      },
      "uzb": {
        "official": "O'zbekiston Respublikasi",
        "common": "O‘zbekiston"
      }
    }
  },
  "altSpellings": [
    "UZ",
    "Republic of Uzbekistan",
    "O‘zbekiston Respublikasi",
    "Ўзбекистон Республикаси"
  ],
  "area": 447400,
  "borders": [
    "AFG",
    "KAZ",
    "KGZ",
    "TJK",
    "TKM"
  ],
  "capital": "Tashkent",
  "demonym": "Uzbekistani",
  "languages": {
    "rus": "Russian",
    "uzb": "Uzbek"
  },
  "latlng": [
    41,
    64
  ],
  "nativeName": "O‘zbekiston",
  "population": 30492800,
  "region": "Asia",
  "subregion": "Central Asia",
  "timezones": [
    "UTC+05:00"
  ],
  "tld": [
    ".uz"
  ],
  "translations": {
    "deu": {
      "official": "Republik Usbekistan",
      "common": "Usbekistan"
    },
    "fra": {
      "official": "République d'Ouzbékistan",
      "common": "Ouzbékistan"
    },
    "hrv": {
      "official": "Republika Uzbekistan",
      "common": "Uzbekistan"
    },
    "ita": {
      "official": "Repubblica di Uzbekistan",
      "common": "Uzbekistan"
    },
    "jpn": {
      "official": "ウズベキスタン共和国",
      "common": "ウズベキスタン"
    },
    "nld": {
      "official": "Republiek Oezbekistan",
      "common": "Oezbekistan"
    },
    "por": {
      "official": "República do Usbequistão",
      "common": "Uzbequistão"
    },
    "rus": {
      "official": "Республика Узбекистан",
      "common": "Узбекистан"
    },
    "spa": {
      "official": "República de Uzbekistán",
      "common": "Uzbekistán"
    },
    "fin": {
      "official": "Uzbekistanin tasavalta",
      "common": "Uzbekistan"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/uzbekistan",
  "currency": [
    "UZS"
  ],
  "callingCode": [
    "998"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "UZ",
    "ccn3": "860",
    "cca3": "UZB",
    "cioc": "UZB"
  }
}
},{}],240:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Vanuatu",
    "official": "Republic of Vanuatu",
    "native": {
      "bis": {
        "official": "Ripablik blong Vanuatu",
        "common": "Vanuatu"
      },
      "eng": {
        "official": "Republic of Vanuatu",
        "common": "Vanuatu"
      },
      "fra": {
        "official": "République de Vanuatu",
        "common": "Vanuatu"
      }
    }
  },
  "altSpellings": [
    "VU",
    "Republic of Vanuatu",
    "Ripablik blong Vanuatu",
    "République de Vanuatu"
  ],
  "area": 12189,
  "borders": [],
  "capital": "Port Vila",
  "demonym": "Ni-Vanuatu",
  "languages": {
    "bis": "Bislama",
    "eng": "English",
    "fra": "French"
  },
  "latlng": [
    -16,
    167
  ],
  "nativeName": "Vanuatu",
  "population": 264652,
  "region": "Oceania",
  "subregion": "Melanesia",
  "timezones": [
    "UTC+11:00"
  ],
  "tld": [
    ".vu"
  ],
  "translations": {
    "deu": {
      "official": "Vanuatu",
      "common": "Vanuatu"
    },
    "fra": {
      "official": "République de Vanuatu",
      "common": "Vanuatu"
    },
    "hrv": {
      "official": "Republika Vanuatu",
      "common": "Vanuatu"
    },
    "ita": {
      "official": "Repubblica di Vanuatu",
      "common": "Vanuatu"
    },
    "jpn": {
      "official": "バヌアツ共和国",
      "common": "バヌアツ"
    },
    "nld": {
      "official": "Republiek Vanuatu",
      "common": "Vanuatu"
    },
    "por": {
      "official": "República de Vanuatu",
      "common": "Vanuatu"
    },
    "rus": {
      "official": "Республика Вануату",
      "common": "Вануату"
    },
    "spa": {
      "official": "República de Vanuatu",
      "common": "Vanuatu"
    },
    "fin": {
      "official": "Vanuatun tasavalta",
      "common": "Vanuatu"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/vanuatu",
  "currency": [
    "VUV"
  ],
  "callingCode": [
    "678"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "VU",
    "ccn3": "548",
    "cca3": "VUT",
    "cioc": "VAN"
  }
}
},{}],241:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Vatican City",
    "official": "Vatican City State",
    "native": {
      "ita": {
        "official": "Stato della Città del Vaticano",
        "common": "Vaticano"
      },
      "lat": {
        "official": "Status Civitatis Vaticanæ",
        "common": "Vaticanæ"
      }
    }
  },
  "tld": [
    ".va"
  ],
  "currency": [
    "EUR"
  ],
  "callingCode": [
    "3906698",
    "379"
  ],
  "capital": "Vatican City",
  "altSpellings": [
    "VA",
    "Holy See (Vatican City State)",
    "Vatican City State",
    "Stato della Città del Vaticano"
  ],
  "region": "Europe",
  "subregion": "Southern Europe",
  "languages": {
    "ita": "Italian",
    "lat": "Latin"
  },
  "translations": {
    "deu": {
      "official": "Staat Vatikanstadt",
      "common": "Vatikanstadt"
    },
    "fra": {
      "official": "Cité du Vatican",
      "common": "Cité du Vatican"
    },
    "hrv": {
      "official": "Vatikan",
      "common": "Vatikan"
    },
    "ita": {
      "official": "Città del Vaticano",
      "common": "Città del Vaticano"
    },
    "jpn": {
      "official": "バチカン市国の状態",
      "common": "バチカン市国"
    },
    "nld": {
      "official": "Vaticaanstad",
      "common": "Vaticaanstad"
    },
    "por": {
      "official": "Cidade do Vaticano",
      "common": "Cidade do Vaticano"
    },
    "rus": {
      "official": "Город-государство Ватикан",
      "common": "Ватикан"
    },
    "spa": {
      "official": "Ciudad del Vaticano",
      "common": "Ciudad del Vaticano"
    },
    "fin": {
      "official": "Vatikaanin kaupunkivaltio",
      "common": "Vatikaani"
    }
  },
  "latlng": [
    41.9,
    12.45
  ],
  "demonym": "Italian",
  "landlocked": true,
  "borders": [
    "ITA"
  ],
  "area": 0.44,
  "codes": {
    "cca2": "VA",
    "ccn3": "336",
    "cca3": "VAT",
    "cioc": ""
  }
}
},{}],242:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Venezuela",
    "official": "Bolivarian Republic of Venezuela",
    "native": {
      "spa": {
        "official": "República Bolivariana de Venezuela",
        "common": "Venezuela"
      }
    }
  },
  "altSpellings": [
    "VE",
    "Bolivarian Republic of Venezuela",
    "Venezuela, Bolivarian Republic of",
    "República Bolivariana de Venezuela"
  ],
  "area": 916445,
  "borders": [
    "BRA",
    "COL",
    "GUY"
  ],
  "capital": "Caracas",
  "demonym": "Venezuelan",
  "languages": {
    "spa": "Spanish"
  },
  "latlng": [
    8,
    -66
  ],
  "nativeName": "Venezuela",
  "population": 30206307,
  "region": "Americas",
  "subregion": "South America",
  "timezones": [
    "UTC−04:30"
  ],
  "tld": [
    ".ve"
  ],
  "translations": {
    "deu": {
      "official": "Bolivarische Republik Venezuela",
      "common": "Venezuela"
    },
    "fra": {
      "official": "République bolivarienne du Venezuela",
      "common": "Venezuela"
    },
    "hrv": {
      "official": "BOLIVARIJANSKA Republika Venezuela",
      "common": "Venezuela"
    },
    "ita": {
      "official": "Repubblica Bolivariana del Venezuela",
      "common": "Venezuela"
    },
    "jpn": {
      "official": "ベネズエラ·ボリバル共和国",
      "common": "ベネズエラ・ボリバル共和国"
    },
    "nld": {
      "official": "Bolivariaanse Republiek Venezuela",
      "common": "Venezuela"
    },
    "por": {
      "official": "República Bolivariana da Venezuela",
      "common": "Venezuela"
    },
    "rus": {
      "official": "Боливарианская Республика Венесуэла",
      "common": "Венесуэла"
    },
    "spa": {
      "official": "República Bolivariana de Venezuela",
      "common": "Venezuela"
    },
    "fin": {
      "official": "Venezuelan bolivariaainen tasavalta",
      "common": "Venezuela"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/venezuela",
  "currency": [
    "VEF"
  ],
  "callingCode": [
    "58"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "VE",
    "ccn3": "862",
    "cca3": "VEN",
    "cioc": "VEN"
  }
}
},{}],243:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Vietnam",
    "official": "Socialist Republic of Vietnam",
    "native": {
      "vie": {
        "official": "Cộng hòa xã hội chủ nghĩa Việt Nam",
        "common": "Việt Nam"
      }
    }
  },
  "altSpellings": [
    "VN",
    "Socialist Republic of Vietnam",
    "Cộng hòa Xã hội chủ nghĩa Việt Nam",
    "Viet Nam"
  ],
  "area": 331212,
  "borders": [
    "KHM",
    "CHN",
    "LAO"
  ],
  "capital": "Hanoi",
  "demonym": "Vietnamese",
  "languages": {
    "vie": "Vietnamese"
  },
  "latlng": [
    16.16666666,
    107.83333333
  ],
  "nativeName": "Việt Nam",
  "population": 89708900,
  "region": "Asia",
  "subregion": "South-Eastern Asia",
  "timezones": [
    "UTC+07:00"
  ],
  "tld": [
    ".vn"
  ],
  "translations": {
    "deu": {
      "official": "Sozialistische Republik Vietnam",
      "common": "Vietnam"
    },
    "fra": {
      "official": "République socialiste du Viêt Nam",
      "common": "Viêt Nam"
    },
    "hrv": {
      "official": "Socijalistička Republika Vijetnam",
      "common": "Vijetnam"
    },
    "ita": {
      "official": "Repubblica socialista del Vietnam",
      "common": "Vietnam"
    },
    "jpn": {
      "official": "ベトナム社会主義共和国",
      "common": "ベトナム"
    },
    "nld": {
      "official": "Socialistische Republiek Vietnam",
      "common": "Vietnam"
    },
    "por": {
      "official": "República Socialista do Vietname",
      "common": "Vietname"
    },
    "rus": {
      "official": "Социалистическая Республика Вьетнам",
      "common": "Вьетнам"
    },
    "spa": {
      "official": "República Socialista de Vietnam",
      "common": "Vietnam"
    },
    "fin": {
      "official": "Vietnamin sosialistinen tasavalta",
      "common": "Vietnam"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/vietnam",
  "currency": [
    "VND"
  ],
  "callingCode": [
    "84"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "VN",
    "ccn3": "704",
    "cca3": "VNM",
    "cioc": "VIE"
  }
}
},{}],244:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Wallis and Futuna",
    "official": "Territory of the Wallis and Futuna Islands",
    "native": {
      "fra": {
        "official": "Territoire des îles Wallis et Futuna",
        "common": "Wallis et Futuna"
      }
    }
  },
  "altSpellings": [
    "WF",
    "Territory of the Wallis and Futuna Islands",
    "Territoire des îles Wallis et Futuna"
  ],
  "area": 142,
  "borders": [],
  "capital": "Mata-Utu",
  "demonym": "Wallis and Futuna Islander",
  "languages": {
    "fra": "French"
  },
  "latlng": [
    -13.3,
    -176.2
  ],
  "nativeName": "Wallis et Futuna",
  "population": 13135,
  "region": "Oceania",
  "subregion": "Polynesia",
  "timezones": null,
  "tld": [
    ".wf"
  ],
  "translations": {
    "deu": {
      "official": "Gebiet der Wallis und Futuna",
      "common": "Wallis und Futuna"
    },
    "fra": {
      "official": "Territoire des îles Wallis et Futuna",
      "common": "Wallis-et-Futuna"
    },
    "hrv": {
      "official": "Teritoriju Wallis i Futuna",
      "common": "Wallis i Fortuna"
    },
    "ita": {
      "official": "Territorio delle Isole Wallis e Futuna",
      "common": "Wallis e Futuna"
    },
    "jpn": {
      "official": "ウォリス·フツナ諸島の領土",
      "common": "ウォリス・フツナ"
    },
    "nld": {
      "official": "Grondgebied van de Wallis en Futuna",
      "common": "Wallis en Futuna"
    },
    "por": {
      "official": "Território das Ilhas Wallis e Futuna",
      "common": "Wallis e Futuna"
    },
    "rus": {
      "official": "Территория Уоллис и Футуна острова",
      "common": "Уоллис и Футуна"
    },
    "spa": {
      "official": "Territorio de las Islas Wallis y Futuna",
      "common": "Wallis y Futuna"
    },
    "fin": {
      "official": "Wallisin ja Futunan yhteisö",
      "common": "Wallis ja Futuna"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/wallis_and_futuna",
  "currency": [
    "XPF"
  ],
  "callingCode": [
    "681"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "WF",
    "ccn3": "876",
    "cca3": "WLF",
    "cioc": ""
  }
}
},{}],245:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Western Sahara",
    "official": "Sahrawi Arab Democratic Republic",
    "native": {
      "ber": {
        "official": "Sahrawi Arab Democratic Republic",
        "common": "Western Sahara"
      },
      "mey": {
        "official": "الجمهورية العربية الصحراوية الديمقراطية",
        "common": "الصحراء الغربية"
      },
      "spa": {
        "official": "República Árabe Saharaui Democrática",
        "common": "Sahara Occidental"
      }
    }
  },
  "altSpellings": [
    "EH",
    "Taneẓroft Tutrimt"
  ],
  "area": 266000,
  "borders": [
    "DZA",
    "MRT",
    "MAR"
  ],
  "capital": "El Aaiún",
  "demonym": "Sahrawi",
  "languages": {
    "ber": "Berber",
    "mey": "Hassaniya",
    "spa": "Spanish"
  },
  "latlng": [
    24.5,
    -13
  ],
  "nativeName": "الصحراء الغربية",
  "population": 586000,
  "region": "Africa",
  "subregion": "Northern Africa",
  "timezones": null,
  "tld": [
    ".eh"
  ],
  "translations": {
    "deu": {
      "official": "Demokratische Arabische Republik Sahara",
      "common": "Westsahara"
    },
    "fra": {
      "official": "République arabe sahraouie démocratique",
      "common": "Sahara Occidental"
    },
    "hrv": {
      "official": "Sahrawi Arab Demokratska Republika",
      "common": "Zapadna Sahara"
    },
    "ita": {
      "official": "Repubblica Araba Saharawi Democratica",
      "common": "Sahara Occidentale"
    },
    "jpn": {
      "official": "サハラアラブ民主共和国",
      "common": "西サハラ"
    },
    "nld": {
      "official": "Sahrawi Arabische Democratische Republiek",
      "common": "Westelijke Sahara"
    },
    "por": {
      "official": "República Árabe Saharaui Democrática",
      "common": "Saara Ocidental"
    },
    "rus": {
      "official": "Sahrawi Арабская Демократическая Республика",
      "common": "Западная Сахара"
    },
    "spa": {
      "official": "República Árabe Saharaui Democrática",
      "common": "Sahara Occidental"
    },
    "fin": {
      "official": "Länsi-Sahara",
      "common": "Länsi-Sahara"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/western_sahara",
  "currency": [
    "MAD",
    "DZD",
    "MRO"
  ],
  "callingCode": [
    "212"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "EH",
    "ccn3": "732",
    "cca3": "ESH",
    "cioc": ""
  }
}
},{}],246:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Yemen",
    "official": "Republic of Yemen",
    "native": {
      "ara": {
        "official": "الجمهورية اليمنية",
        "common": "اليَمَن"
      }
    }
  },
  "altSpellings": [
    "YE",
    "Yemeni Republic",
    "al-Jumhūriyyah al-Yamaniyyah"
  ],
  "area": 527968,
  "borders": [
    "OMN",
    "SAU"
  ],
  "capital": "Sana'a",
  "demonym": "Yemeni",
  "languages": {
    "ara": "Arabic"
  },
  "latlng": [
    15,
    48
  ],
  "nativeName": "اليَمَن",
  "population": 25956000,
  "region": "Asia",
  "subregion": "Western Asia",
  "timezones": [
    "UTC+03:00"
  ],
  "tld": [
    ".ye"
  ],
  "translations": {
    "deu": {
      "official": "Republik Jemen",
      "common": "Jemen"
    },
    "fra": {
      "official": "République du Yémen",
      "common": "Yémen"
    },
    "hrv": {
      "official": "Republika Jemen",
      "common": "Jemen"
    },
    "ita": {
      "official": "Repubblica dello Yemen",
      "common": "Yemen"
    },
    "jpn": {
      "official": "イエメン共和国",
      "common": "イエメン"
    },
    "nld": {
      "official": "Republiek Jemen",
      "common": "Jemen"
    },
    "por": {
      "official": "República do Iêmen",
      "common": "Iémen"
    },
    "rus": {
      "official": "Йеменская Республика",
      "common": "Йемен"
    },
    "spa": {
      "official": "República de Yemen",
      "common": "Yemen"
    },
    "fin": {
      "official": "Jemenin tasavalta",
      "common": "Jemen"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/yemen",
  "currency": [
    "YER"
  ],
  "callingCode": [
    "967"
  ],
  "landlocked": false,
  "codes": {
    "cca2": "YE",
    "ccn3": "887",
    "cca3": "YEM",
    "cioc": "YEM"
  }
}
},{}],247:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Zambia",
    "official": "Republic of Zambia",
    "native": {
      "eng": {
        "official": "Republic of Zambia",
        "common": "Zambia"
      }
    }
  },
  "altSpellings": [
    "ZM",
    "Republic of Zambia"
  ],
  "area": 752612,
  "borders": [
    "AGO",
    "BWA",
    "COD",
    "MWI",
    "MOZ",
    "NAM",
    "TZA",
    "ZWE"
  ],
  "capital": "Lusaka",
  "demonym": "Zambian",
  "languages": {
    "eng": "English"
  },
  "latlng": [
    -15,
    30
  ],
  "nativeName": "Zambia",
  "population": 15023315,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".zm"
  ],
  "translations": {
    "deu": {
      "official": "Republik Sambia",
      "common": "Sambia"
    },
    "fra": {
      "official": "République de Zambie",
      "common": "Zambie"
    },
    "hrv": {
      "official": "Republika Zambija",
      "common": "Zambija"
    },
    "ita": {
      "official": "Repubblica di Zambia",
      "common": "Zambia"
    },
    "jpn": {
      "official": "ザンビア共和国",
      "common": "ザンビア"
    },
    "nld": {
      "official": "Republiek Zambia",
      "common": "Zambia"
    },
    "por": {
      "official": "República da Zâmbia",
      "common": "Zâmbia"
    },
    "rus": {
      "official": "Республика Замбия",
      "common": "Замбия"
    },
    "spa": {
      "official": "República de Zambia",
      "common": "Zambia"
    },
    "fin": {
      "official": "Sambian tasavalta",
      "common": "Sambia"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/zambia",
  "currency": [
    "ZMW"
  ],
  "callingCode": [
    "260"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "ZM",
    "ccn3": "894",
    "cca3": "ZMB",
    "cioc": "ZAM"
  }
}
},{}],248:[function(require,module,exports){
module.exports={
  "name": {
    "common": "Zimbabwe",
    "official": "Republic of Zimbabwe",
    "native": {
      "bwg": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "eng": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "kck": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "khi": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "ndc": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "nde": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "nya": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "sna": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "sot": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "toi": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "tsn": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "tso": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "ven": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "xho": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      },
      "zib": {
        "official": "Republic of Zimbabwe",
        "common": "Zimbabwe"
      }
    }
  },
  "altSpellings": [
    "ZW",
    "Republic of Zimbabwe"
  ],
  "area": 390757,
  "borders": [
    "BWA",
    "MOZ",
    "ZAF",
    "ZMB"
  ],
  "capital": "Harare",
  "demonym": "Zimbabwean",
  "languages": {
    "bwg": "Chibarwe",
    "eng": "English",
    "kck": "Kalanga",
    "khi": "Khoisan",
    "ndc": "Ndau",
    "nde": "Northern Ndebele",
    "nya": "Chewa",
    "sna": "Shona",
    "sot": "Sotho",
    "toi": "Tonga",
    "tsn": "Tswana",
    "tso": "Tsonga",
    "ven": "Venda",
    "xho": "Xhosa",
    "zib": "Zimbabwean Sign Language"
  },
  "latlng": [
    -20,
    30
  ],
  "nativeName": "Zimbabwe",
  "population": 13061239,
  "region": "Africa",
  "subregion": "Eastern Africa",
  "timezones": [
    "UTC+02:00"
  ],
  "tld": [
    ".zw"
  ],
  "translations": {
    "deu": {
      "official": "Republik Simbabwe",
      "common": "Simbabwe"
    },
    "fra": {
      "official": "République du Zimbabwe",
      "common": "Zimbabwe"
    },
    "hrv": {
      "official": "Republika Zimbabve",
      "common": "Zimbabve"
    },
    "ita": {
      "official": "Repubblica dello Zimbabwe",
      "common": "Zimbabwe"
    },
    "jpn": {
      "official": "ジンバブエ共和国",
      "common": "ジンバブエ"
    },
    "nld": {
      "official": "Republiek Zimbabwe",
      "common": "Zimbabwe"
    },
    "por": {
      "official": "República do Zimbabwe",
      "common": "Zimbabwe"
    },
    "rus": {
      "official": "Республика Зимбабве",
      "common": "Зимбабве"
    },
    "spa": {
      "official": "República de Zimbabue",
      "common": "Zimbabue"
    },
    "fin": {
      "official": "Zimbabwen tasavalta",
      "common": "Zimbabwe"
    }
  },
  "wiki": "http://en.wikipedia.org/wiki/zimbabwe",
  "currency": [
    "ZWL"
  ],
  "callingCode": [
    "263"
  ],
  "landlocked": true,
  "codes": {
    "cca2": "ZW",
    "ccn3": "716",
    "cca3": "ZWE",
    "cioc": "ZIM"
  }
}
},{}],249:[function(require,module,exports){
// Copyright (c) 2015, Trent Oswald <trentoswald@therebelrobot.com
//
// Permission to use, copy, modify, and/or distribute this software for any purpose
// with or without fee is hereby granted, provided that the above copyright notice
// and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT,
// OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
// ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

module.exports = require('./lib/countryjs')

},{"./lib/countryjs":250}],250:[function(require,module,exports){
'use strict'

/* Debugging utilities */
const debug = require('debug')
const fnDebug = debug('function')
const blockDebug = debug('block')
const miscDebug = debug('misc')

/* External dependencies */
const _ = require('lodash')


/* Internal dependencies */
const _countryList = _.values(({"..":({"data":({"_land_islands":require("../data/_land_islands.json"),"afghanistan":require("../data/afghanistan.json"),"albania":require("../data/albania.json"),"algeria":require("../data/algeria.json"),"american_samoa":require("../data/american_samoa.json"),"andorra":require("../data/andorra.json"),"angola":require("../data/angola.json"),"anguilla":require("../data/anguilla.json"),"antarctica":require("../data/antarctica.json"),"antigua_and_barbuda":require("../data/antigua_and_barbuda.json"),"argentina":require("../data/argentina.json"),"armenia":require("../data/armenia.json"),"aruba":require("../data/aruba.json"),"australia":require("../data/australia.json"),"austria":require("../data/austria.json"),"azerbaijan":require("../data/azerbaijan.json"),"bahamas":require("../data/bahamas.json"),"bahrain":require("../data/bahrain.json"),"bangladesh":require("../data/bangladesh.json"),"barbados":require("../data/barbados.json"),"belarus":require("../data/belarus.json"),"belgium":require("../data/belgium.json"),"belize":require("../data/belize.json"),"benin":require("../data/benin.json"),"bermuda":require("../data/bermuda.json"),"bhutan":require("../data/bhutan.json"),"bolivia":require("../data/bolivia.json"),"bosnia_and_herzegovina":require("../data/bosnia_and_herzegovina.json"),"botswana":require("../data/botswana.json"),"bouvet_island":require("../data/bouvet_island.json"),"brazil":require("../data/brazil.json"),"british_indian_ocean_territory":require("../data/british_indian_ocean_territory.json"),"british_virgin_islands":require("../data/british_virgin_islands.json"),"brunei":require("../data/brunei.json"),"bulgaria":require("../data/bulgaria.json"),"burkina_faso":require("../data/burkina_faso.json"),"burundi":require("../data/burundi.json"),"cambodia":require("../data/cambodia.json"),"cameroon":require("../data/cameroon.json"),"canada":require("../data/canada.json"),"cape_verde":require("../data/cape_verde.json"),"cayman_islands":require("../data/cayman_islands.json"),"central_african_republic":require("../data/central_african_republic.json"),"chad":require("../data/chad.json"),"chile":require("../data/chile.json"),"china":require("../data/china.json"),"christmas_island":require("../data/christmas_island.json"),"cocos_keeling_islands":require("../data/cocos_keeling_islands.json"),"colombia":require("../data/colombia.json"),"comoros":require("../data/comoros.json"),"cook_islands":require("../data/cook_islands.json"),"costa_rica":require("../data/costa_rica.json"),"croatia":require("../data/croatia.json"),"cuba":require("../data/cuba.json"),"cura_ao":require("../data/cura_ao.json"),"cyprus":require("../data/cyprus.json"),"czech_republic":require("../data/czech_republic.json"),"denmark":require("../data/denmark.json"),"djibouti":require("../data/djibouti.json"),"dominica":require("../data/dominica.json"),"dominican_republic":require("../data/dominican_republic.json"),"dr_congo":require("../data/dr_congo.json"),"ecuador":require("../data/ecuador.json"),"egypt":require("../data/egypt.json"),"el_salvador":require("../data/el_salvador.json"),"equatorial_guinea":require("../data/equatorial_guinea.json"),"eritrea":require("../data/eritrea.json"),"estonia":require("../data/estonia.json"),"ethiopia":require("../data/ethiopia.json"),"falkland_islands":require("../data/falkland_islands.json"),"faroe_islands":require("../data/faroe_islands.json"),"fiji":require("../data/fiji.json"),"finland":require("../data/finland.json"),"france":require("../data/france.json"),"french_guiana":require("../data/french_guiana.json"),"french_polynesia":require("../data/french_polynesia.json"),"french_southern_and_antarctic_lands":require("../data/french_southern_and_antarctic_lands.json"),"gabon":require("../data/gabon.json"),"gambia":require("../data/gambia.json"),"georgia":require("../data/georgia.json"),"germany":require("../data/germany.json"),"ghana":require("../data/ghana.json"),"gibraltar":require("../data/gibraltar.json"),"greece":require("../data/greece.json"),"greenland":require("../data/greenland.json"),"grenada":require("../data/grenada.json"),"guadeloupe":require("../data/guadeloupe.json"),"guam":require("../data/guam.json"),"guatemala":require("../data/guatemala.json"),"guernsey":require("../data/guernsey.json"),"guinea":require("../data/guinea.json"),"guinea_bissau":require("../data/guinea_bissau.json"),"guyana":require("../data/guyana.json"),"haiti":require("../data/haiti.json"),"heard_island_and_mcdonald_islands":require("../data/heard_island_and_mcdonald_islands.json"),"honduras":require("../data/honduras.json"),"hong_kong":require("../data/hong_kong.json"),"hungary":require("../data/hungary.json"),"iceland":require("../data/iceland.json"),"india":require("../data/india.json"),"indonesia":require("../data/indonesia.json"),"iran":require("../data/iran.json"),"iraq":require("../data/iraq.json"),"ireland":require("../data/ireland.json"),"isle_of_man":require("../data/isle_of_man.json"),"israel":require("../data/israel.json"),"italy":require("../data/italy.json"),"ivory_coast":require("../data/ivory_coast.json"),"jamaica":require("../data/jamaica.json"),"japan":require("../data/japan.json"),"jersey":require("../data/jersey.json"),"jordan":require("../data/jordan.json"),"kazakhstan":require("../data/kazakhstan.json"),"kenya":require("../data/kenya.json"),"kiribati":require("../data/kiribati.json"),"kosovo":require("../data/kosovo.json"),"kuwait":require("../data/kuwait.json"),"kyrgyzstan":require("../data/kyrgyzstan.json"),"laos":require("../data/laos.json"),"latvia":require("../data/latvia.json"),"lebanon":require("../data/lebanon.json"),"lesotho":require("../data/lesotho.json"),"liberia":require("../data/liberia.json"),"libya":require("../data/libya.json"),"liechtenstein":require("../data/liechtenstein.json"),"lithuania":require("../data/lithuania.json"),"luxembourg":require("../data/luxembourg.json"),"macau":require("../data/macau.json"),"macedonia":require("../data/macedonia.json"),"madagascar":require("../data/madagascar.json"),"malawi":require("../data/malawi.json"),"malaysia":require("../data/malaysia.json"),"maldives":require("../data/maldives.json"),"mali":require("../data/mali.json"),"malta":require("../data/malta.json"),"marshall_islands":require("../data/marshall_islands.json"),"martinique":require("../data/martinique.json"),"mauritania":require("../data/mauritania.json"),"mauritius":require("../data/mauritius.json"),"mayotte":require("../data/mayotte.json"),"mexico":require("../data/mexico.json"),"micronesia":require("../data/micronesia.json"),"moldova":require("../data/moldova.json"),"monaco":require("../data/monaco.json"),"mongolia":require("../data/mongolia.json"),"montenegro":require("../data/montenegro.json"),"montserrat":require("../data/montserrat.json"),"morocco":require("../data/morocco.json"),"mozambique":require("../data/mozambique.json"),"myanmar":require("../data/myanmar.json"),"namibia":require("../data/namibia.json"),"nauru":require("../data/nauru.json"),"nepal":require("../data/nepal.json"),"netherlands":require("../data/netherlands.json"),"new_caledonia":require("../data/new_caledonia.json"),"new_zealand":require("../data/new_zealand.json"),"nicaragua":require("../data/nicaragua.json"),"niger":require("../data/niger.json"),"nigeria":require("../data/nigeria.json"),"niue":require("../data/niue.json"),"norfolk_island":require("../data/norfolk_island.json"),"north_korea":require("../data/north_korea.json"),"northern_mariana_islands":require("../data/northern_mariana_islands.json"),"norway":require("../data/norway.json"),"oman":require("../data/oman.json"),"pakistan":require("../data/pakistan.json"),"palau":require("../data/palau.json"),"palestine":require("../data/palestine.json"),"panama":require("../data/panama.json"),"papua_new_guinea":require("../data/papua_new_guinea.json"),"paraguay":require("../data/paraguay.json"),"peru":require("../data/peru.json"),"philippines":require("../data/philippines.json"),"pitcairn_islands":require("../data/pitcairn_islands.json"),"poland":require("../data/poland.json"),"portugal":require("../data/portugal.json"),"puerto_rico":require("../data/puerto_rico.json"),"qatar":require("../data/qatar.json"),"r_union":require("../data/r_union.json"),"republic_of_the_congo":require("../data/republic_of_the_congo.json"),"romania":require("../data/romania.json"),"russia":require("../data/russia.json"),"rwanda":require("../data/rwanda.json"),"s_o_tom_and_pr_ncipe":require("../data/s_o_tom_and_pr_ncipe.json"),"saint_barth_lemy":require("../data/saint_barth_lemy.json"),"saint_kitts_and_nevis":require("../data/saint_kitts_and_nevis.json"),"saint_lucia":require("../data/saint_lucia.json"),"saint_martin":require("../data/saint_martin.json"),"saint_pierre_and_miquelon":require("../data/saint_pierre_and_miquelon.json"),"saint_vincent_and_the_grenadines":require("../data/saint_vincent_and_the_grenadines.json"),"samoa":require("../data/samoa.json"),"san_marino":require("../data/san_marino.json"),"saudi_arabia":require("../data/saudi_arabia.json"),"senegal":require("../data/senegal.json"),"serbia":require("../data/serbia.json"),"seychelles":require("../data/seychelles.json"),"sierra_leone":require("../data/sierra_leone.json"),"singapore":require("../data/singapore.json"),"sint_maarten":require("../data/sint_maarten.json"),"slovakia":require("../data/slovakia.json"),"slovenia":require("../data/slovenia.json"),"solomon_islands":require("../data/solomon_islands.json"),"somalia":require("../data/somalia.json"),"south_africa":require("../data/south_africa.json"),"south_georgia":require("../data/south_georgia.json"),"south_korea":require("../data/south_korea.json"),"south_sudan":require("../data/south_sudan.json"),"spain":require("../data/spain.json"),"sri_lanka":require("../data/sri_lanka.json"),"sudan":require("../data/sudan.json"),"suriname":require("../data/suriname.json"),"svalbard_and_jan_mayen":require("../data/svalbard_and_jan_mayen.json"),"swaziland":require("../data/swaziland.json"),"sweden":require("../data/sweden.json"),"switzerland":require("../data/switzerland.json"),"syria":require("../data/syria.json"),"taiwan":require("../data/taiwan.json"),"tajikistan":require("../data/tajikistan.json"),"tanzania":require("../data/tanzania.json"),"thailand":require("../data/thailand.json"),"timor_leste":require("../data/timor_leste.json"),"togo":require("../data/togo.json"),"tokelau":require("../data/tokelau.json"),"tonga":require("../data/tonga.json"),"trinidad_and_tobago":require("../data/trinidad_and_tobago.json"),"tunisia":require("../data/tunisia.json"),"turkey":require("../data/turkey.json"),"turkmenistan":require("../data/turkmenistan.json"),"turks_and_caicos_islands":require("../data/turks_and_caicos_islands.json"),"tuvalu":require("../data/tuvalu.json"),"uganda":require("../data/uganda.json"),"ukraine":require("../data/ukraine.json"),"united_arab_emirates":require("../data/united_arab_emirates.json"),"united_kingdom":require("../data/united_kingdom.json"),"united_states":require("../data/united_states.json"),"united_states_minor_outlying_islands":require("../data/united_states_minor_outlying_islands.json"),"united_states_virgin_islands":require("../data/united_states_virgin_islands.json"),"uruguay":require("../data/uruguay.json"),"uzbekistan":require("../data/uzbekistan.json"),"vanuatu":require("../data/vanuatu.json"),"vatican_city":require("../data/vatican_city.json"),"venezuela":require("../data/venezuela.json"),"vietnam":require("../data/vietnam.json"),"wallis_and_futuna":require("../data/wallis_and_futuna.json"),"western_sahara":require("../data/western_sahara.json"),"yemen":require("../data/yemen.json"),"zambia":require("../data/zambia.json"),"zimbabwe":require("../data/zimbabwe.json")})})})['..'].data)

/* Internal functions */
const normalizeName = function (name) {
  fnDebug('[i] normalizeName', name)
  return _.deburr(name)
    .toLowerCase()
    .replace(/\-/g, ' ')
    .replace(/(\.|\b(the|and|of|de|des|du|di|del|y|da|und|die) \b)/g, '')
    .trim()
}
const findIndex = _.transform(_countryList, function (index, country, key) {
  fnDebug('[i] findIndex transform', index, country, key)

  let addToIndex = (name) => {
    fnDebug('[i] findIndex addToIndex', name)

    if (name) {
      blockDebug('"name" is present', name)

      index[normalizeName(name)] = key
    }
    blockDebug('"name" is not present')
  }
  addToIndex(country.name.common)
  addToIndex(country.name.official)
  _.forEach(_.map(country.name.native, 'official'), addToIndex)
  _.forEach(_.map(country.name.native, 'common'), addToIndex)
  _.forEach(country.altSpellings, addToIndex)
  _.forEach(_.map(country.translations, 'official'), addToIndex)
  _.forEach(_.map(country.translations, 'common'), addToIndex)
})

/* Exposed functions */
const Country = function () {
  fnDebug('Country')

  let _returnCountry = (country, type) => {
    fnDebug('[i] _returnCountry', country, type)

    if (type === 'name') {
      blockDebug('type is "name"')
      let normalizedName = normalizeName(country)
      let key = findIndex[normalizedName]

      // this is kind of hacky, need to figure out multiple key names
      return [_countryList[key]]
    } else if (type === 'cca3') {
      blockDebug('type is "cca3"')

      return _.filter(_countryList, (thiscountry) => {
        return thiscountry.codes.cca3 === country
      })
    } else if (type === 'ccn3') {
      blockDebug('type is "ccn3"')

      return _.filter(_countryList, (thiscountry) => {
        return thiscountry.codes.ccn3 === country
      })
    } else if (type === 'cioc') {
      blockDebug('type is "cioc"')

      return _.filter(_countryList, (thiscountry) => {
        return thiscountry.codes.cioc === country
      })
    } else {
      blockDebug('type isn\'nt "name", "cca3", "cioc", or "ccn3", defaulting to "cca2"')

      return _.filter(_countryList, (thiscountry) => {
        return thiscountry.codes.cca2 === country
      })
    }
  }
  this.all = () => {
    fnDebug('all')

    return _countryList
  }
  let methods = {
    info: null,
    name: 'name',
    altSpellings: 'altSpellings',
    area: 'area',
    borders: 'borders',
    capital: 'capital',
    demonym: 'demonym',
    flag: 'flag',
    geoJSON: 'geoJSON',
    languages: 'languages',
    latlng: 'latlng',
    nativeName: 'nativeName',
    population: 'population',
    states: 'provinces',
    provinces: 'provinces',
    region: 'region',
    subregion: 'subregion',
    timezones: 'timezones',
    tld: 'tld',
    translations: 'translations',
    wiki: 'wiki',
    currency: 'currency',
    callingCode: 'callingCode',
    landlocked: 'landlocked',
    codes: 'codes'
  }
  _.forEach(methods, (property, method) => {
    fnDebug('_.forEach', property, method)

    this[method] = (country, type) => {
      fnDebug(method, 'property:', property, country, type)

      let _returnData = _returnCountry(country, type)
      if (_returnData.length && _returnData[0]) {
        blockDebug('"_returnData" is present', _returnData)

        if (property) {
          blockDebug('"property" is present', property)

          return _returnData[property]
        }
        blockDebug('"property" is not present')

        return _returnData
      }
      blockDebug('"_returnData" is not present')

    }
  })
  return this
}
module.exports = new Country()

},{"../data/_land_islands.json":1,"../data/afghanistan.json":2,"../data/albania.json":3,"../data/algeria.json":4,"../data/american_samoa.json":5,"../data/andorra.json":6,"../data/angola.json":7,"../data/anguilla.json":8,"../data/antarctica.json":9,"../data/antigua_and_barbuda.json":10,"../data/argentina.json":11,"../data/armenia.json":12,"../data/aruba.json":13,"../data/australia.json":14,"../data/austria.json":15,"../data/azerbaijan.json":16,"../data/bahamas.json":17,"../data/bahrain.json":18,"../data/bangladesh.json":19,"../data/barbados.json":20,"../data/belarus.json":21,"../data/belgium.json":22,"../data/belize.json":23,"../data/benin.json":24,"../data/bermuda.json":25,"../data/bhutan.json":26,"../data/bolivia.json":27,"../data/bosnia_and_herzegovina.json":28,"../data/botswana.json":29,"../data/bouvet_island.json":30,"../data/brazil.json":31,"../data/british_indian_ocean_territory.json":32,"../data/british_virgin_islands.json":33,"../data/brunei.json":34,"../data/bulgaria.json":35,"../data/burkina_faso.json":36,"../data/burundi.json":37,"../data/cambodia.json":38,"../data/cameroon.json":39,"../data/canada.json":40,"../data/cape_verde.json":41,"../data/cayman_islands.json":42,"../data/central_african_republic.json":43,"../data/chad.json":44,"../data/chile.json":45,"../data/china.json":46,"../data/christmas_island.json":47,"../data/cocos_keeling_islands.json":48,"../data/colombia.json":49,"../data/comoros.json":50,"../data/cook_islands.json":51,"../data/costa_rica.json":52,"../data/croatia.json":53,"../data/cuba.json":54,"../data/cura_ao.json":55,"../data/cyprus.json":56,"../data/czech_republic.json":57,"../data/denmark.json":58,"../data/djibouti.json":59,"../data/dominica.json":60,"../data/dominican_republic.json":61,"../data/dr_congo.json":62,"../data/ecuador.json":63,"../data/egypt.json":64,"../data/el_salvador.json":65,"../data/equatorial_guinea.json":66,"../data/eritrea.json":67,"../data/estonia.json":68,"../data/ethiopia.json":69,"../data/falkland_islands.json":70,"../data/faroe_islands.json":71,"../data/fiji.json":72,"../data/finland.json":73,"../data/france.json":74,"../data/french_guiana.json":75,"../data/french_polynesia.json":76,"../data/french_southern_and_antarctic_lands.json":77,"../data/gabon.json":78,"../data/gambia.json":79,"../data/georgia.json":80,"../data/germany.json":81,"../data/ghana.json":82,"../data/gibraltar.json":83,"../data/greece.json":84,"../data/greenland.json":85,"../data/grenada.json":86,"../data/guadeloupe.json":87,"../data/guam.json":88,"../data/guatemala.json":89,"../data/guernsey.json":90,"../data/guinea.json":91,"../data/guinea_bissau.json":92,"../data/guyana.json":93,"../data/haiti.json":94,"../data/heard_island_and_mcdonald_islands.json":95,"../data/honduras.json":96,"../data/hong_kong.json":97,"../data/hungary.json":98,"../data/iceland.json":99,"../data/india.json":100,"../data/indonesia.json":101,"../data/iran.json":102,"../data/iraq.json":103,"../data/ireland.json":104,"../data/isle_of_man.json":105,"../data/israel.json":106,"../data/italy.json":107,"../data/ivory_coast.json":108,"../data/jamaica.json":109,"../data/japan.json":110,"../data/jersey.json":111,"../data/jordan.json":112,"../data/kazakhstan.json":113,"../data/kenya.json":114,"../data/kiribati.json":115,"../data/kosovo.json":116,"../data/kuwait.json":117,"../data/kyrgyzstan.json":118,"../data/laos.json":119,"../data/latvia.json":120,"../data/lebanon.json":121,"../data/lesotho.json":122,"../data/liberia.json":123,"../data/libya.json":124,"../data/liechtenstein.json":125,"../data/lithuania.json":126,"../data/luxembourg.json":127,"../data/macau.json":128,"../data/macedonia.json":129,"../data/madagascar.json":130,"../data/malawi.json":131,"../data/malaysia.json":132,"../data/maldives.json":133,"../data/mali.json":134,"../data/malta.json":135,"../data/marshall_islands.json":136,"../data/martinique.json":137,"../data/mauritania.json":138,"../data/mauritius.json":139,"../data/mayotte.json":140,"../data/mexico.json":141,"../data/micronesia.json":142,"../data/moldova.json":143,"../data/monaco.json":144,"../data/mongolia.json":145,"../data/montenegro.json":146,"../data/montserrat.json":147,"../data/morocco.json":148,"../data/mozambique.json":149,"../data/myanmar.json":150,"../data/namibia.json":151,"../data/nauru.json":152,"../data/nepal.json":153,"../data/netherlands.json":154,"../data/new_caledonia.json":155,"../data/new_zealand.json":156,"../data/nicaragua.json":157,"../data/niger.json":158,"../data/nigeria.json":159,"../data/niue.json":160,"../data/norfolk_island.json":161,"../data/north_korea.json":162,"../data/northern_mariana_islands.json":163,"../data/norway.json":164,"../data/oman.json":165,"../data/pakistan.json":166,"../data/palau.json":167,"../data/palestine.json":168,"../data/panama.json":169,"../data/papua_new_guinea.json":170,"../data/paraguay.json":171,"../data/peru.json":172,"../data/philippines.json":173,"../data/pitcairn_islands.json":174,"../data/poland.json":175,"../data/portugal.json":176,"../data/puerto_rico.json":177,"../data/qatar.json":178,"../data/r_union.json":179,"../data/republic_of_the_congo.json":180,"../data/romania.json":181,"../data/russia.json":182,"../data/rwanda.json":183,"../data/s_o_tom_and_pr_ncipe.json":184,"../data/saint_barth_lemy.json":185,"../data/saint_kitts_and_nevis.json":186,"../data/saint_lucia.json":187,"../data/saint_martin.json":188,"../data/saint_pierre_and_miquelon.json":189,"../data/saint_vincent_and_the_grenadines.json":190,"../data/samoa.json":191,"../data/san_marino.json":192,"../data/saudi_arabia.json":193,"../data/senegal.json":194,"../data/serbia.json":195,"../data/seychelles.json":196,"../data/sierra_leone.json":197,"../data/singapore.json":198,"../data/sint_maarten.json":199,"../data/slovakia.json":200,"../data/slovenia.json":201,"../data/solomon_islands.json":202,"../data/somalia.json":203,"../data/south_africa.json":204,"../data/south_georgia.json":205,"../data/south_korea.json":206,"../data/south_sudan.json":207,"../data/spain.json":208,"../data/sri_lanka.json":209,"../data/sudan.json":210,"../data/suriname.json":211,"../data/svalbard_and_jan_mayen.json":212,"../data/swaziland.json":213,"../data/sweden.json":214,"../data/switzerland.json":215,"../data/syria.json":216,"../data/taiwan.json":217,"../data/tajikistan.json":218,"../data/tanzania.json":219,"../data/thailand.json":220,"../data/timor_leste.json":221,"../data/togo.json":222,"../data/tokelau.json":223,"../data/tonga.json":224,"../data/trinidad_and_tobago.json":225,"../data/tunisia.json":226,"../data/turkey.json":227,"../data/turkmenistan.json":228,"../data/turks_and_caicos_islands.json":229,"../data/tuvalu.json":230,"../data/uganda.json":231,"../data/ukraine.json":232,"../data/united_arab_emirates.json":233,"../data/united_kingdom.json":234,"../data/united_states.json":235,"../data/united_states_minor_outlying_islands.json":236,"../data/united_states_virgin_islands.json":237,"../data/uruguay.json":238,"../data/uzbekistan.json":239,"../data/vanuatu.json":240,"../data/vatican_city.json":241,"../data/venezuela.json":242,"../data/vietnam.json":243,"../data/wallis_and_futuna.json":244,"../data/western_sahara.json":245,"../data/yemen.json":246,"../data/zambia.json":247,"../data/zimbabwe.json":248,"debug":251,"lodash":253}],251:[function(require,module,exports){

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  return ('WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  return JSON.stringify(v);
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}
  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}

},{"./debug":252}],252:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = Array.prototype.slice.call(arguments);

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    if ('function' === typeof exports.formatArgs) {
      args = exports.formatArgs.apply(self, args);
    }
    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":254}],253:[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 4.6.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash -d -o ./foo/lodash.js`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.6.1';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256,
      FLIP_FLAG = 512;

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

  /** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0x/i;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
      rsComboSymbolsRange = '\\u20d0-\\u20f0',
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsQuoteRange = '\\u2018\\u2019\\u201c\\u201d',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

  /** Used to match non-compound words composed of alphanumeric characters. */
  var reBasicWord = /[a-zA-Z0-9]+/g;

  /** Used to match complex or compound words. */
  var reComplexWord = RegExp([
    rsUpper + '?' + rsLower + '+(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsUpperMisc + '+(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
    rsUpper + '?' + rsLowerMisc + '+',
    rsUpper + '+',
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasComplexWord = /[a-z][A-Z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_',
    'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[mapTag] = cloneableTags[numberTag] =
  cloneableTags[objectTag] = cloneableTags[regexpTag] =
  cloneableTags[setTag] = cloneableTags[stringTag] =
  cloneableTags[symbolTag] = cloneableTags[uint8Tag] =
  cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] =
  cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `exports`. */
  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
    ? exports
    : undefined;

  /** Detect free variable `module`. */
  var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
    ? module
    : undefined;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = (freeModule && freeModule.exports === freeExports)
    ? freeExports
    : undefined;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

  /** Detect free variable `self`. */
  var freeSelf = checkGlobal(objectTypes[typeof self] && self);

  /** Detect free variable `window`. */
  var freeWindow = checkGlobal(objectTypes[typeof window] && window);

  /** Detect `this` as the global object. */
  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal ||
    ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
      freeSelf || thisGlobal || Function('return this')();

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `Map#set` because it doesn't return the map instance in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {...*} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    var length = args.length;
    switch (length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * Creates a new array concatenating `array` with `other`.
   *
   * @private
   * @param {Array} array The first array to concatenate.
   * @param {Array} other The second array to concatenate.
   * @returns {Array} Returns the new concatenated array.
   */
  function arrayConcat(array, other) {
    var index = -1,
        length = array.length,
        othIndex = -1,
        othLength = other.length,
        result = Array(length + othLength);

    while (++index < length) {
      result[index] = array[index];
    }
    while (++othIndex < othLength) {
      result[index++] = other[othIndex];
    }
    return result;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    return !!array.length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * The base implementation of methods like `_.max` and `_.min` which accepts a
   * `comparator` to determine the extremum value.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The iteratee invoked per iteration.
   * @param {Function} comparator The comparator used to compare values.
   * @returns {*} Returns the extremum value.
   */
  function baseExtremum(array, iteratee, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      var value = array[index],
          current = iteratee(value);

      if (current != null && (computed === undefined
            ? current === current
            : comparator(current, computed)
          )) {
        var computed = current,
            result = value;
      }
    }
    return result;
  }

  /**
   * The base implementation of methods like `_.find` and `_.findKey`, without
   * support for iteratee shorthands, which iterates over `collection` using
   * `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @param {boolean} [retKey] Specify returning the key of the found element instead of the element itself.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFind(collection, predicate, eachFunc, retKey) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = retKey ? key : value;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` without support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the new array of key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing wrapper metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Checks if `value` is a global object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {null|Object} Returns `value` if it's a global object, else `null`.
   */
  function checkGlobal(value) {
    return (value && value.Object === Object) ? value : null;
  }

  /**
   * Compares values to sort them in ascending order.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function compareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * Used by `_.orderBy` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
   * specify an order of "desc" for descending or "asc" for ascending sort order
   * of corresponding values.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]|string[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = compareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * (order == 'desc' ? -1 : 1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        result++;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is a host object in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
   */
  function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return value > -1 && value % 1 == 0 && value < length;
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to an array.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the converted array.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the converted array.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    if (!(string && reHasComplexSymbol.test(string))) {
      return string.length;
    }
    var result = reComplexSymbol.lastIndex = 0;
    while (reComplexSymbol.test(string)) {
      result++;
    }
    return result;
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return string.match(reComplexSymbol);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Use `context` to mock `Date#getTime` use in `_.now`.
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;

    /** Built-in constructor references. */
    var Date = context.Date,
        Error = context.Error,
        Math = context.Math,
        RegExp = context.RegExp,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = context.Array.prototype,
        objectProto = context.Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = context.Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Reflect = context.Reflect,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        clearTimeout = context.clearTimeout,
        enumerate = Reflect ? Reflect.enumerate : undefined,
        getPrototypeOf = Object.getPrototypeOf,
        getOwnPropertySymbols = Object.getOwnPropertySymbols,
        iteratorSymbol = typeof (iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        setTimeout = context.setTimeout,
        splice = arrayProto.splice;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = Object.keys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var Map = getNative(context, 'Map'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
    var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var mapCtorString = Map ? funcToString.call(Map) : '',
        setCtorString = Set ? funcToString.call(Set) : '',
        weakMapCtorString = WeakMap ? funcToString.call(WeakMap) : '';

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chaining. Methods that operate on and return arrays, collections, and
     * functions can be chained together. Methods that retrieve a single value or
     * may return a primitive value will automatically end the chain sequence and
     * return the unwrapped value. Otherwise, the value must be unwrapped with
     * `_#value`.
     *
     * Explicit chaining, which must be unwrapped with `_#value` in all cases,
     * may be enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization to merge iteratee calls; this avoids the creation
     * of intermediate arrays and can greatly reduce the number of iteratee executions.
     * Sections of a chain sequence qualify for shortcut fusion if the section is
     * applied to an array of at least two hundred elements and any iteratees
     * accept only one argument. The heuristic for whether a section qualifies
     * for shortcut fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatten`, `flattenDeep`, `flattenDepth`, `flip`, `flow`, `flowRight`,
     * `fromPairs`, `functions`, `functionsIn`, `groupBy`, `initial`, `intersection`,
     * `intersectionBy`, `intersectionWith`, `invert`, `invertBy`, `invokeMap`,
     * `iteratee`, `keyBy`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`,
     * `matches`, `matchesProperty`, `memoize`, `merge`, `mergeWith`, `method`,
     * `methodOf`, `mixin`, `negate`, `nthArg`, `omit`, `omitBy`, `once`, `orderBy`,
     * `over`, `overArgs`, `overEvery`, `overSome`, `partial`, `partialRight`,
     * `partition`, `pick`, `pickBy`, `plant`, `property`, `propertyOf`, `pull`,
     * `pullAll`, `pullAllBy`, `pullAllWith`, `pullAt`, `push`, `range`,
     * `rangeRight`, `rearg`, `reject`, `remove`, `rest`, `reverse`, `sampleSize`,
     * `set`, `setWith`, `shuffle`, `slice`, `sort`, `sortBy`, `splice`, `spread`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `tap`, `throttle`,
     * `thru`, `toArray`, `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`,
     * `transform`, `unary`, `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`,
     * `uniqWith`, `unset`, `unshift`, `unzip`, `unzipWith`, `update`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`, `zipObject`,
     * `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `each`, `eachRight`,
     * `endsWith`, `eq`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `first`, `floor`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `get`, `gt`, `gte`, `has`, `hasIn`, `head`, `identity`, `includes`,
     * `indexOf`, `inRange`, `invoke`, `isArguments`, `isArray`, `isArrayBuffer`,
     * `isArrayLike`, `isArrayLikeObject`, `isBoolean`, `isBuffer`, `isDate`,
     * `isElement`, `isEmpty`, `isEqual`, `isEqualWith`, `isError`, `isFinite`,
     * `isFunction`, `isInteger`, `isLength`, `isMap`, `isMatch`, `isMatchWith`,
     * `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`, `isObject`, `isObjectLike`,
     * `isPlainObject`, `isRegExp`, `isSafeInteger`, `isSet`, `isString`,
     * `isUndefined`, `isTypedArray`, `isWeakMap`, `isWeakSet`, `join`, `kebabCase`,
     * `last`, `lastIndexOf`, `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`,
     * `maxBy`, `mean`, `min`, `minBy`, `noConflict`, `noop`, `now`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toInteger`, `toJSON`, `toLength`, `toLower`,
     * `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`, `trimEnd`,
     * `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`, `upperFirst`,
     * `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||
          (arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an hash object.
     *
     * @private
     * @constructor
     * @returns {Object} Returns the new hash object.
     */
    function Hash() {}

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(hash, key) {
      return hashHas(hash, key) && delete hash[key];
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @param {Object} hash The hash to query.
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(hash, key) {
      if (nativeCreate) {
        var result = hash[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @param {Object} hash The hash to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(hash, key) {
      return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     */
    function hashSet(hash, key, value) {
      hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function MapCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.clear();
      while (++index < length) {
        var entry = values[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapClear() {
      this.__data__ = {
        'hash': new Hash,
        'map': Map ? new Map : [],
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapDelete(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map['delete'](key) : assocDelete(data.map, key);
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapGet(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashGet(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map.get(key) : assocGet(data.map, key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashHas(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map.has(key) : assocHas(data.map, key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache object.
     */
    function mapSet(key, value) {
      var data = this.__data__;
      if (isKeyable(key)) {
        hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
      } else if (Map) {
        data.map.set(key, value);
      } else {
        assocSet(data.map, key, value);
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a set cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.push(values[index]);
      }
    }

    /**
     * Checks if `value` is in `cache`.
     *
     * @private
     * @param {Object} cache The set cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function cacheHas(cache, value) {
      var map = cache.__data__;
      if (isKeyable(value)) {
        var data = map.__data__,
            hash = typeof value == 'string' ? data.string : data.hash;

        return hash[value] === HASH_UNDEFINED;
      }
      return map.has(value);
    }

    /**
     * Adds `value` to the set cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var map = this.__data__;
      if (isKeyable(value)) {
        var data = map.__data__,
            hash = typeof value == 'string' ? data.string : data.hash;

        hash[value] = HASH_UNDEFINED;
      }
      else {
        map.set(value, HASH_UNDEFINED);
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function Stack(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.clear();
      while (++index < length) {
        var entry = values[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = { 'array': [], 'map': null };
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocDelete(array, key) : data.map['delete'](key);
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocGet(array, key) : data.map.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocHas(array, key) : data.map.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache object.
     */
    function stackSet(key, value) {
      var data = this.__data__,
          array = data.array;

      if (array) {
        if (array.length < (LARGE_ARRAY_SIZE - 1)) {
          assocSet(array, key, value);
        } else {
          data.array = null;
          data.map = new MapCache(array);
        }
      }
      var map = data.map;
      if (map) {
        map.set(key, value);
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Removes `key` and its value from the associative array.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function assocDelete(array, key) {
      var index = assocIndexOf(array, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = array.length - 1;
      if (index == lastIndex) {
        array.pop();
      } else {
        splice.call(array, index, 1);
      }
      return true;
    }

    /**
     * Gets the associative array value for `key`.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function assocGet(array, key) {
      var index = assocIndexOf(array, key);
      return index < 0 ? undefined : array[index][1];
    }

    /**
     * Checks if an associative array value for `key` exists.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function assocHas(array, key) {
      return assocIndexOf(array, key) > -1;
    }

    /**
     * Gets the index at which the first occurrence of `key` is found in `array`
     * of key-value pairs.
     *
     * @private
     * @param {Array} array The array to search.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Sets the associative array `key` to `value`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     */
    function assocSet(array, key, value) {
      var index = assocIndexOf(array, key);
      if (index < 0) {
        array.push([key, value]);
      } else {
        array[index][1] = value;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function assignInDefaults(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (typeof key == 'number' && value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          isNil = object == null,
          length = paths.length,
          result = Array(length);

      while (++index < length) {
        result[index] = isNil ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the array-like object.
     */
    function baseCastArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the array-like object.
     */
    function baseCastFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast property path array.
     */
    function baseCastPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {boolean} [isFull] Specify a clone including symbols.
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          if (isHostObject(value)) {
            return object ? value : {};
          }
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            result = baseAssign(result, value);
            return isFull ? copySymbols(value, result) : result;
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
      });
      return (isFull && !isArr) ? copySymbols(value, result) : result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new function.
     */
    function baseConforms(source) {
      var props = keys(source),
          length = props.length;

      return function(object) {
        if (object == null) {
          return !length;
        }
        var index = length;
        while (index--) {
          var key = props[index],
              predicate = source[key],
              value = object[key];

          if ((value === undefined && !(key in Object(object))) || !predicate(value)) {
            return false;
          }
        }
        return true;
      };
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(proto) {
      return isObject(proto) ? objectCreate(proto) : {};
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an array
     * of `func` arguments.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments to provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support for
     * excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, isStrict, result) {
      result || (result = []);

      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && isArrayLikeObject(value) &&
            (isStrict || isArray(value) || isArguments(value))) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forIn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return object == null ? object : baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = isKey(path, object) ? [path + ''] : baseCastPath(path);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[path[index++]];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
      // that are composed entirely of index properties, return `false` for
      // `hasOwnProperty` checks of them.
      return hasOwnProperty.call(object, key) ||
        (typeof object == 'object' && key in object && getPrototypeOf(object) === null);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      if (!isKey(path, object)) {
        path = baseCastPath(path);
        object = parent(object, path);
        path = last(path);
      }
      var func = object == null ? object : object[path];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {boolean} [bitmask] The bitmask of comparison flags.
     *  The bitmask may be composed of the following flags:
     *     1 - Unordered comparison
     *     2 - Partial comparison
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object),
          othIsObj = othTag == objectTag && !isHostObject(other),
          isSameTag = objTag == othTag;

      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
          : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          stack || (stack = new Stack);
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack,
              result = customizer ? customizer(objValue, srcValue, key, object, source, stack) : undefined;

          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      var type = typeof value;
      if (type == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (type == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      return nativeKeys(Object(object));
    }

    /**
     * The base implementation of `_.keysIn` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      object = object == null ? object : Object(object);

      var result = [];
      for (var key in object) {
        result.push(key);
      }
      return result;
    }

    // Fallback for IE < 9 with es6-shim.
    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
      baseKeysIn = function(object) {
        return iteratorToArray(enumerate(object));
      };
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        var key = matchData[0][0],
            value = matchData[0][1];

        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === value &&
            (value !== undefined || (key in Object(object)));
        };
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(path, srcValue) {
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      var props = (isArray(source) || isTypedArray(source))
        ? undefined
        : keysIn(source);

      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      });
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        newValue = srcValue;
        if (isArray(srcValue) || isTypedArray(srcValue)) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else {
            isCommon = false;
            newValue = baseClone(srcValue, !customizer);
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            isCommon = false;
            newValue = baseClone(srcValue, !customizer);
          }
          else {
            newValue = objValue;
          }
        }
        else {
          isCommon = false;
        }
      }
      stack.set(srcValue, newValue);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      }
      stack['delete'](srcValue);
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : Array(1), getIteratee());

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property names.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, props) {
      object = Object(object);
      return arrayReduce(props, function(result, key) {
        if (key in object) {
          result[key] = object[key];
        }
        return result;
      }, {});
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key) {
        if (predicate(value, key)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (lastIndex == length || index != previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          }
          else if (!isKey(index, array)) {
            var path = baseCastPath(index),
                object = parent(array, path);

            if (object != null) {
              delete object[last(path)];
            }
          }
          else {
            delete array[index];
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments to numbers.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the new array of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      path = isKey(path, object) ? [path + ''] : baseCastPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = path[index];
        if (isObject(nested)) {
          var newValue = value;
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;
            if (newValue === undefined) {
              newValue = objValue == null
                ? (isIndex(path[index + 1]) ? [] : {})
                : objValue;
            }
          }
          assignValue(nested, key, newValue);
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsUndef = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            isDef = computed !== undefined,
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsNull) {
          setLow = isReflexive && isDef && (retHighest || computed != null);
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || isDef);
        } else if (computed == null) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array) {
      return baseSortedUniqBy(array);
    }

    /**
     * The base implementation of `_.sortedUniqBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniqBy(array, iteratee) {
      var index = 0,
          length = array.length,
          value = array[0],
          computed = iteratee ? iteratee(value) : value,
          seen = computed,
          resIndex = 1,
          result = [value];

      while (++index < length) {
        value = array[index],
        computed = iteratee ? iteratee(value) : value;

        if (!eq(computed, seen)) {
          seen = computed;
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = isKey(path, object) ? [path + ''] : baseCastPath(path);
      object = parent(object, path);
      var key = last(path);
      return (object != null && has(object, key)) ? delete object[key] : true;
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var index = -1,
          length = arrays.length;

      while (++index < length) {
        var result = result
          ? arrayPush(
              baseDifference(result, arrays[index], iteratee, comparator),
              baseDifference(arrays[index], result, iteratee, comparator)
            )
          : arrays[index];
      }
      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property names.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        assignFunc(result, props[index], index < valsLength ? values[index] : undefined);
      }
      return result;
    }

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var result = new buffer.constructor(buffer.length);
      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map) {
      return arrayReduce(mapToArray(map), addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set) {
      return arrayReduce(setToArray(set), addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object) {
      return copyObjectWith(source, props, object);
    }

    /**
     * This function is like `copyObject` except that it accepts a function to
     * customize copied values.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObjectWith(source, props, object, customizer) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : source[key];

        assignValue(object, key, newValue);
      }
      return object;
    }

    /**
     * Copies own symbol properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return rest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = typeof customizer == 'function'
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBaseWrapper(func, bitmask, thisArg) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = reHasComplexSymbol.test(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols ? strSymbols[0] : string.charAt(0),
            trailing = strSymbols ? strSymbols.slice(1).join('') : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string)), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors.
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurryWrapper(func, bitmask, arity) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getPlaceholder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurryWrapper(
            func, bitmask, createHybridWrapper, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return rest(function(funcs) {
        funcs = baseFlatten(funcs, 1);

        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 &&
              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
          isFlip = bitmask & FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtorWrapper(func);

      function wrapper() {
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getPlaceholder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurryWrapper(
            func, bitmask, createHybridWrapper, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new invoker function.
     */
    function createOver(arrayFunc) {
      return rest(function(iteratees) {
        iteratees = arrayMap(baseFlatten(iteratees, 1), getIteratee());
        return rest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(string, length, chars) {
      length = toInteger(length);

      var strLength = stringSize(string);
      if (!length || strLength >= length) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars === undefined ? ' ' : (chars + '');

      var result = repeat(chars, nativeCeil(padLength / stringSize(chars)));
      return reHasComplexSymbol.test(chars)
        ? stringToArray(result).slice(0, padLength).join('')
        : result.slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toNumber(start);
        start = start === start ? start : 0;
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toNumber(end) || 0;
        }
        step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & CURRY_FLAG,
          newArgPos = argPos ? copyArray(argPos) : undefined,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

      if (!(bitmask & CURRY_BOUND_FLAG)) {
        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, newArgPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return result;
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = toInteger(precision);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && new Set([1, 2]).size === 2) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask of wrapper flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] == null
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == BIND_FLAG) {
        var result = createBaseWrapper(func, bitmask, thisArg);
      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
        result = createCurryWrapper(func, bitmask, arity);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
        result = createPartialWrapper(func, bitmask, thisArg, partials);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var index = -1,
          isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked) {
        return stacked == other;
      }
      var result = true;
      stack.set(array, other);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (isUnordered) {
          if (!arraySome(other, function(othValue) {
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);
              })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object) ? other != +other : object == +other;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          // Recursively compare objects (susceptible to call stack limits).
          return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask | UNORDERED_COMPARE_FLAG, stack.set(object, other));

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : baseHas(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      return result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the appropriate "iteratee" function. If the `_.iteratee` method is
     * customized this function returns the custom method, otherwise it returns
     * `baseIteratee`. If arguments are provided the chosen function is invoked
     * with them and its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = toPairs(object),
          length = result.length;

      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = object[key];
      return isNative(value) ? value : undefined;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getPlaceholder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Creates an array of the own symbol properties of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = getOwnPropertySymbols || function() {
      return [];
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function getTag(value) {
      return objectToString.call(value);
    }

    // Fallback for IE 11 providing `toStringTag` values for maps, sets, and weakmaps.
    if ((Map && getTag(new Map) != mapTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = objectToString.call(value),
            Ctor = result == objectTag ? value.constructor : null,
            ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case mapCtorString: return mapTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      if (object == null) {
        return false;
      }
      var result = hasFunc(object, path);
      if (!result && !isKey(path)) {
        path = baseCastPath(path);
        object = parent(object, path);
        if (object != null) {
          path = last(path);
          result = hasFunc(object, path);
        }
      }
      var length = object ? object.length : undefined;
      return result || (
        !!length && isLength(length) && isIndex(path, length) &&
        (isArray(object) || isString(object) || isArguments(object))
      );
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototypeOf(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Creates an array of index keys for `object` values of arrays,
     * `arguments` objects, and strings, otherwise `null` is returned.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array|null} Returns index keys, else `null`.
     */
    function indexKeys(object) {
      var length = object ? object.length : undefined;
      if (isLength(length) &&
          (isArray(object) || isString(object) || isArguments(object))) {
        return baseTimes(length, String);
      }
      return null;
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (typeof value == 'number') {
        return true;
      }
      return !isArray(value) &&
        (reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
          (object != null && value in Object(object)));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return type == 'number' || type == 'boolean' ||
        (type == 'string' && value != '__proto__') || value == null;
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * modify function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * combined case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);

      var isCombo =
        ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) ||
        ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : copyArray(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : copyArray(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : copyArray(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : copyArray(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = copyArray(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     * @returns {*} Returns the value to assign.
     */
    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack.set(srcValue, objValue));
      }
      return objValue;
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length == 1 ? object : get(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    function stringToPath(string) {
      var result = [];
      toString(string).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=0] The length of each chunk.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size) {
      size = nativeMax(toInteger(size), 0);

      var length = array ? array.length : 0;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    var concat = rest(function(array, values) {
      if (!isArray(array)) {
        array = array == null ? [] : [Object(array)];
      }
      values = baseFlatten(values, 1);
      return arrayConcat(array, values);
    });

    /**
     * Creates an array of unique `array` values not included in the other
     * given arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. The order of result values is determined by the
     * order they occur in the first array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([3, 2, 1], [4, 2]);
     * // => [3, 1]
     */
    var difference = rest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. Result values are chosen from the first array.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);
     * // => [3.1, 1.3]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = rest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, true), getIteratee(iteratee))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. Result values
     * are chosen from the first array. The comparator is invoked with two arguments:
     * (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = rest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate) {
      return (array && array.length)
        ? baseFindIndex(array, getIteratee(predicate, 3))
        : -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate) {
      return (array && array.length)
        ? baseFindIndex(array, getIteratee(predicate, 3), true)
        : -1;
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs ? pairs.length : 0,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the offset
     * from the end of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      fromIndex = toInteger(fromIndex);
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. The order of result values is determined by the
     * order they occur in the first array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [4, 2], [1, 2]);
     * // => [2]
     */
    var intersection = rest(function(arrays) {
      var mapped = arrayMap(arrays, baseCastArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. Result values are chosen from the first array.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = rest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, baseCastArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. Result values are chosen
     * from the first array. The comparator is invoked with two arguments:
     * (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = rest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, baseCastArrayLikeObject);

      if (comparator === last(mapped)) {
        comparator = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array ? nativeJoin.call(array, separator) : '';
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = (index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)) + 1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    var pull = rest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pullAll(array, [2, 3]);
     * console.log(array);
     * // => [1, 1]
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified individually or in arrays.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    var pullAt = rest(function(array, indexes) {
      indexes = arrayMap(baseFlatten(indexes, 1), String);

      var result = baseAt(array, indexes);
      basePullAt(array, indexes.sort(compareAscending));
      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @category Array
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array ? nativeReverse.call(array) : array;
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of [`Array#slice`](https://mdn.io/Array/slice)
     * to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 5], 4);
     * // => 0
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };
     *
     * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([1, 1, 2, 2], 2);
     * // => 2
     */
    function sortedIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5], 4);
     * // => 1
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([1, 1, 2, 2], 2);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniqBy(array, getIteratee(iteratee))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with three
     * arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2, 1], [4, 2], [1, 2]);
     * // => [2, 1, 4]
     */
    var union = rest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [2.1, 1.2, 4.3]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = rest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, true), getIteratee(iteratee));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = rest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length)
        ? baseUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length)
        ? baseUniq(array, getIteratee(iteratee))
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      return (array && array.length)
        ? baseUniq(array, undefined, comparator)
        : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    var without = rest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([2, 1], [4, 2]);
     * // => [1, 4]
     */
    var xor = rest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by which
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [1.2, 4.3]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = rest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = rest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = rest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property names and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} [props=[]] The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} [props=[]] The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = rest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method chaining enabled.
     * The result of such method chaining must be unwrapped with `_#value`.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths of elements to pick,
     *  specified individually or in arrays.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     *
     * _(['a', 'b', 'c']).at(0, 2).value();
     * // => ['a', 'c']
     */
    var wrapperAt = rest(function(paths) {
      paths = baseFlatten(paths, 1);
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * This method is the wrapper version of `_.flatMap`.
     *
     * @name flatMap
     * @memberOf _
     * @category Seq
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _([1, 2]).flatMap(duplicate).value();
     * // => [1, 1, 2, 2]
     */
    function wrapperFlatMap(iteratee) {
      return this.map(iteratee).flatten();
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three arguments:
     * (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three arguments:
     * (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    function find(collection, predicate) {
      predicate = getIteratee(predicate, 3);
      if (isArray(collection)) {
        var index = baseFindIndex(collection, predicate);
        return index > -1 ? collection[index] : undefined;
      }
      return baseFind(collection, predicate, baseEach);
    }

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, predicate) {
      predicate = getIteratee(predicate, 3);
      if (isArray(collection)) {
        var index = baseFindIndex(collection, predicate, true);
        return index > -1 ? collection[index] : undefined;
      }
      return baseFind(collection, predicate, baseEachRight);
    }

    /**
     * Creates an array of flattened values by running each element in `collection`
     * through `iteratee` and concating its result to the other mapped values.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior use `_.forIn` or `_.forOwn`
     * for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(value) {
     *   console.log(value);
     * });
     * // => logs `1` then `2`
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' then 'b' (iteration order is not guaranteed)
     */
    function forEach(collection, iteratee) {
      return (typeof iteratee == 'function' && isArray(collection))
        ? arrayEach(collection, iteratee)
        : baseEach(collection, baseCastFunction(iteratee));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => logs `2` then `1`
     */
    function forEachRight(collection, iteratee) {
      return (typeof iteratee == 'function' && isArray(collection))
        ? arrayEachRight(collection, iteratee)
        : baseEachRight(collection, baseCastFunction(iteratee));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of elements responsible for generating the key.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string it's checked
     * for a substring of `value`, otherwise [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it's
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = rest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`,
     * `invert`, `parseInt`, `random`, `range`, `rangeRight`, `slice`, `some`,
     * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`,
     * and `words`
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} [iteratees=[_.identity]] The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getIteratee(predicate, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var array = isArrayLike(collection) ? collection : values(collection),
          length = array.length;

      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=0] The number of elements to sample.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n) {
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      n = baseClamp(toInteger(n), 0, length);
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sampleSize(collection, MAX_ARRAY_LENGTH);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        var result = collection.length;
        return (result && isString(collection)) ? stringSize(collection) : result;
      }
      return keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} [iteratees=[_.identity]]
     *  The iteratees to sort by, specified individually or in arrays.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, function(o) { return o.user; });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.sortBy(users, 'user', function(o) {
     *   return Math.floor(o.age / 10);
     * });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    var sortBy = rest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees.length = 1;
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @type {Function}
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = Date.now;

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = rest(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getPlaceholder(bind));
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = rest(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getPlaceholder(bindKey));
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide an options object to indicate whether `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent calls
     * to the debounced function return the result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it's invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          leading = false,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxWait = 'maxWait' in options && nativeMax(toNumber(options.maxWait) || 0, wait);
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        lastCalled = 0;
        args = maxTimeoutId = thisArg = timeoutId = trailingCall = undefined;
      }

      function complete(isCalled, id) {
        if (id) {
          clearTimeout(id);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (isCalled) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = undefined;
          }
        }
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function flush() {
        if ((timeoutId && trailingCall) || (maxTimeoutId && trailing)) {
          result = func.apply(thisArg, args);
        }
        cancel();
        return result;
      }

      function maxDelayed() {
        complete(trailing, timeoutId);
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!lastCalled && !maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled);

          var isCalled = (remaining <= 0 || remaining > maxWait) &&
            (leading || maxTimeoutId);

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = undefined;
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => logs 'deferred' after one or more milliseconds
     */
    var defer = rest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    var delay = rest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrapper(func, FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with arguments transformed by
     * corresponding `transforms`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms] The functions to transform
     * arguments, specified individually or in arrays.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, square, doubled);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = rest(function(func, transforms) {
      transforms = arrayMap(baseFlatten(transforms, 1), getIteratee());

      var funcsLength = transforms.length;
      return rest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = rest(function(func, partials) {
      var holders = replaceHolders(partials, getPlaceholder(partial));
      return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = rest(function(func, partials) {
      var holders = replaceHolders(partials, getPlaceholder(partialRight));
      return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified individually or in arrays.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = rest(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, array);
          case 1: return func.call(this, args[0], array);
          case 2: return func.call(this, args[0], args[1], array);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
      return rest(function(args) {
        var array = args[start],
            otherArgs = args.slice(0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide an options object to indicate whether
     * `func` should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return partial(wrapper, value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, false, true);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      return baseClone(value, false, true, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, true, true);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      return baseClone(value, true, true, customizer);
    }

    /**
     * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    function gt(value, other) {
      return value > other;
    }

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    function gte(value, other) {
      return value >= other;
    }

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @type {Function}
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    function isArrayBuffer(value) {
      return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
    }

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(getLength(value)) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && objectToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = !Buffer ? constant(false) : function(value) {
      return value instanceof Buffer;
    };

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objectToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty collection or object. A value is considered
     * empty if it's an `arguments` object, array, string, or jQuery-like collection
     * with a length of `0` or has no own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (isArrayLike(value) &&
          (isArray(value) || isString(value) ||
            isFunction(value.splice) || isArguments(value))) {
        return !value.length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are **not** supported.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined` comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      return (objectToString.call(value) == errorTag) ||
        (typeof value.message == 'string' && typeof value.name == 'string');
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MAX_VALUE);
     * // => true
     *
     * _.isFinite(3.14);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 8 which returns 'object' for typed array and weak map constructors,
      // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
      var tag = isObject(value) ? objectToString.call(value) : '';
      return tag == funcTag || tag == genTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    function isMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values. This method is
     * equivalent to a `_.matches` function when `source` is partially applied.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined` comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(funcToString.call(value));
      }
      return isObjectLike(value) &&
        (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && objectToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) ||
          objectToString.call(value) != objectTag || isHostObject(value)) {
        return false;
      }
      var proto = getPrototypeOf(value);
      if (proto === null) {
        return true;
      }
      var Ctor = proto.constructor;
      return (typeof Ctor == 'function' &&
        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return isObject(value) && objectToString.call(value) == regexpTag;
    }

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    function isSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && objectToString.call(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    function lt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    function lte(value, other) {
      return value <= other;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (iteratorSymbol && value[iteratorSymbol]) {
        return iteratorToArray(value[iteratorSymbol]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3');
     * // => 3
     */
    function toInteger(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      var remainder = value % 1;
      return value === value ? (remainder ? value - remainder : value) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3);
     * // => 3
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3');
     * // => 3
     */
    function toNumber(value) {
      if (isObject(value)) {
        var other = isFunction(value.valueOf) ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3');
     * // => 3
     */
    function toSafeInteger(value) {
      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    }

    /**
     * Converts `value` to a string if it's not one. An empty string is returned
     * for `null` and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (value == null) {
        return '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source objects to the destination
     * object. Source objects are applied from left to right. Subsequent sources
     * overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.c = 3;
     * }
     *
     * function Bar() {
     *   this.e = 5;
     * }
     *
     * Foo.prototype.d = 4;
     * Bar.prototype.f = 6;
     *
     * _.assign({ 'a': 1 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3, 'e': 5 }
     */
    var assign = createAssigner(function(object, source) {
      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * function Bar() {
     *   this.d = 4;
     * }
     *
     * Foo.prototype.c = 3;
     * Bar.prototype.e = 5;
     *
     * _.assignIn({ 'a': 1 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }
     */
    var assignIn = createAssigner(function(object, source) {
      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keysIn(source), object);
        return;
      }
      for (var key in source) {
        assignValue(object, key, source[key]);
      }
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer` which
     * is invoked to produce the assigned values. If `customizer` returns `undefined`
     * assignment is handled by the method instead. The `customizer` is invoked
     * with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObjectWith(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer` which
     * is invoked to produce the assigned values. If `customizer` returns `undefined`
     * assignment is handled by the method instead. The `customizer` is invoked
     * with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObjectWith(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths of elements to pick,
     *  specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     *
     * _.at(['a', 'b', 'c'], 0, 2);
     * // => ['a', 'c']
     */
    var at = rest(function(object, paths) {
      return baseAt(object, baseFlatten(paths, 1));
    });

    /**
     * Creates an object that inherits from the `prototype` object. If a `properties`
     * object is given its own enumerable properties are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own and inherited enumerable properties of source objects to the
     * destination object for all destination properties that resolve to `undefined`.
     * Source objects are applied from left to right. Once a property is set,
     * additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = rest(function(args) {
      args.push(undefined, assignInDefaults);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
     * // => { 'user': { 'name': 'barney', 'age': 36 } }
     *
     */
    var defaultsDeep = rest(function(args) {
      args.push(undefined, mergeDefaults);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);
    }

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The iteratee is invoked with three arguments:
     * (value, key, object). Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', then 'c' (iteration order is not guaranteed)
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, baseCastFunction(iteratee), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, baseCastFunction(iteratee), keysIn);
    }

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The iteratee is invoked with three arguments:
     * (value, key, object). Iteratee functions may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' then 'b' (iteration order is not guaranteed)
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, baseCastFunction(iteratee));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, baseCastFunction(iteratee));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     * var other = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b.c');
     * // => true
     *
     * _.hasIn(object, ['a', 'b', 'c']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` through `iteratee`.
     * The corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = rest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      var isProto = isPrototype(object);
      if (!(isProto || isArrayLike(object))) {
        return baseKeys(object);
      }
      var indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      for (var key in object) {
        if (baseHas(object, key) &&
            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(isProto && key == 'constructor')) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      var index = -1,
          isProto = isPrototype(object),
          props = baseKeysIn(object),
          propsLength = props.length,
          indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      while (++index < propsLength) {
        var key = props[index];
        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * property of `object` through `iteratee`. The iteratee is invoked with
     * three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[iteratee(value, key, object)] = value;
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee is invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[key] = iteratee(value, key, object);
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable properties of source objects into the destination
     * object. Source properties that resolve to `undefined` are skipped if a
     * destination value exists. Array and plain object properties are merged
     * recursively.Other objects and value types are overridden by assignment.
     * Source objects are applied from left to right. Subsequent sources
     * overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined` merging is handled by the
     * method instead. The `customizer` is invoked with seven arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property names to omit, specified
     *  individually or in arrays.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = rest(function(object, props) {
      if (object == null) {
        return {};
      }
      props = arrayMap(baseFlatten(props, 1), String);
      return basePick(object, baseDifference(keysIn(object), props));
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable properties of `object` that `predicate`
     * doesn't return truthy for. The predicate is invoked with two arguments:
     * (value, key).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      predicate = getIteratee(predicate);
      return basePickBy(object, function(value, key) {
        return !predicate(value, key);
      });
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property names to pick, specified
     *  individually or in arrays.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = rest(function(object, props) {
      return object == null ? {} : basePick(object, baseFlatten(props, 1));
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      return object == null ? {} : basePickBy(object, getIteratee(predicate));
    }

    /**
     * This method is like `_.get` except that if the resolved value is a function
     * it's invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      if (!isKey(path, object)) {
        path = baseCastPath(path);
        var result = get(object, path);
        object = parent(object, path);
      } else {
        result = object == null ? undefined : object[path];
      }
      if (result === undefined) {
        result = defaultValue;
      }
      return isFunction(result) ? result.call(object) : result;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable key-value pairs for `object` which
     * can be consumed by `_.fromPairs`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    function toPairs(object) {
      return baseToPairs(object, keys(object));
    }

    /**
     * Creates an array of own and inherited enumerable key-value pairs for
     * `object` which can be consumed by `_.fromPairs`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 1]] (iteration order is not guaranteed)
     */
    function toPairsIn(object) {
      return baseToPairs(object, keysIn(object));
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The iteratee is invoked with four arguments:
     * (accumulator, value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getIteratee(iteratee, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototypeOf(object)) : {};
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, baseCastFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, baseCastFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object ? baseValues(object, keys(object)) : [];
    }

    /**
     * Creates an array of the own and inherited enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toNumber(start) || 0;
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toNumber(end) || 0;
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are floats,
     * a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toNumber(lower) || 0;
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toNumber(upper) || 0;
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = typeof target == 'string' ? target : (target + '');

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in IE < 9, they can break out of
     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = stringSize(string);
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = nativeFloor(mid),
          rightLength = nativeCeil(mid);

      return createPadding('', leftLength, chars) + string + createPadding('', rightLength, chars);
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      return string + createPadding(string, length, chars);
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      return createPadding(string, length, chars) + string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#x15.1.2.2)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = toString(string).replace(reTrim, '');
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      string = toString(string);
      n = toInteger(n);

      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the new array of string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      return toString(string).split(separator, limit);
    }

    /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + capitalize(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = baseClamp(toInteger(position), 0, string.length);
      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES delimiter as an alternative to the default "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, assignInDefaults);

      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar');
     * // => '--foo-bar'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar');
     * // => '--FOO-BAR'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrim, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars);

      return strSymbols
        .slice(charsStartIndex(strSymbols, chrSymbols), charsEndIndex(strSymbols, chrSymbols) + 1)
        .join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrimEnd, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string);
      return strSymbols
        .slice(0, charsEndIndex(strSymbols, stringToArray(chars)) + 1)
        .join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrimStart, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string);
      return strSymbols
        .slice(charsStartIndex(strSymbols, stringToArray(chars)))
        .join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options=({})] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? toString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (reHasComplexSymbol.test(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? strSymbols.slice(0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = rest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind,
     *  specified individually or in arrays.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, 'onClick');
     * jQuery(element).on('click', view.onClick);
     * // => logs 'clicked docs' when clicked
     */
    var bindAll = rest(function(object, methodNames) {
      arrayEach(baseFlatten(methodNames, 1), function(key) {
        object[key] = bind(object[key], object);
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` invoking the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.constant(true),                _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs ? pairs.length : 0,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return rest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, true));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument given to it.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name the created callback returns the
     * property value for a given element. If `func` is an object the created
     * callback returns `true` for elements that contain the equivalent object
     * properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(callback, func) {
     *   var p = /^(\S+)\s*([<>])\s*(\S+)$/.exec(func);
     *   return !p ? callback(func) : function(object) {
     *     return (p[2] == '>' ? object[p[1]] > p[3] : object[p[1]] < p[3]);
     *   };
     * });
     *
     * _.filter(users, 'age > 36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`. The created function is equivalent to
     * `_.isMatch` with a `source` partially applied.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invokeMap(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    var method = rest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = rest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = (isObject(options) && 'chain' in options) ? options.chain : true,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Util
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that returns its nth argument.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.nthArg(1);
     *
     * func('a', 'b', 'c');
     * // => 'b'
     */
    function nthArg(n) {
      n = toInteger(n);
      return function() {
        return arguments[n];
      };
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments provided
     * to the created function and returns their results.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} iteratees The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over(Math.max, Math.min);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments provided to the created function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} predicates The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery(Boolean, isFinite);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments provided to the created function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} predicates The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome(Boolean, isFinite);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(true));
     * // => [true, true, true, true]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = baseCastFunction(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     *
     * var path = ['a', 'b', 'c'],
     *     newPath = _.toPath(path);
     *
     * console.log(newPath);
     * // => ['a', 'b', 'c']
     *
     * console.log(path === newPath);
     * // => false
     */
    function toPath(value) {
      return isArray(value) ? arrayMap(value, String) : stringToPath(value);
    }

    /**
     * Generates a unique ID. If `prefix` is given the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      var result;
      if (augend === undefined && addend === undefined) {
        return 0;
      }
      if (augend !== undefined) {
        result = augend;
      }
      if (addend !== undefined) {
        result = result === undefined ? addend : (result + addend);
      }
      return result;
    }

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey
     * `undefined` is returned.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, gt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee), gt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return sum(array) / (array ? array.length : 0);
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey
     * `undefined` is returned.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, lt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee), lt)
        : undefined;
    }

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    function subtract(minuend, subtrahend) {
      var result;
      if (minuend === undefined && subtrahend === undefined) {
        return 0;
      }
      if (minuend !== undefined) {
        result = minuend;
      }
      if (subtrahend !== undefined) {
        result = result === undefined ? subtrahend : (result - subtrahend);
      }
      return result;
    }

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Avoid inheriting from `Object.prototype` when possible.
    Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;

    // Add functions to the `MapCache`.
    MapCache.prototype.clear = mapClear;
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `SetCache`.
    SetCache.prototype.push = cachePush;

    // Add functions to the `Stack` cache.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = rest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      predicate = getIteratee(predicate, 3);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Map minified function names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.flatMap = wrapperFlatMap;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    if (iteratorSymbol) {
      lodash.prototype[iteratorSymbol] = wrapperToIterator;
    }
    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Expose lodash on the free variable `window` or `self` when available. This
  // prevents errors in cases where lodash is loaded by a script tag in the presence
  // of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch for more details.
  (freeWindow || freeSelf || {})._ = _;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],254:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options){
  options = options || {};
  if ('string' == typeof val) return parse(val);
  return options.long
    ? long(val)
    : short(val);
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = '' + str;
  if (str.length > 10000) return;
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
  if (!match) return;
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function short(ms) {
  if (ms >= d) return Math.round(ms / d) + 'd';
  if (ms >= h) return Math.round(ms / h) + 'h';
  if (ms >= m) return Math.round(ms / m) + 'm';
  if (ms >= s) return Math.round(ms / s) + 's';
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function long(ms) {
  return plural(ms, d, 'day')
    || plural(ms, h, 'hour')
    || plural(ms, m, 'minute')
    || plural(ms, s, 'second')
    || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) return;
  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}]},{},[249])(249)
});